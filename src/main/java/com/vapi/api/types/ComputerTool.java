/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ComputerTool.Builder.class)
public final class ComputerTool {
    private final Optional<Boolean> async;

    private final Optional<List<ComputerToolMessagesItem>> messages;

    private final String id;

    private final String orgId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<OpenAiFunction> function;

    private final Optional<Server> server;

    private final double displayWidthPx;

    private final double displayHeightPx;

    private final Optional<Double> displayNumber;

    private final Map<String, Object> additionalProperties;

    private ComputerTool(
            Optional<Boolean> async,
            Optional<List<ComputerToolMessagesItem>> messages,
            String id,
            String orgId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<OpenAiFunction> function,
            Optional<Server> server,
            double displayWidthPx,
            double displayHeightPx,
            Optional<Double> displayNumber,
            Map<String, Object> additionalProperties) {
        this.async = async;
        this.messages = messages;
        this.id = id;
        this.orgId = orgId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.function = function;
        this.server = server;
        this.displayWidthPx = displayWidthPx;
        this.displayHeightPx = displayHeightPx;
        this.displayNumber = displayNumber;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This determines if the tool is async.
     * <p>If async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.</p>
     * <p>If sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.</p>
     * <p>Defaults to synchronous (<code>false</code>).</p>
     */
    @JsonProperty("async")
    public Optional<Boolean> getAsync() {
        return async;
    }

    /**
     * @return These are the messages that will be spoken to the user as the tool is running.
     * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
     */
    @JsonProperty("messages")
    public Optional<List<ComputerToolMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return The sub type of tool.
     */
    @JsonProperty("subType")
    public String getSubType() {
        return "computer_20241022";
    }

    /**
     * @return This is the unique identifier for the tool.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the organization that this tool belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the tool was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the tool was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is the function definition of the tool.
     * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
     * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
     */
    @JsonProperty("function")
    public Optional<OpenAiFunction> getFunction() {
        return function;
    }

    /**
     * @return This is the server that will be hit when this tool is requested by the model.
     * <p>All requests will be sent with the call object among other things. You can find more details in the Server URL documentation.</p>
     * <p>This overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.</p>
     */
    @JsonProperty("server")
    public Optional<Server> getServer() {
        return server;
    }

    /**
     * @return The name of the tool, fixed to 'computer'
     */
    @JsonProperty("name")
    public String getName() {
        return "computer";
    }

    /**
     * @return The display width in pixels
     */
    @JsonProperty("displayWidthPx")
    public double getDisplayWidthPx() {
        return displayWidthPx;
    }

    /**
     * @return The display height in pixels
     */
    @JsonProperty("displayHeightPx")
    public double getDisplayHeightPx() {
        return displayHeightPx;
    }

    /**
     * @return Optional display number
     */
    @JsonProperty("displayNumber")
    public Optional<Double> getDisplayNumber() {
        return displayNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ComputerTool && equalTo((ComputerTool) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ComputerTool other) {
        return async.equals(other.async)
                && messages.equals(other.messages)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && function.equals(other.function)
                && server.equals(other.server)
                && displayWidthPx == other.displayWidthPx
                && displayHeightPx == other.displayHeightPx
                && displayNumber.equals(other.displayNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.async,
                this.messages,
                this.id,
                this.orgId,
                this.createdAt,
                this.updatedAt,
                this.function,
                this.server,
                this.displayWidthPx,
                this.displayHeightPx,
                this.displayNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        OrgIdStage id(@NotNull String id);

        Builder from(ComputerTool other);
    }

    public interface OrgIdStage {
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        DisplayWidthPxStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface DisplayWidthPxStage {
        DisplayHeightPxStage displayWidthPx(double displayWidthPx);
    }

    public interface DisplayHeightPxStage {
        _FinalStage displayHeightPx(double displayHeightPx);
    }

    public interface _FinalStage {
        ComputerTool build();

        _FinalStage async(Optional<Boolean> async);

        _FinalStage async(Boolean async);

        _FinalStage messages(Optional<List<ComputerToolMessagesItem>> messages);

        _FinalStage messages(List<ComputerToolMessagesItem> messages);

        _FinalStage function(Optional<OpenAiFunction> function);

        _FinalStage function(OpenAiFunction function);

        _FinalStage server(Optional<Server> server);

        _FinalStage server(Server server);

        _FinalStage displayNumber(Optional<Double> displayNumber);

        _FinalStage displayNumber(Double displayNumber);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    OrgIdStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    DisplayWidthPxStage,
                    DisplayHeightPxStage,
                    _FinalStage {
        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private double displayWidthPx;

        private double displayHeightPx;

        private Optional<Double> displayNumber = Optional.empty();

        private Optional<Server> server = Optional.empty();

        private Optional<OpenAiFunction> function = Optional.empty();

        private Optional<List<ComputerToolMessagesItem>> messages = Optional.empty();

        private Optional<Boolean> async = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ComputerTool other) {
            async(other.getAsync());
            messages(other.getMessages());
            id(other.getId());
            orgId(other.getOrgId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            function(other.getFunction());
            server(other.getServer());
            displayWidthPx(other.getDisplayWidthPx());
            displayHeightPx(other.getDisplayHeightPx());
            displayNumber(other.getDisplayNumber());
            return this;
        }

        /**
         * <p>This is the unique identifier for the tool.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the organization that this tool belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the tool was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the tool was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public DisplayWidthPxStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>The display width in pixels</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("displayWidthPx")
        public DisplayHeightPxStage displayWidthPx(double displayWidthPx) {
            this.displayWidthPx = displayWidthPx;
            return this;
        }

        /**
         * <p>The display height in pixels</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("displayHeightPx")
        public _FinalStage displayHeightPx(double displayHeightPx) {
            this.displayHeightPx = displayHeightPx;
            return this;
        }

        /**
         * <p>Optional display number</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage displayNumber(Double displayNumber) {
            this.displayNumber = Optional.ofNullable(displayNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "displayNumber", nulls = Nulls.SKIP)
        public _FinalStage displayNumber(Optional<Double> displayNumber) {
            this.displayNumber = displayNumber;
            return this;
        }

        /**
         * <p>This is the server that will be hit when this tool is requested by the model.</p>
         * <p>All requests will be sent with the call object among other things. You can find more details in the Server URL documentation.</p>
         * <p>This overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage server(Server server) {
            this.server = Optional.ofNullable(server);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "server", nulls = Nulls.SKIP)
        public _FinalStage server(Optional<Server> server) {
            this.server = server;
            return this;
        }

        /**
         * <p>This is the function definition of the tool.</p>
         * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
         * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage function(OpenAiFunction function) {
            this.function = Optional.ofNullable(function);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "function", nulls = Nulls.SKIP)
        public _FinalStage function(Optional<OpenAiFunction> function) {
            this.function = function;
            return this;
        }

        /**
         * <p>These are the messages that will be spoken to the user as the tool is running.</p>
         * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<ComputerToolMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<ComputerToolMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * <p>This determines if the tool is async.</p>
         * <p>If async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.</p>
         * <p>If sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.</p>
         * <p>Defaults to synchronous (<code>false</code>).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage async(Boolean async) {
            this.async = Optional.ofNullable(async);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "async", nulls = Nulls.SKIP)
        public _FinalStage async(Optional<Boolean> async) {
            this.async = async;
            return this;
        }

        @java.lang.Override
        public ComputerTool build() {
            return new ComputerTool(
                    async,
                    messages,
                    id,
                    orgId,
                    createdAt,
                    updatedAt,
                    function,
                    server,
                    displayWidthPx,
                    displayHeightPx,
                    displayNumber,
                    additionalProperties);
        }
    }
}
