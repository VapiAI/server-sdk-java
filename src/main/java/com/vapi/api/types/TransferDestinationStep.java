/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferDestinationStep.Builder.class)
public final class TransferDestinationStep {
    private final Optional<TransferDestinationStepMessage> message;

    private final String stepName;

    private final Optional<String> description;

    private final Map<String, Object> additionalProperties;

    private TransferDestinationStep(
            Optional<TransferDestinationStepMessage> message,
            String stepName,
            Optional<String> description,
            Map<String, Object> additionalProperties) {
        this.message = message;
        this.stepName = stepName;
        this.description = description;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is spoken to the customer before connecting them to the destination.
     * <p>Usage:</p>
     * <ul>
     * <li>If this is not provided and transfer tool messages is not provided, default is &quot;Transferring the call now&quot;.</li>
     * <li>If set to &quot;&quot;, nothing is spoken. This is useful when you want to silently transfer. This is especially useful when transferring between assistants in a squad. In this scenario, you likely also want to set <code>assistant.firstMessageMode=assistant-speaks-first-with-model-generated-message</code> for the destination assistant.</li>
     * </ul>
     * <p>This accepts a string or a ToolMessageStart class. Latter is useful if you want to specify multiple messages for different languages through the <code>contents</code> field.</p>
     */
    @JsonProperty("message")
    public Optional<TransferDestinationStepMessage> getMessage() {
        return message;
    }

    /**
     * @return This is the step to transfer to.
     */
    @JsonProperty("stepName")
    public String getStepName() {
        return stepName;
    }

    /**
     * @return This is the description of the destination, used by the AI to choose when and how to transfer the call.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferDestinationStep && equalTo((TransferDestinationStep) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferDestinationStep other) {
        return message.equals(other.message)
                && stepName.equals(other.stepName)
                && description.equals(other.description);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.message, this.stepName, this.description);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StepNameStage builder() {
        return new Builder();
    }

    public interface StepNameStage {
        _FinalStage stepName(@NotNull String stepName);

        Builder from(TransferDestinationStep other);
    }

    public interface _FinalStage {
        TransferDestinationStep build();

        _FinalStage message(Optional<TransferDestinationStepMessage> message);

        _FinalStage message(TransferDestinationStepMessage message);

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StepNameStage, _FinalStage {
        private String stepName;

        private Optional<String> description = Optional.empty();

        private Optional<TransferDestinationStepMessage> message = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransferDestinationStep other) {
            message(other.getMessage());
            stepName(other.getStepName());
            description(other.getDescription());
            return this;
        }

        /**
         * <p>This is the step to transfer to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("stepName")
        public _FinalStage stepName(@NotNull String stepName) {
            this.stepName = Objects.requireNonNull(stepName, "stepName must not be null");
            return this;
        }

        /**
         * <p>This is the description of the destination, used by the AI to choose when and how to transfer the call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        /**
         * <p>This is spoken to the customer before connecting them to the destination.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>If this is not provided and transfer tool messages is not provided, default is &quot;Transferring the call now&quot;.</li>
         * <li>If set to &quot;&quot;, nothing is spoken. This is useful when you want to silently transfer. This is especially useful when transferring between assistants in a squad. In this scenario, you likely also want to set <code>assistant.firstMessageMode=assistant-speaks-first-with-model-generated-message</code> for the destination assistant.</li>
         * </ul>
         * <p>This accepts a string or a ToolMessageStart class. Latter is useful if you want to specify multiple messages for different languages through the <code>contents</code> field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage message(TransferDestinationStepMessage message) {
            this.message = Optional.ofNullable(message);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public _FinalStage message(Optional<TransferDestinationStepMessage> message) {
            this.message = message;
            return this;
        }

        @java.lang.Override
        public TransferDestinationStep build() {
            return new TransferDestinationStep(message, stepName, description, additionalProperties);
        }
    }
}
