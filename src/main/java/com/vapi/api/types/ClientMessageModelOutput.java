/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientMessageModelOutput.Builder.class)
public final class ClientMessageModelOutput {
    private final Map<String, Object> output;

    private final Map<String, Object> additionalProperties;

    private ClientMessageModelOutput(Map<String, Object> output, Map<String, Object> additionalProperties) {
        this.output = output;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of the message. &quot;model-output&quot; is sent as the model outputs tokens.
     */
    @JsonProperty("type")
    public String getType() {
        return "model-output";
    }

    /**
     * @return This is the output of the model. It can be a token or tool call.
     */
    @JsonProperty("output")
    public Map<String, Object> getOutput() {
        return output;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientMessageModelOutput && equalTo((ClientMessageModelOutput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientMessageModelOutput other) {
        return output.equals(other.output);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.output);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, Object> output = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClientMessageModelOutput other) {
            output(other.getOutput());
            return this;
        }

        @JsonSetter(value = "output", nulls = Nulls.SKIP)
        public Builder output(Map<String, Object> output) {
            this.output.clear();
            this.output.putAll(output);
            return this;
        }

        public Builder putAllOutput(Map<String, Object> output) {
            this.output.putAll(output);
            return this;
        }

        public Builder output(String key, Object value) {
            this.output.put(key, value);
            return this;
        }

        public ClientMessageModelOutput build() {
            return new ClientMessageModelOutput(output, additionalProperties);
        }
    }
}
