/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Subscription.Builder.class)
public final class Subscription {
    private final String id;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final SubscriptionType type;

    private final SubscriptionStatus status;

    private final String credits;

    private final double concurrencyCounter;

    private final double concurrencyLimitIncluded;

    private final Optional<Double> phoneNumbersCounter;

    private final Optional<Double> phoneNumbersIncluded;

    private final double concurrencyLimitPurchased;

    private final Optional<Double> monthlyChargeScheduleId;

    private final Optional<Double> monthlyCreditCheckScheduleId;

    private final Optional<String> stripeCustomerId;

    private final Optional<String> stripePaymentMethodId;

    private final Optional<Boolean> slackSupportEnabled;

    private final Optional<String> slackChannelId;

    private final Optional<Boolean> hipaaEnabled;

    private final Optional<String> hipaaCommonPaperAgreementId;

    private final Optional<String> stripePaymentMethodFingerprint;

    private final Optional<String> stripeCustomerEmail;

    private final Optional<String> referredByEmail;

    private final Optional<AutoReloadPlan> autoReloadPlan;

    private final Optional<Double> minutesIncluded;

    private final Optional<Double> minutesUsed;

    private final Optional<OffsetDateTime> minutesUsedNextResetAt;

    private final Optional<Double> minutesOverageCost;

    private final Optional<List<String>> providersIncluded;

    private final Optional<Double> outboundCallsDailyLimit;

    private final Optional<Double> outboundCallsCounter;

    private final Optional<OffsetDateTime> outboundCallsCounterNextResetAt;

    private final Optional<List<String>> couponIds;

    private final Optional<String> couponUsageLeft;

    private final Map<String, Object> additionalProperties;

    private Subscription(
            String id,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            SubscriptionType type,
            SubscriptionStatus status,
            String credits,
            double concurrencyCounter,
            double concurrencyLimitIncluded,
            Optional<Double> phoneNumbersCounter,
            Optional<Double> phoneNumbersIncluded,
            double concurrencyLimitPurchased,
            Optional<Double> monthlyChargeScheduleId,
            Optional<Double> monthlyCreditCheckScheduleId,
            Optional<String> stripeCustomerId,
            Optional<String> stripePaymentMethodId,
            Optional<Boolean> slackSupportEnabled,
            Optional<String> slackChannelId,
            Optional<Boolean> hipaaEnabled,
            Optional<String> hipaaCommonPaperAgreementId,
            Optional<String> stripePaymentMethodFingerprint,
            Optional<String> stripeCustomerEmail,
            Optional<String> referredByEmail,
            Optional<AutoReloadPlan> autoReloadPlan,
            Optional<Double> minutesIncluded,
            Optional<Double> minutesUsed,
            Optional<OffsetDateTime> minutesUsedNextResetAt,
            Optional<Double> minutesOverageCost,
            Optional<List<String>> providersIncluded,
            Optional<Double> outboundCallsDailyLimit,
            Optional<Double> outboundCallsCounter,
            Optional<OffsetDateTime> outboundCallsCounterNextResetAt,
            Optional<List<String>> couponIds,
            Optional<String> couponUsageLeft,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.type = type;
        this.status = status;
        this.credits = credits;
        this.concurrencyCounter = concurrencyCounter;
        this.concurrencyLimitIncluded = concurrencyLimitIncluded;
        this.phoneNumbersCounter = phoneNumbersCounter;
        this.phoneNumbersIncluded = phoneNumbersIncluded;
        this.concurrencyLimitPurchased = concurrencyLimitPurchased;
        this.monthlyChargeScheduleId = monthlyChargeScheduleId;
        this.monthlyCreditCheckScheduleId = monthlyCreditCheckScheduleId;
        this.stripeCustomerId = stripeCustomerId;
        this.stripePaymentMethodId = stripePaymentMethodId;
        this.slackSupportEnabled = slackSupportEnabled;
        this.slackChannelId = slackChannelId;
        this.hipaaEnabled = hipaaEnabled;
        this.hipaaCommonPaperAgreementId = hipaaCommonPaperAgreementId;
        this.stripePaymentMethodFingerprint = stripePaymentMethodFingerprint;
        this.stripeCustomerEmail = stripeCustomerEmail;
        this.referredByEmail = referredByEmail;
        this.autoReloadPlan = autoReloadPlan;
        this.minutesIncluded = minutesIncluded;
        this.minutesUsed = minutesUsed;
        this.minutesUsedNextResetAt = minutesUsedNextResetAt;
        this.minutesOverageCost = minutesOverageCost;
        this.providersIncluded = providersIncluded;
        this.outboundCallsDailyLimit = outboundCallsDailyLimit;
        this.outboundCallsCounter = outboundCallsCounter;
        this.outboundCallsCounterNextResetAt = outboundCallsCounterNextResetAt;
        this.couponIds = couponIds;
        this.couponUsageLeft = couponUsageLeft;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the unique identifier for the subscription.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the timestamp when the subscription was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the timestamp when the subscription was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is the type / tier of the subscription.
     */
    @JsonProperty("type")
    public SubscriptionType getType() {
        return type;
    }

    /**
     * @return This is the status of the subscription. Past due subscriptions are subscriptions
     * with past due payments.
     */
    @JsonProperty("status")
    public SubscriptionStatus getStatus() {
        return status;
    }

    /**
     * @return This is the number of credits the subscription currently has.
     * <p>Note: This is a string to avoid floating point precision issues.</p>
     */
    @JsonProperty("credits")
    public String getCredits() {
        return credits;
    }

    /**
     * @return This is the total number of active calls (concurrency) across all orgs under this subscription.
     */
    @JsonProperty("concurrencyCounter")
    public double getConcurrencyCounter() {
        return concurrencyCounter;
    }

    /**
     * @return This is the default concurrency limit for the subscription.
     */
    @JsonProperty("concurrencyLimitIncluded")
    public double getConcurrencyLimitIncluded() {
        return concurrencyLimitIncluded;
    }

    /**
     * @return This is the number of free phone numbers the subscription has
     */
    @JsonProperty("phoneNumbersCounter")
    public Optional<Double> getPhoneNumbersCounter() {
        return phoneNumbersCounter;
    }

    /**
     * @return This is the maximum number of free phone numbers the subscription can have
     */
    @JsonProperty("phoneNumbersIncluded")
    public Optional<Double> getPhoneNumbersIncluded() {
        return phoneNumbersIncluded;
    }

    /**
     * @return This is the purchased add-on concurrency limit for the subscription.
     */
    @JsonProperty("concurrencyLimitPurchased")
    public double getConcurrencyLimitPurchased() {
        return concurrencyLimitPurchased;
    }

    /**
     * @return This is the ID of the monthly job that charges for subscription add ons and phone numbers.
     */
    @JsonProperty("monthlyChargeScheduleId")
    public Optional<Double> getMonthlyChargeScheduleId() {
        return monthlyChargeScheduleId;
    }

    /**
     * @return This is the ID of the monthly job that checks whether the credit balance of the subscription
     * is sufficient for the monthly charge.
     */
    @JsonProperty("monthlyCreditCheckScheduleId")
    public Optional<Double> getMonthlyCreditCheckScheduleId() {
        return monthlyCreditCheckScheduleId;
    }

    /**
     * @return This is the Stripe customer ID.
     */
    @JsonProperty("stripeCustomerId")
    public Optional<String> getStripeCustomerId() {
        return stripeCustomerId;
    }

    /**
     * @return This is the Stripe payment ID.
     */
    @JsonProperty("stripePaymentMethodId")
    public Optional<String> getStripePaymentMethodId() {
        return stripePaymentMethodId;
    }

    /**
     * @return If this flag is true, then the user has purchased slack support.
     */
    @JsonProperty("slackSupportEnabled")
    public Optional<Boolean> getSlackSupportEnabled() {
        return slackSupportEnabled;
    }

    /**
     * @return If this subscription has a slack support subscription, the slack channel's ID will be stored here.
     */
    @JsonProperty("slackChannelId")
    public Optional<String> getSlackChannelId() {
        return slackChannelId;
    }

    /**
     * @return This is the HIPAA enabled flag for the subscription. It determines whether orgs under this
     * subscription have the option to enable HIPAA compliance.
     */
    @JsonProperty("hipaaEnabled")
    public Optional<Boolean> getHipaaEnabled() {
        return hipaaEnabled;
    }

    /**
     * @return This is the ID for the Common Paper agreement outlining the HIPAA contract.
     */
    @JsonProperty("hipaaCommonPaperAgreementId")
    public Optional<String> getHipaaCommonPaperAgreementId() {
        return hipaaCommonPaperAgreementId;
    }

    /**
     * @return This is the Stripe fingerprint of the payment method (card). It allows us
     * to detect users who try to abuse our system through multiple sign-ups.
     */
    @JsonProperty("stripePaymentMethodFingerprint")
    public Optional<String> getStripePaymentMethodFingerprint() {
        return stripePaymentMethodFingerprint;
    }

    /**
     * @return This is the customer's email on Stripe.
     */
    @JsonProperty("stripeCustomerEmail")
    public Optional<String> getStripeCustomerEmail() {
        return stripeCustomerEmail;
    }

    /**
     * @return This is the email of the referrer for the subscription.
     */
    @JsonProperty("referredByEmail")
    public Optional<String> getReferredByEmail() {
        return referredByEmail;
    }

    /**
     * @return This is the auto reload plan configured for the subscription.
     */
    @JsonProperty("autoReloadPlan")
    public Optional<AutoReloadPlan> getAutoReloadPlan() {
        return autoReloadPlan;
    }

    /**
     * @return The number of minutes included in the subscription.
     */
    @JsonProperty("minutesIncluded")
    public Optional<Double> getMinutesIncluded() {
        return minutesIncluded;
    }

    /**
     * @return The number of minutes used in the subscription.
     */
    @JsonProperty("minutesUsed")
    public Optional<Double> getMinutesUsed() {
        return minutesUsed;
    }

    /**
     * @return This is the timestamp at which the number of monthly free minutes is scheduled to reset at.
     */
    @JsonProperty("minutesUsedNextResetAt")
    public Optional<OffsetDateTime> getMinutesUsedNextResetAt() {
        return minutesUsedNextResetAt;
    }

    /**
     * @return The per minute charge on minutes that exceed the included minutes. Enterprise only.
     */
    @JsonProperty("minutesOverageCost")
    public Optional<Double> getMinutesOverageCost() {
        return minutesOverageCost;
    }

    /**
     * @return The list of providers included in the subscription. Enterprise only.
     */
    @JsonProperty("providersIncluded")
    public Optional<List<String>> getProvidersIncluded() {
        return providersIncluded;
    }

    /**
     * @return The maximum number of outbound calls this subscription may make in a day. Resets every night.
     */
    @JsonProperty("outboundCallsDailyLimit")
    public Optional<Double> getOutboundCallsDailyLimit() {
        return outboundCallsDailyLimit;
    }

    /**
     * @return The current number of outbound calls the subscription has made in the current day.
     */
    @JsonProperty("outboundCallsCounter")
    public Optional<Double> getOutboundCallsCounter() {
        return outboundCallsCounter;
    }

    /**
     * @return This is the timestamp at which the outbound calls counter is scheduled to reset at.
     */
    @JsonProperty("outboundCallsCounterNextResetAt")
    public Optional<OffsetDateTime> getOutboundCallsCounterNextResetAt() {
        return outboundCallsCounterNextResetAt;
    }

    /**
     * @return This is the IDs of the coupons applicable to this subscription.
     */
    @JsonProperty("couponIds")
    public Optional<List<String>> getCouponIds() {
        return couponIds;
    }

    /**
     * @return This is the number of credits left obtained from a coupon.
     */
    @JsonProperty("couponUsageLeft")
    public Optional<String> getCouponUsageLeft() {
        return couponUsageLeft;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Subscription && equalTo((Subscription) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Subscription other) {
        return id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && type.equals(other.type)
                && status.equals(other.status)
                && credits.equals(other.credits)
                && concurrencyCounter == other.concurrencyCounter
                && concurrencyLimitIncluded == other.concurrencyLimitIncluded
                && phoneNumbersCounter.equals(other.phoneNumbersCounter)
                && phoneNumbersIncluded.equals(other.phoneNumbersIncluded)
                && concurrencyLimitPurchased == other.concurrencyLimitPurchased
                && monthlyChargeScheduleId.equals(other.monthlyChargeScheduleId)
                && monthlyCreditCheckScheduleId.equals(other.monthlyCreditCheckScheduleId)
                && stripeCustomerId.equals(other.stripeCustomerId)
                && stripePaymentMethodId.equals(other.stripePaymentMethodId)
                && slackSupportEnabled.equals(other.slackSupportEnabled)
                && slackChannelId.equals(other.slackChannelId)
                && hipaaEnabled.equals(other.hipaaEnabled)
                && hipaaCommonPaperAgreementId.equals(other.hipaaCommonPaperAgreementId)
                && stripePaymentMethodFingerprint.equals(other.stripePaymentMethodFingerprint)
                && stripeCustomerEmail.equals(other.stripeCustomerEmail)
                && referredByEmail.equals(other.referredByEmail)
                && autoReloadPlan.equals(other.autoReloadPlan)
                && minutesIncluded.equals(other.minutesIncluded)
                && minutesUsed.equals(other.minutesUsed)
                && minutesUsedNextResetAt.equals(other.minutesUsedNextResetAt)
                && minutesOverageCost.equals(other.minutesOverageCost)
                && providersIncluded.equals(other.providersIncluded)
                && outboundCallsDailyLimit.equals(other.outboundCallsDailyLimit)
                && outboundCallsCounter.equals(other.outboundCallsCounter)
                && outboundCallsCounterNextResetAt.equals(other.outboundCallsCounterNextResetAt)
                && couponIds.equals(other.couponIds)
                && couponUsageLeft.equals(other.couponUsageLeft);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.createdAt,
                this.updatedAt,
                this.type,
                this.status,
                this.credits,
                this.concurrencyCounter,
                this.concurrencyLimitIncluded,
                this.phoneNumbersCounter,
                this.phoneNumbersIncluded,
                this.concurrencyLimitPurchased,
                this.monthlyChargeScheduleId,
                this.monthlyCreditCheckScheduleId,
                this.stripeCustomerId,
                this.stripePaymentMethodId,
                this.slackSupportEnabled,
                this.slackChannelId,
                this.hipaaEnabled,
                this.hipaaCommonPaperAgreementId,
                this.stripePaymentMethodFingerprint,
                this.stripeCustomerEmail,
                this.referredByEmail,
                this.autoReloadPlan,
                this.minutesIncluded,
                this.minutesUsed,
                this.minutesUsedNextResetAt,
                this.minutesOverageCost,
                this.providersIncluded,
                this.outboundCallsDailyLimit,
                this.outboundCallsCounter,
                this.outboundCallsCounterNextResetAt,
                this.couponIds,
                this.couponUsageLeft);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        CreatedAtStage id(@NotNull String id);

        Builder from(Subscription other);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        TypeStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface TypeStage {
        StatusStage type(@NotNull SubscriptionType type);
    }

    public interface StatusStage {
        CreditsStage status(@NotNull SubscriptionStatus status);
    }

    public interface CreditsStage {
        ConcurrencyCounterStage credits(@NotNull String credits);
    }

    public interface ConcurrencyCounterStage {
        ConcurrencyLimitIncludedStage concurrencyCounter(double concurrencyCounter);
    }

    public interface ConcurrencyLimitIncludedStage {
        ConcurrencyLimitPurchasedStage concurrencyLimitIncluded(double concurrencyLimitIncluded);
    }

    public interface ConcurrencyLimitPurchasedStage {
        _FinalStage concurrencyLimitPurchased(double concurrencyLimitPurchased);
    }

    public interface _FinalStage {
        Subscription build();

        _FinalStage phoneNumbersCounter(Optional<Double> phoneNumbersCounter);

        _FinalStage phoneNumbersCounter(Double phoneNumbersCounter);

        _FinalStage phoneNumbersIncluded(Optional<Double> phoneNumbersIncluded);

        _FinalStage phoneNumbersIncluded(Double phoneNumbersIncluded);

        _FinalStage monthlyChargeScheduleId(Optional<Double> monthlyChargeScheduleId);

        _FinalStage monthlyChargeScheduleId(Double monthlyChargeScheduleId);

        _FinalStage monthlyCreditCheckScheduleId(Optional<Double> monthlyCreditCheckScheduleId);

        _FinalStage monthlyCreditCheckScheduleId(Double monthlyCreditCheckScheduleId);

        _FinalStage stripeCustomerId(Optional<String> stripeCustomerId);

        _FinalStage stripeCustomerId(String stripeCustomerId);

        _FinalStage stripePaymentMethodId(Optional<String> stripePaymentMethodId);

        _FinalStage stripePaymentMethodId(String stripePaymentMethodId);

        _FinalStage slackSupportEnabled(Optional<Boolean> slackSupportEnabled);

        _FinalStage slackSupportEnabled(Boolean slackSupportEnabled);

        _FinalStage slackChannelId(Optional<String> slackChannelId);

        _FinalStage slackChannelId(String slackChannelId);

        _FinalStage hipaaEnabled(Optional<Boolean> hipaaEnabled);

        _FinalStage hipaaEnabled(Boolean hipaaEnabled);

        _FinalStage hipaaCommonPaperAgreementId(Optional<String> hipaaCommonPaperAgreementId);

        _FinalStage hipaaCommonPaperAgreementId(String hipaaCommonPaperAgreementId);

        _FinalStage stripePaymentMethodFingerprint(Optional<String> stripePaymentMethodFingerprint);

        _FinalStage stripePaymentMethodFingerprint(String stripePaymentMethodFingerprint);

        _FinalStage stripeCustomerEmail(Optional<String> stripeCustomerEmail);

        _FinalStage stripeCustomerEmail(String stripeCustomerEmail);

        _FinalStage referredByEmail(Optional<String> referredByEmail);

        _FinalStage referredByEmail(String referredByEmail);

        _FinalStage autoReloadPlan(Optional<AutoReloadPlan> autoReloadPlan);

        _FinalStage autoReloadPlan(AutoReloadPlan autoReloadPlan);

        _FinalStage minutesIncluded(Optional<Double> minutesIncluded);

        _FinalStage minutesIncluded(Double minutesIncluded);

        _FinalStage minutesUsed(Optional<Double> minutesUsed);

        _FinalStage minutesUsed(Double minutesUsed);

        _FinalStage minutesUsedNextResetAt(Optional<OffsetDateTime> minutesUsedNextResetAt);

        _FinalStage minutesUsedNextResetAt(OffsetDateTime minutesUsedNextResetAt);

        _FinalStage minutesOverageCost(Optional<Double> minutesOverageCost);

        _FinalStage minutesOverageCost(Double minutesOverageCost);

        _FinalStage providersIncluded(Optional<List<String>> providersIncluded);

        _FinalStage providersIncluded(List<String> providersIncluded);

        _FinalStage outboundCallsDailyLimit(Optional<Double> outboundCallsDailyLimit);

        _FinalStage outboundCallsDailyLimit(Double outboundCallsDailyLimit);

        _FinalStage outboundCallsCounter(Optional<Double> outboundCallsCounter);

        _FinalStage outboundCallsCounter(Double outboundCallsCounter);

        _FinalStage outboundCallsCounterNextResetAt(Optional<OffsetDateTime> outboundCallsCounterNextResetAt);

        _FinalStage outboundCallsCounterNextResetAt(OffsetDateTime outboundCallsCounterNextResetAt);

        _FinalStage couponIds(Optional<List<String>> couponIds);

        _FinalStage couponIds(List<String> couponIds);

        _FinalStage couponUsageLeft(Optional<String> couponUsageLeft);

        _FinalStage couponUsageLeft(String couponUsageLeft);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    TypeStage,
                    StatusStage,
                    CreditsStage,
                    ConcurrencyCounterStage,
                    ConcurrencyLimitIncludedStage,
                    ConcurrencyLimitPurchasedStage,
                    _FinalStage {
        private String id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private SubscriptionType type;

        private SubscriptionStatus status;

        private String credits;

        private double concurrencyCounter;

        private double concurrencyLimitIncluded;

        private double concurrencyLimitPurchased;

        private Optional<String> couponUsageLeft = Optional.empty();

        private Optional<List<String>> couponIds = Optional.empty();

        private Optional<OffsetDateTime> outboundCallsCounterNextResetAt = Optional.empty();

        private Optional<Double> outboundCallsCounter = Optional.empty();

        private Optional<Double> outboundCallsDailyLimit = Optional.empty();

        private Optional<List<String>> providersIncluded = Optional.empty();

        private Optional<Double> minutesOverageCost = Optional.empty();

        private Optional<OffsetDateTime> minutesUsedNextResetAt = Optional.empty();

        private Optional<Double> minutesUsed = Optional.empty();

        private Optional<Double> minutesIncluded = Optional.empty();

        private Optional<AutoReloadPlan> autoReloadPlan = Optional.empty();

        private Optional<String> referredByEmail = Optional.empty();

        private Optional<String> stripeCustomerEmail = Optional.empty();

        private Optional<String> stripePaymentMethodFingerprint = Optional.empty();

        private Optional<String> hipaaCommonPaperAgreementId = Optional.empty();

        private Optional<Boolean> hipaaEnabled = Optional.empty();

        private Optional<String> slackChannelId = Optional.empty();

        private Optional<Boolean> slackSupportEnabled = Optional.empty();

        private Optional<String> stripePaymentMethodId = Optional.empty();

        private Optional<String> stripeCustomerId = Optional.empty();

        private Optional<Double> monthlyCreditCheckScheduleId = Optional.empty();

        private Optional<Double> monthlyChargeScheduleId = Optional.empty();

        private Optional<Double> phoneNumbersIncluded = Optional.empty();

        private Optional<Double> phoneNumbersCounter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Subscription other) {
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            type(other.getType());
            status(other.getStatus());
            credits(other.getCredits());
            concurrencyCounter(other.getConcurrencyCounter());
            concurrencyLimitIncluded(other.getConcurrencyLimitIncluded());
            phoneNumbersCounter(other.getPhoneNumbersCounter());
            phoneNumbersIncluded(other.getPhoneNumbersIncluded());
            concurrencyLimitPurchased(other.getConcurrencyLimitPurchased());
            monthlyChargeScheduleId(other.getMonthlyChargeScheduleId());
            monthlyCreditCheckScheduleId(other.getMonthlyCreditCheckScheduleId());
            stripeCustomerId(other.getStripeCustomerId());
            stripePaymentMethodId(other.getStripePaymentMethodId());
            slackSupportEnabled(other.getSlackSupportEnabled());
            slackChannelId(other.getSlackChannelId());
            hipaaEnabled(other.getHipaaEnabled());
            hipaaCommonPaperAgreementId(other.getHipaaCommonPaperAgreementId());
            stripePaymentMethodFingerprint(other.getStripePaymentMethodFingerprint());
            stripeCustomerEmail(other.getStripeCustomerEmail());
            referredByEmail(other.getReferredByEmail());
            autoReloadPlan(other.getAutoReloadPlan());
            minutesIncluded(other.getMinutesIncluded());
            minutesUsed(other.getMinutesUsed());
            minutesUsedNextResetAt(other.getMinutesUsedNextResetAt());
            minutesOverageCost(other.getMinutesOverageCost());
            providersIncluded(other.getProvidersIncluded());
            outboundCallsDailyLimit(other.getOutboundCallsDailyLimit());
            outboundCallsCounter(other.getOutboundCallsCounter());
            outboundCallsCounterNextResetAt(other.getOutboundCallsCounterNextResetAt());
            couponIds(other.getCouponIds());
            couponUsageLeft(other.getCouponUsageLeft());
            return this;
        }

        /**
         * <p>This is the unique identifier for the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public CreatedAtStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the timestamp when the subscription was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the timestamp when the subscription was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public TypeStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the type / tier of the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public StatusStage type(@NotNull SubscriptionType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>This is the status of the subscription. Past due subscriptions are subscriptions
         * with past due payments.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public CreditsStage status(@NotNull SubscriptionStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>This is the number of credits the subscription currently has.</p>
         * <p>Note: This is a string to avoid floating point precision issues.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("credits")
        public ConcurrencyCounterStage credits(@NotNull String credits) {
            this.credits = Objects.requireNonNull(credits, "credits must not be null");
            return this;
        }

        /**
         * <p>This is the total number of active calls (concurrency) across all orgs under this subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("concurrencyCounter")
        public ConcurrencyLimitIncludedStage concurrencyCounter(double concurrencyCounter) {
            this.concurrencyCounter = concurrencyCounter;
            return this;
        }

        /**
         * <p>This is the default concurrency limit for the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("concurrencyLimitIncluded")
        public ConcurrencyLimitPurchasedStage concurrencyLimitIncluded(double concurrencyLimitIncluded) {
            this.concurrencyLimitIncluded = concurrencyLimitIncluded;
            return this;
        }

        /**
         * <p>This is the purchased add-on concurrency limit for the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("concurrencyLimitPurchased")
        public _FinalStage concurrencyLimitPurchased(double concurrencyLimitPurchased) {
            this.concurrencyLimitPurchased = concurrencyLimitPurchased;
            return this;
        }

        /**
         * <p>This is the number of credits left obtained from a coupon.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage couponUsageLeft(String couponUsageLeft) {
            this.couponUsageLeft = Optional.ofNullable(couponUsageLeft);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "couponUsageLeft", nulls = Nulls.SKIP)
        public _FinalStage couponUsageLeft(Optional<String> couponUsageLeft) {
            this.couponUsageLeft = couponUsageLeft;
            return this;
        }

        /**
         * <p>This is the IDs of the coupons applicable to this subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage couponIds(List<String> couponIds) {
            this.couponIds = Optional.ofNullable(couponIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "couponIds", nulls = Nulls.SKIP)
        public _FinalStage couponIds(Optional<List<String>> couponIds) {
            this.couponIds = couponIds;
            return this;
        }

        /**
         * <p>This is the timestamp at which the outbound calls counter is scheduled to reset at.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage outboundCallsCounterNextResetAt(OffsetDateTime outboundCallsCounterNextResetAt) {
            this.outboundCallsCounterNextResetAt = Optional.ofNullable(outboundCallsCounterNextResetAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "outboundCallsCounterNextResetAt", nulls = Nulls.SKIP)
        public _FinalStage outboundCallsCounterNextResetAt(Optional<OffsetDateTime> outboundCallsCounterNextResetAt) {
            this.outboundCallsCounterNextResetAt = outboundCallsCounterNextResetAt;
            return this;
        }

        /**
         * <p>The current number of outbound calls the subscription has made in the current day.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage outboundCallsCounter(Double outboundCallsCounter) {
            this.outboundCallsCounter = Optional.ofNullable(outboundCallsCounter);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "outboundCallsCounter", nulls = Nulls.SKIP)
        public _FinalStage outboundCallsCounter(Optional<Double> outboundCallsCounter) {
            this.outboundCallsCounter = outboundCallsCounter;
            return this;
        }

        /**
         * <p>The maximum number of outbound calls this subscription may make in a day. Resets every night.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage outboundCallsDailyLimit(Double outboundCallsDailyLimit) {
            this.outboundCallsDailyLimit = Optional.ofNullable(outboundCallsDailyLimit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "outboundCallsDailyLimit", nulls = Nulls.SKIP)
        public _FinalStage outboundCallsDailyLimit(Optional<Double> outboundCallsDailyLimit) {
            this.outboundCallsDailyLimit = outboundCallsDailyLimit;
            return this;
        }

        /**
         * <p>The list of providers included in the subscription. Enterprise only.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage providersIncluded(List<String> providersIncluded) {
            this.providersIncluded = Optional.ofNullable(providersIncluded);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "providersIncluded", nulls = Nulls.SKIP)
        public _FinalStage providersIncluded(Optional<List<String>> providersIncluded) {
            this.providersIncluded = providersIncluded;
            return this;
        }

        /**
         * <p>The per minute charge on minutes that exceed the included minutes. Enterprise only.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage minutesOverageCost(Double minutesOverageCost) {
            this.minutesOverageCost = Optional.ofNullable(minutesOverageCost);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "minutesOverageCost", nulls = Nulls.SKIP)
        public _FinalStage minutesOverageCost(Optional<Double> minutesOverageCost) {
            this.minutesOverageCost = minutesOverageCost;
            return this;
        }

        /**
         * <p>This is the timestamp at which the number of monthly free minutes is scheduled to reset at.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage minutesUsedNextResetAt(OffsetDateTime minutesUsedNextResetAt) {
            this.minutesUsedNextResetAt = Optional.ofNullable(minutesUsedNextResetAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "minutesUsedNextResetAt", nulls = Nulls.SKIP)
        public _FinalStage minutesUsedNextResetAt(Optional<OffsetDateTime> minutesUsedNextResetAt) {
            this.minutesUsedNextResetAt = minutesUsedNextResetAt;
            return this;
        }

        /**
         * <p>The number of minutes used in the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage minutesUsed(Double minutesUsed) {
            this.minutesUsed = Optional.ofNullable(minutesUsed);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "minutesUsed", nulls = Nulls.SKIP)
        public _FinalStage minutesUsed(Optional<Double> minutesUsed) {
            this.minutesUsed = minutesUsed;
            return this;
        }

        /**
         * <p>The number of minutes included in the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage minutesIncluded(Double minutesIncluded) {
            this.minutesIncluded = Optional.ofNullable(minutesIncluded);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "minutesIncluded", nulls = Nulls.SKIP)
        public _FinalStage minutesIncluded(Optional<Double> minutesIncluded) {
            this.minutesIncluded = minutesIncluded;
            return this;
        }

        /**
         * <p>This is the auto reload plan configured for the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage autoReloadPlan(AutoReloadPlan autoReloadPlan) {
            this.autoReloadPlan = Optional.ofNullable(autoReloadPlan);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "autoReloadPlan", nulls = Nulls.SKIP)
        public _FinalStage autoReloadPlan(Optional<AutoReloadPlan> autoReloadPlan) {
            this.autoReloadPlan = autoReloadPlan;
            return this;
        }

        /**
         * <p>This is the email of the referrer for the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referredByEmail(String referredByEmail) {
            this.referredByEmail = Optional.ofNullable(referredByEmail);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "referredByEmail", nulls = Nulls.SKIP)
        public _FinalStage referredByEmail(Optional<String> referredByEmail) {
            this.referredByEmail = referredByEmail;
            return this;
        }

        /**
         * <p>This is the customer's email on Stripe.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeCustomerEmail(String stripeCustomerEmail) {
            this.stripeCustomerEmail = Optional.ofNullable(stripeCustomerEmail);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeCustomerEmail", nulls = Nulls.SKIP)
        public _FinalStage stripeCustomerEmail(Optional<String> stripeCustomerEmail) {
            this.stripeCustomerEmail = stripeCustomerEmail;
            return this;
        }

        /**
         * <p>This is the Stripe fingerprint of the payment method (card). It allows us
         * to detect users who try to abuse our system through multiple sign-ups.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripePaymentMethodFingerprint(String stripePaymentMethodFingerprint) {
            this.stripePaymentMethodFingerprint = Optional.ofNullable(stripePaymentMethodFingerprint);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripePaymentMethodFingerprint", nulls = Nulls.SKIP)
        public _FinalStage stripePaymentMethodFingerprint(Optional<String> stripePaymentMethodFingerprint) {
            this.stripePaymentMethodFingerprint = stripePaymentMethodFingerprint;
            return this;
        }

        /**
         * <p>This is the ID for the Common Paper agreement outlining the HIPAA contract.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hipaaCommonPaperAgreementId(String hipaaCommonPaperAgreementId) {
            this.hipaaCommonPaperAgreementId = Optional.ofNullable(hipaaCommonPaperAgreementId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hipaaCommonPaperAgreementId", nulls = Nulls.SKIP)
        public _FinalStage hipaaCommonPaperAgreementId(Optional<String> hipaaCommonPaperAgreementId) {
            this.hipaaCommonPaperAgreementId = hipaaCommonPaperAgreementId;
            return this;
        }

        /**
         * <p>This is the HIPAA enabled flag for the subscription. It determines whether orgs under this
         * subscription have the option to enable HIPAA compliance.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hipaaEnabled(Boolean hipaaEnabled) {
            this.hipaaEnabled = Optional.ofNullable(hipaaEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hipaaEnabled", nulls = Nulls.SKIP)
        public _FinalStage hipaaEnabled(Optional<Boolean> hipaaEnabled) {
            this.hipaaEnabled = hipaaEnabled;
            return this;
        }

        /**
         * <p>If this subscription has a slack support subscription, the slack channel's ID will be stored here.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage slackChannelId(String slackChannelId) {
            this.slackChannelId = Optional.ofNullable(slackChannelId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "slackChannelId", nulls = Nulls.SKIP)
        public _FinalStage slackChannelId(Optional<String> slackChannelId) {
            this.slackChannelId = slackChannelId;
            return this;
        }

        /**
         * <p>If this flag is true, then the user has purchased slack support.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage slackSupportEnabled(Boolean slackSupportEnabled) {
            this.slackSupportEnabled = Optional.ofNullable(slackSupportEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "slackSupportEnabled", nulls = Nulls.SKIP)
        public _FinalStage slackSupportEnabled(Optional<Boolean> slackSupportEnabled) {
            this.slackSupportEnabled = slackSupportEnabled;
            return this;
        }

        /**
         * <p>This is the Stripe payment ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripePaymentMethodId(String stripePaymentMethodId) {
            this.stripePaymentMethodId = Optional.ofNullable(stripePaymentMethodId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripePaymentMethodId", nulls = Nulls.SKIP)
        public _FinalStage stripePaymentMethodId(Optional<String> stripePaymentMethodId) {
            this.stripePaymentMethodId = stripePaymentMethodId;
            return this;
        }

        /**
         * <p>This is the Stripe customer ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeCustomerId(String stripeCustomerId) {
            this.stripeCustomerId = Optional.ofNullable(stripeCustomerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeCustomerId", nulls = Nulls.SKIP)
        public _FinalStage stripeCustomerId(Optional<String> stripeCustomerId) {
            this.stripeCustomerId = stripeCustomerId;
            return this;
        }

        /**
         * <p>This is the ID of the monthly job that checks whether the credit balance of the subscription
         * is sufficient for the monthly charge.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage monthlyCreditCheckScheduleId(Double monthlyCreditCheckScheduleId) {
            this.monthlyCreditCheckScheduleId = Optional.ofNullable(monthlyCreditCheckScheduleId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "monthlyCreditCheckScheduleId", nulls = Nulls.SKIP)
        public _FinalStage monthlyCreditCheckScheduleId(Optional<Double> monthlyCreditCheckScheduleId) {
            this.monthlyCreditCheckScheduleId = monthlyCreditCheckScheduleId;
            return this;
        }

        /**
         * <p>This is the ID of the monthly job that charges for subscription add ons and phone numbers.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage monthlyChargeScheduleId(Double monthlyChargeScheduleId) {
            this.monthlyChargeScheduleId = Optional.ofNullable(monthlyChargeScheduleId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "monthlyChargeScheduleId", nulls = Nulls.SKIP)
        public _FinalStage monthlyChargeScheduleId(Optional<Double> monthlyChargeScheduleId) {
            this.monthlyChargeScheduleId = monthlyChargeScheduleId;
            return this;
        }

        /**
         * <p>This is the maximum number of free phone numbers the subscription can have</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumbersIncluded(Double phoneNumbersIncluded) {
            this.phoneNumbersIncluded = Optional.ofNullable(phoneNumbersIncluded);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phoneNumbersIncluded", nulls = Nulls.SKIP)
        public _FinalStage phoneNumbersIncluded(Optional<Double> phoneNumbersIncluded) {
            this.phoneNumbersIncluded = phoneNumbersIncluded;
            return this;
        }

        /**
         * <p>This is the number of free phone numbers the subscription has</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumbersCounter(Double phoneNumbersCounter) {
            this.phoneNumbersCounter = Optional.ofNullable(phoneNumbersCounter);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phoneNumbersCounter", nulls = Nulls.SKIP)
        public _FinalStage phoneNumbersCounter(Optional<Double> phoneNumbersCounter) {
            this.phoneNumbersCounter = phoneNumbersCounter;
            return this;
        }

        @java.lang.Override
        public Subscription build() {
            return new Subscription(
                    id,
                    createdAt,
                    updatedAt,
                    type,
                    status,
                    credits,
                    concurrencyCounter,
                    concurrencyLimitIncluded,
                    phoneNumbersCounter,
                    phoneNumbersIncluded,
                    concurrencyLimitPurchased,
                    monthlyChargeScheduleId,
                    monthlyCreditCheckScheduleId,
                    stripeCustomerId,
                    stripePaymentMethodId,
                    slackSupportEnabled,
                    slackChannelId,
                    hipaaEnabled,
                    hipaaCommonPaperAgreementId,
                    stripePaymentMethodFingerprint,
                    stripeCustomerEmail,
                    referredByEmail,
                    autoReloadPlan,
                    minutesIncluded,
                    minutesUsed,
                    minutesUsedNextResetAt,
                    minutesOverageCost,
                    providersIncluded,
                    outboundCallsDailyLimit,
                    outboundCallsCounter,
                    outboundCallsCounterNextResetAt,
                    couponIds,
                    couponUsageLeft,
                    additionalProperties);
        }
    }
}
