/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Assistant.Builder.class)
public final class Assistant {
    private final Optional<AssistantTranscriber> transcriber;

    private final Optional<AssistantModel> model;

    private final Optional<AssistantVoice> voice;

    private final Optional<AssistantFirstMessageMode> firstMessageMode;

    private final Optional<Boolean> hipaaEnabled;

    private final Optional<List<AssistantClientMessagesItem>> clientMessages;

    private final Optional<List<AssistantServerMessagesItem>> serverMessages;

    private final Optional<Double> silenceTimeoutSeconds;

    private final Optional<Double> maxDurationSeconds;

    private final Optional<AssistantBackgroundSound> backgroundSound;

    private final Optional<Boolean> backchannelingEnabled;

    private final Optional<Boolean> backgroundDenoisingEnabled;

    private final Optional<Boolean> modelOutputInMessagesEnabled;

    private final Optional<List<TransportConfigurationTwilio>> transportConfigurations;

    private final Optional<String> name;

    private final Optional<String> firstMessage;

    private final Optional<TwilioVoicemailDetection> voicemailDetection;

    private final Optional<String> voicemailMessage;

    private final Optional<String> endCallMessage;

    private final Optional<List<String>> endCallPhrases;

    private final Optional<Map<String, Object>> metadata;

    private final Optional<String> serverUrl;

    private final Optional<String> serverUrlSecret;

    private final Optional<AnalysisPlan> analysisPlan;

    private final Optional<ArtifactPlan> artifactPlan;

    private final Optional<MessagePlan> messagePlan;

    private final Optional<StartSpeakingPlan> startSpeakingPlan;

    private final Optional<StopSpeakingPlan> stopSpeakingPlan;

    private final Optional<MonitorPlan> monitorPlan;

    private final Optional<List<String>> credentialIds;

    private final String id;

    private final String orgId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private Assistant(
            Optional<AssistantTranscriber> transcriber,
            Optional<AssistantModel> model,
            Optional<AssistantVoice> voice,
            Optional<AssistantFirstMessageMode> firstMessageMode,
            Optional<Boolean> hipaaEnabled,
            Optional<List<AssistantClientMessagesItem>> clientMessages,
            Optional<List<AssistantServerMessagesItem>> serverMessages,
            Optional<Double> silenceTimeoutSeconds,
            Optional<Double> maxDurationSeconds,
            Optional<AssistantBackgroundSound> backgroundSound,
            Optional<Boolean> backchannelingEnabled,
            Optional<Boolean> backgroundDenoisingEnabled,
            Optional<Boolean> modelOutputInMessagesEnabled,
            Optional<List<TransportConfigurationTwilio>> transportConfigurations,
            Optional<String> name,
            Optional<String> firstMessage,
            Optional<TwilioVoicemailDetection> voicemailDetection,
            Optional<String> voicemailMessage,
            Optional<String> endCallMessage,
            Optional<List<String>> endCallPhrases,
            Optional<Map<String, Object>> metadata,
            Optional<String> serverUrl,
            Optional<String> serverUrlSecret,
            Optional<AnalysisPlan> analysisPlan,
            Optional<ArtifactPlan> artifactPlan,
            Optional<MessagePlan> messagePlan,
            Optional<StartSpeakingPlan> startSpeakingPlan,
            Optional<StopSpeakingPlan> stopSpeakingPlan,
            Optional<MonitorPlan> monitorPlan,
            Optional<List<String>> credentialIds,
            String id,
            String orgId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.transcriber = transcriber;
        this.model = model;
        this.voice = voice;
        this.firstMessageMode = firstMessageMode;
        this.hipaaEnabled = hipaaEnabled;
        this.clientMessages = clientMessages;
        this.serverMessages = serverMessages;
        this.silenceTimeoutSeconds = silenceTimeoutSeconds;
        this.maxDurationSeconds = maxDurationSeconds;
        this.backgroundSound = backgroundSound;
        this.backchannelingEnabled = backchannelingEnabled;
        this.backgroundDenoisingEnabled = backgroundDenoisingEnabled;
        this.modelOutputInMessagesEnabled = modelOutputInMessagesEnabled;
        this.transportConfigurations = transportConfigurations;
        this.name = name;
        this.firstMessage = firstMessage;
        this.voicemailDetection = voicemailDetection;
        this.voicemailMessage = voicemailMessage;
        this.endCallMessage = endCallMessage;
        this.endCallPhrases = endCallPhrases;
        this.metadata = metadata;
        this.serverUrl = serverUrl;
        this.serverUrlSecret = serverUrlSecret;
        this.analysisPlan = analysisPlan;
        this.artifactPlan = artifactPlan;
        this.messagePlan = messagePlan;
        this.startSpeakingPlan = startSpeakingPlan;
        this.stopSpeakingPlan = stopSpeakingPlan;
        this.monitorPlan = monitorPlan;
        this.credentialIds = credentialIds;
        this.id = id;
        this.orgId = orgId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the options for the assistant's transcriber.
     */
    @JsonProperty("transcriber")
    public Optional<AssistantTranscriber> getTranscriber() {
        return transcriber;
    }

    /**
     * @return These are the options for the assistant's LLM.
     */
    @JsonProperty("model")
    public Optional<AssistantModel> getModel() {
        return model;
    }

    /**
     * @return These are the options for the assistant's voice.
     */
    @JsonProperty("voice")
    public Optional<AssistantVoice> getVoice() {
        return voice;
    }

    /**
     * @return This is the mode for the first message. Default is 'assistant-speaks-first'.
     * <p>Use:</p>
     * <ul>
     * <li>'assistant-speaks-first' to have the assistant speak first.</li>
     * <li>'assistant-waits-for-user' to have the assistant wait for the user to speak first.</li>
     * <li>'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (<code>assistant.model.messages</code> at call start, <code>call.messages</code> at squad transfer points).</li>
     * </ul>
     * <p>@default 'assistant-speaks-first'</p>
     */
    @JsonProperty("firstMessageMode")
    public Optional<AssistantFirstMessageMode> getFirstMessageMode() {
        return firstMessageMode;
    }

    /**
     * @return When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
     */
    @JsonProperty("hipaaEnabled")
    public Optional<Boolean> getHipaaEnabled() {
        return hipaaEnabled;
    }

    /**
     * @return These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.
     */
    @JsonProperty("clientMessages")
    public Optional<List<AssistantClientMessagesItem>> getClientMessages() {
        return clientMessages;
    }

    /**
     * @return These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.
     */
    @JsonProperty("serverMessages")
    public Optional<List<AssistantServerMessagesItem>> getServerMessages() {
        return serverMessages;
    }

    /**
     * @return How many seconds of silence to wait before ending the call. Defaults to 30.
     * <p>@default 30</p>
     */
    @JsonProperty("silenceTimeoutSeconds")
    public Optional<Double> getSilenceTimeoutSeconds() {
        return silenceTimeoutSeconds;
    }

    /**
     * @return This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.
     * <p>@default 600 (10 minutes)</p>
     */
    @JsonProperty("maxDurationSeconds")
    public Optional<Double> getMaxDurationSeconds() {
        return maxDurationSeconds;
    }

    /**
     * @return This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
     */
    @JsonProperty("backgroundSound")
    public Optional<AssistantBackgroundSound> getBackgroundSound() {
        return backgroundSound;
    }

    /**
     * @return This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.
     * <p>Default <code>false</code> while in beta.</p>
     * <p>@default false</p>
     */
    @JsonProperty("backchannelingEnabled")
    public Optional<Boolean> getBackchannelingEnabled() {
        return backchannelingEnabled;
    }

    /**
     * @return This enables filtering of noise and background speech while the user is talking.
     * <p>Default <code>false</code> while in beta.</p>
     * <p>@default false</p>
     */
    @JsonProperty("backgroundDenoisingEnabled")
    public Optional<Boolean> getBackgroundDenoisingEnabled() {
        return backgroundDenoisingEnabled;
    }

    /**
     * @return This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.
     * <p>Default <code>false</code> while in beta.</p>
     * <p>@default false</p>
     */
    @JsonProperty("modelOutputInMessagesEnabled")
    public Optional<Boolean> getModelOutputInMessagesEnabled() {
        return modelOutputInMessagesEnabled;
    }

    /**
     * @return These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.
     */
    @JsonProperty("transportConfigurations")
    public Optional<List<TransportConfigurationTwilio>> getTransportConfigurations() {
        return transportConfigurations;
    }

    /**
     * @return This is the name of the assistant.
     * <p>This is required when you want to transfer between assistants in a call.</p>
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).
     * <p>If unspecified, assistant will wait for user to speak and use the model to respond once they speak.</p>
     */
    @JsonProperty("firstMessage")
    public Optional<String> getFirstMessage() {
        return firstMessage;
    }

    /**
     * @return These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].
     * This uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.
     * You can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.
     */
    @JsonProperty("voicemailDetection")
    public Optional<TwilioVoicemailDetection> getVoicemailDetection() {
        return voicemailDetection;
    }

    /**
     * @return This is the message that the assistant will say if the call is forwarded to voicemail.
     * <p>If unspecified, it will hang up.</p>
     */
    @JsonProperty("voicemailMessage")
    public Optional<String> getVoicemailMessage() {
        return voicemailMessage;
    }

    /**
     * @return This is the message that the assistant will say if it ends the call.
     * <p>If unspecified, it will hang up without saying anything.</p>
     */
    @JsonProperty("endCallMessage")
    public Optional<String> getEndCallMessage() {
        return endCallMessage;
    }

    /**
     * @return This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.
     */
    @JsonProperty("endCallPhrases")
    public Optional<List<String>> getEndCallPhrases() {
        return endCallPhrases;
    }

    /**
     * @return This is for metadata you want to store on the assistant.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    /**
     * @return This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.
     * <p>All requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.</p>
     * <p>This overrides the serverUrl set on the org and the phoneNumber. Order of precedence: tool.server.url &gt; assistant.serverUrl &gt; phoneNumber.serverUrl &gt; org.serverUrl</p>
     */
    @JsonProperty("serverUrl")
    public Optional<String> getServerUrl() {
        return serverUrl;
    }

    /**
     * @return This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.
     * <p>Same precedence logic as serverUrl.</p>
     */
    @JsonProperty("serverUrlSecret")
    public Optional<String> getServerUrlSecret() {
        return serverUrlSecret;
    }

    /**
     * @return This is the plan for analysis of assistant's calls. Stored in <code>call.analysis</code>.
     */
    @JsonProperty("analysisPlan")
    public Optional<AnalysisPlan> getAnalysisPlan() {
        return analysisPlan;
    }

    /**
     * @return This is the plan for artifacts generated during assistant's calls. Stored in <code>call.artifact</code>.
     * <p>Note: <code>recordingEnabled</code> is currently at the root level. It will be moved to <code>artifactPlan</code> in the future, but will remain backwards compatible.</p>
     */
    @JsonProperty("artifactPlan")
    public Optional<ArtifactPlan> getArtifactPlan() {
        return artifactPlan;
    }

    /**
     * @return This is the plan for static predefined messages that can be spoken by the assistant during the call, like <code>idleMessages</code>.
     * <p>Note: <code>firstMessage</code>, <code>voicemailMessage</code>, and <code>endCallMessage</code> are currently at the root level. They will be moved to <code>messagePlan</code> in the future, but will remain backwards compatible.</p>
     */
    @JsonProperty("messagePlan")
    public Optional<MessagePlan> getMessagePlan() {
        return messagePlan;
    }

    /**
     * @return This is the plan for when the assistant should start talking.
     * <p>You should configure this if you're running into these issues:</p>
     * <ul>
     * <li>The assistant is too slow to start talking after the customer is done speaking.</li>
     * <li>The assistant is too fast to start talking after the customer is done speaking.</li>
     * <li>The assistant is so fast that it's actually interrupting the customer.</li>
     * </ul>
     */
    @JsonProperty("startSpeakingPlan")
    public Optional<StartSpeakingPlan> getStartSpeakingPlan() {
        return startSpeakingPlan;
    }

    /**
     * @return This is the plan for when assistant should stop talking on customer interruption.
     * <p>You should configure this if you're running into these issues:</p>
     * <ul>
     * <li>The assistant is too slow to recognize customer's interruption.</li>
     * <li>The assistant is too fast to recognize customer's interruption.</li>
     * <li>The assistant is getting interrupted by phrases that are just acknowledgments.</li>
     * <li>The assistant is getting interrupted by background noises.</li>
     * <li>The assistant is not properly stopping -- it starts talking right after getting interrupted.</li>
     * </ul>
     */
    @JsonProperty("stopSpeakingPlan")
    public Optional<StopSpeakingPlan> getStopSpeakingPlan() {
        return stopSpeakingPlan;
    }

    /**
     * @return This is the plan for real-time monitoring of the assistant's calls.
     * <p>Usage:</p>
     * <ul>
     * <li>To enable live listening of the assistant's calls, set <code>monitorPlan.listenEnabled</code> to <code>true</code>.</li>
     * <li>To enable live control of the assistant's calls, set <code>monitorPlan.controlEnabled</code> to <code>true</code>.</li>
     * </ul>
     * <p>Note, <code>serverMessages</code>, <code>clientMessages</code>, <code>serverUrl</code> and <code>serverUrlSecret</code> are currently at the root level but will be moved to <code>monitorPlan</code> in the future. Will remain backwards compatible</p>
     */
    @JsonProperty("monitorPlan")
    public Optional<MonitorPlan> getMonitorPlan() {
        return monitorPlan;
    }

    /**
     * @return These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.
     */
    @JsonProperty("credentialIds")
    public Optional<List<String>> getCredentialIds() {
        return credentialIds;
    }

    /**
     * @return This is the unique identifier for the assistant.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the org that this assistant belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the assistant was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the assistant was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Assistant && equalTo((Assistant) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Assistant other) {
        return transcriber.equals(other.transcriber)
                && model.equals(other.model)
                && voice.equals(other.voice)
                && firstMessageMode.equals(other.firstMessageMode)
                && hipaaEnabled.equals(other.hipaaEnabled)
                && clientMessages.equals(other.clientMessages)
                && serverMessages.equals(other.serverMessages)
                && silenceTimeoutSeconds.equals(other.silenceTimeoutSeconds)
                && maxDurationSeconds.equals(other.maxDurationSeconds)
                && backgroundSound.equals(other.backgroundSound)
                && backchannelingEnabled.equals(other.backchannelingEnabled)
                && backgroundDenoisingEnabled.equals(other.backgroundDenoisingEnabled)
                && modelOutputInMessagesEnabled.equals(other.modelOutputInMessagesEnabled)
                && transportConfigurations.equals(other.transportConfigurations)
                && name.equals(other.name)
                && firstMessage.equals(other.firstMessage)
                && voicemailDetection.equals(other.voicemailDetection)
                && voicemailMessage.equals(other.voicemailMessage)
                && endCallMessage.equals(other.endCallMessage)
                && endCallPhrases.equals(other.endCallPhrases)
                && metadata.equals(other.metadata)
                && serverUrl.equals(other.serverUrl)
                && serverUrlSecret.equals(other.serverUrlSecret)
                && analysisPlan.equals(other.analysisPlan)
                && artifactPlan.equals(other.artifactPlan)
                && messagePlan.equals(other.messagePlan)
                && startSpeakingPlan.equals(other.startSpeakingPlan)
                && stopSpeakingPlan.equals(other.stopSpeakingPlan)
                && monitorPlan.equals(other.monitorPlan)
                && credentialIds.equals(other.credentialIds)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.transcriber,
                this.model,
                this.voice,
                this.firstMessageMode,
                this.hipaaEnabled,
                this.clientMessages,
                this.serverMessages,
                this.silenceTimeoutSeconds,
                this.maxDurationSeconds,
                this.backgroundSound,
                this.backchannelingEnabled,
                this.backgroundDenoisingEnabled,
                this.modelOutputInMessagesEnabled,
                this.transportConfigurations,
                this.name,
                this.firstMessage,
                this.voicemailDetection,
                this.voicemailMessage,
                this.endCallMessage,
                this.endCallPhrases,
                this.metadata,
                this.serverUrl,
                this.serverUrlSecret,
                this.analysisPlan,
                this.artifactPlan,
                this.messagePlan,
                this.startSpeakingPlan,
                this.stopSpeakingPlan,
                this.monitorPlan,
                this.credentialIds,
                this.id,
                this.orgId,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        OrgIdStage id(@NotNull String id);

        Builder from(Assistant other);
    }

    public interface OrgIdStage {
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Assistant build();

        _FinalStage transcriber(Optional<AssistantTranscriber> transcriber);

        _FinalStage transcriber(AssistantTranscriber transcriber);

        _FinalStage model(Optional<AssistantModel> model);

        _FinalStage model(AssistantModel model);

        _FinalStage voice(Optional<AssistantVoice> voice);

        _FinalStage voice(AssistantVoice voice);

        _FinalStage firstMessageMode(Optional<AssistantFirstMessageMode> firstMessageMode);

        _FinalStage firstMessageMode(AssistantFirstMessageMode firstMessageMode);

        _FinalStage hipaaEnabled(Optional<Boolean> hipaaEnabled);

        _FinalStage hipaaEnabled(Boolean hipaaEnabled);

        _FinalStage clientMessages(Optional<List<AssistantClientMessagesItem>> clientMessages);

        _FinalStage clientMessages(List<AssistantClientMessagesItem> clientMessages);

        _FinalStage serverMessages(Optional<List<AssistantServerMessagesItem>> serverMessages);

        _FinalStage serverMessages(List<AssistantServerMessagesItem> serverMessages);

        _FinalStage silenceTimeoutSeconds(Optional<Double> silenceTimeoutSeconds);

        _FinalStage silenceTimeoutSeconds(Double silenceTimeoutSeconds);

        _FinalStage maxDurationSeconds(Optional<Double> maxDurationSeconds);

        _FinalStage maxDurationSeconds(Double maxDurationSeconds);

        _FinalStage backgroundSound(Optional<AssistantBackgroundSound> backgroundSound);

        _FinalStage backgroundSound(AssistantBackgroundSound backgroundSound);

        _FinalStage backchannelingEnabled(Optional<Boolean> backchannelingEnabled);

        _FinalStage backchannelingEnabled(Boolean backchannelingEnabled);

        _FinalStage backgroundDenoisingEnabled(Optional<Boolean> backgroundDenoisingEnabled);

        _FinalStage backgroundDenoisingEnabled(Boolean backgroundDenoisingEnabled);

        _FinalStage modelOutputInMessagesEnabled(Optional<Boolean> modelOutputInMessagesEnabled);

        _FinalStage modelOutputInMessagesEnabled(Boolean modelOutputInMessagesEnabled);

        _FinalStage transportConfigurations(Optional<List<TransportConfigurationTwilio>> transportConfigurations);

        _FinalStage transportConfigurations(List<TransportConfigurationTwilio> transportConfigurations);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage firstMessage(Optional<String> firstMessage);

        _FinalStage firstMessage(String firstMessage);

        _FinalStage voicemailDetection(Optional<TwilioVoicemailDetection> voicemailDetection);

        _FinalStage voicemailDetection(TwilioVoicemailDetection voicemailDetection);

        _FinalStage voicemailMessage(Optional<String> voicemailMessage);

        _FinalStage voicemailMessage(String voicemailMessage);

        _FinalStage endCallMessage(Optional<String> endCallMessage);

        _FinalStage endCallMessage(String endCallMessage);

        _FinalStage endCallPhrases(Optional<List<String>> endCallPhrases);

        _FinalStage endCallPhrases(List<String> endCallPhrases);

        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);

        _FinalStage serverUrl(Optional<String> serverUrl);

        _FinalStage serverUrl(String serverUrl);

        _FinalStage serverUrlSecret(Optional<String> serverUrlSecret);

        _FinalStage serverUrlSecret(String serverUrlSecret);

        _FinalStage analysisPlan(Optional<AnalysisPlan> analysisPlan);

        _FinalStage analysisPlan(AnalysisPlan analysisPlan);

        _FinalStage artifactPlan(Optional<ArtifactPlan> artifactPlan);

        _FinalStage artifactPlan(ArtifactPlan artifactPlan);

        _FinalStage messagePlan(Optional<MessagePlan> messagePlan);

        _FinalStage messagePlan(MessagePlan messagePlan);

        _FinalStage startSpeakingPlan(Optional<StartSpeakingPlan> startSpeakingPlan);

        _FinalStage startSpeakingPlan(StartSpeakingPlan startSpeakingPlan);

        _FinalStage stopSpeakingPlan(Optional<StopSpeakingPlan> stopSpeakingPlan);

        _FinalStage stopSpeakingPlan(StopSpeakingPlan stopSpeakingPlan);

        _FinalStage monitorPlan(Optional<MonitorPlan> monitorPlan);

        _FinalStage monitorPlan(MonitorPlan monitorPlan);

        _FinalStage credentialIds(Optional<List<String>> credentialIds);

        _FinalStage credentialIds(List<String> credentialIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, OrgIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<List<String>> credentialIds = Optional.empty();

        private Optional<MonitorPlan> monitorPlan = Optional.empty();

        private Optional<StopSpeakingPlan> stopSpeakingPlan = Optional.empty();

        private Optional<StartSpeakingPlan> startSpeakingPlan = Optional.empty();

        private Optional<MessagePlan> messagePlan = Optional.empty();

        private Optional<ArtifactPlan> artifactPlan = Optional.empty();

        private Optional<AnalysisPlan> analysisPlan = Optional.empty();

        private Optional<String> serverUrlSecret = Optional.empty();

        private Optional<String> serverUrl = Optional.empty();

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<List<String>> endCallPhrases = Optional.empty();

        private Optional<String> endCallMessage = Optional.empty();

        private Optional<String> voicemailMessage = Optional.empty();

        private Optional<TwilioVoicemailDetection> voicemailDetection = Optional.empty();

        private Optional<String> firstMessage = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<List<TransportConfigurationTwilio>> transportConfigurations = Optional.empty();

        private Optional<Boolean> modelOutputInMessagesEnabled = Optional.empty();

        private Optional<Boolean> backgroundDenoisingEnabled = Optional.empty();

        private Optional<Boolean> backchannelingEnabled = Optional.empty();

        private Optional<AssistantBackgroundSound> backgroundSound = Optional.empty();

        private Optional<Double> maxDurationSeconds = Optional.empty();

        private Optional<Double> silenceTimeoutSeconds = Optional.empty();

        private Optional<List<AssistantServerMessagesItem>> serverMessages = Optional.empty();

        private Optional<List<AssistantClientMessagesItem>> clientMessages = Optional.empty();

        private Optional<Boolean> hipaaEnabled = Optional.empty();

        private Optional<AssistantFirstMessageMode> firstMessageMode = Optional.empty();

        private Optional<AssistantVoice> voice = Optional.empty();

        private Optional<AssistantModel> model = Optional.empty();

        private Optional<AssistantTranscriber> transcriber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Assistant other) {
            transcriber(other.getTranscriber());
            model(other.getModel());
            voice(other.getVoice());
            firstMessageMode(other.getFirstMessageMode());
            hipaaEnabled(other.getHipaaEnabled());
            clientMessages(other.getClientMessages());
            serverMessages(other.getServerMessages());
            silenceTimeoutSeconds(other.getSilenceTimeoutSeconds());
            maxDurationSeconds(other.getMaxDurationSeconds());
            backgroundSound(other.getBackgroundSound());
            backchannelingEnabled(other.getBackchannelingEnabled());
            backgroundDenoisingEnabled(other.getBackgroundDenoisingEnabled());
            modelOutputInMessagesEnabled(other.getModelOutputInMessagesEnabled());
            transportConfigurations(other.getTransportConfigurations());
            name(other.getName());
            firstMessage(other.getFirstMessage());
            voicemailDetection(other.getVoicemailDetection());
            voicemailMessage(other.getVoicemailMessage());
            endCallMessage(other.getEndCallMessage());
            endCallPhrases(other.getEndCallPhrases());
            metadata(other.getMetadata());
            serverUrl(other.getServerUrl());
            serverUrlSecret(other.getServerUrlSecret());
            analysisPlan(other.getAnalysisPlan());
            artifactPlan(other.getArtifactPlan());
            messagePlan(other.getMessagePlan());
            startSpeakingPlan(other.getStartSpeakingPlan());
            stopSpeakingPlan(other.getStopSpeakingPlan());
            monitorPlan(other.getMonitorPlan());
            credentialIds(other.getCredentialIds());
            id(other.getId());
            orgId(other.getOrgId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>This is the unique identifier for the assistant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the org that this assistant belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the assistant was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the assistant was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage credentialIds(List<String> credentialIds) {
            this.credentialIds = Optional.ofNullable(credentialIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "credentialIds", nulls = Nulls.SKIP)
        public _FinalStage credentialIds(Optional<List<String>> credentialIds) {
            this.credentialIds = credentialIds;
            return this;
        }

        /**
         * <p>This is the plan for real-time monitoring of the assistant's calls.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To enable live listening of the assistant's calls, set <code>monitorPlan.listenEnabled</code> to <code>true</code>.</li>
         * <li>To enable live control of the assistant's calls, set <code>monitorPlan.controlEnabled</code> to <code>true</code>.</li>
         * </ul>
         * <p>Note, <code>serverMessages</code>, <code>clientMessages</code>, <code>serverUrl</code> and <code>serverUrlSecret</code> are currently at the root level but will be moved to <code>monitorPlan</code> in the future. Will remain backwards compatible</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage monitorPlan(MonitorPlan monitorPlan) {
            this.monitorPlan = Optional.ofNullable(monitorPlan);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "monitorPlan", nulls = Nulls.SKIP)
        public _FinalStage monitorPlan(Optional<MonitorPlan> monitorPlan) {
            this.monitorPlan = monitorPlan;
            return this;
        }

        /**
         * <p>This is the plan for when assistant should stop talking on customer interruption.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>The assistant is too slow to recognize customer's interruption.</li>
         * <li>The assistant is too fast to recognize customer's interruption.</li>
         * <li>The assistant is getting interrupted by phrases that are just acknowledgments.</li>
         * <li>The assistant is getting interrupted by background noises.</li>
         * <li>The assistant is not properly stopping -- it starts talking right after getting interrupted.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stopSpeakingPlan(StopSpeakingPlan stopSpeakingPlan) {
            this.stopSpeakingPlan = Optional.ofNullable(stopSpeakingPlan);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stopSpeakingPlan", nulls = Nulls.SKIP)
        public _FinalStage stopSpeakingPlan(Optional<StopSpeakingPlan> stopSpeakingPlan) {
            this.stopSpeakingPlan = stopSpeakingPlan;
            return this;
        }

        /**
         * <p>This is the plan for when the assistant should start talking.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>The assistant is too slow to start talking after the customer is done speaking.</li>
         * <li>The assistant is too fast to start talking after the customer is done speaking.</li>
         * <li>The assistant is so fast that it's actually interrupting the customer.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage startSpeakingPlan(StartSpeakingPlan startSpeakingPlan) {
            this.startSpeakingPlan = Optional.ofNullable(startSpeakingPlan);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "startSpeakingPlan", nulls = Nulls.SKIP)
        public _FinalStage startSpeakingPlan(Optional<StartSpeakingPlan> startSpeakingPlan) {
            this.startSpeakingPlan = startSpeakingPlan;
            return this;
        }

        /**
         * <p>This is the plan for static predefined messages that can be spoken by the assistant during the call, like <code>idleMessages</code>.</p>
         * <p>Note: <code>firstMessage</code>, <code>voicemailMessage</code>, and <code>endCallMessage</code> are currently at the root level. They will be moved to <code>messagePlan</code> in the future, but will remain backwards compatible.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messagePlan(MessagePlan messagePlan) {
            this.messagePlan = Optional.ofNullable(messagePlan);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "messagePlan", nulls = Nulls.SKIP)
        public _FinalStage messagePlan(Optional<MessagePlan> messagePlan) {
            this.messagePlan = messagePlan;
            return this;
        }

        /**
         * <p>This is the plan for artifacts generated during assistant's calls. Stored in <code>call.artifact</code>.</p>
         * <p>Note: <code>recordingEnabled</code> is currently at the root level. It will be moved to <code>artifactPlan</code> in the future, but will remain backwards compatible.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage artifactPlan(ArtifactPlan artifactPlan) {
            this.artifactPlan = Optional.ofNullable(artifactPlan);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "artifactPlan", nulls = Nulls.SKIP)
        public _FinalStage artifactPlan(Optional<ArtifactPlan> artifactPlan) {
            this.artifactPlan = artifactPlan;
            return this;
        }

        /**
         * <p>This is the plan for analysis of assistant's calls. Stored in <code>call.analysis</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage analysisPlan(AnalysisPlan analysisPlan) {
            this.analysisPlan = Optional.ofNullable(analysisPlan);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "analysisPlan", nulls = Nulls.SKIP)
        public _FinalStage analysisPlan(Optional<AnalysisPlan> analysisPlan) {
            this.analysisPlan = analysisPlan;
            return this;
        }

        /**
         * <p>This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.</p>
         * <p>Same precedence logic as serverUrl.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serverUrlSecret(String serverUrlSecret) {
            this.serverUrlSecret = Optional.ofNullable(serverUrlSecret);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serverUrlSecret", nulls = Nulls.SKIP)
        public _FinalStage serverUrlSecret(Optional<String> serverUrlSecret) {
            this.serverUrlSecret = serverUrlSecret;
            return this;
        }

        /**
         * <p>This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.</p>
         * <p>All requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.</p>
         * <p>This overrides the serverUrl set on the org and the phoneNumber. Order of precedence: tool.server.url &gt; assistant.serverUrl &gt; phoneNumber.serverUrl &gt; org.serverUrl</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serverUrl(String serverUrl) {
            this.serverUrl = Optional.ofNullable(serverUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serverUrl", nulls = Nulls.SKIP)
        public _FinalStage serverUrl(Optional<String> serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * <p>This is for metadata you want to store on the assistant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endCallPhrases(List<String> endCallPhrases) {
            this.endCallPhrases = Optional.ofNullable(endCallPhrases);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "endCallPhrases", nulls = Nulls.SKIP)
        public _FinalStage endCallPhrases(Optional<List<String>> endCallPhrases) {
            this.endCallPhrases = endCallPhrases;
            return this;
        }

        /**
         * <p>This is the message that the assistant will say if it ends the call.</p>
         * <p>If unspecified, it will hang up without saying anything.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endCallMessage(String endCallMessage) {
            this.endCallMessage = Optional.ofNullable(endCallMessage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "endCallMessage", nulls = Nulls.SKIP)
        public _FinalStage endCallMessage(Optional<String> endCallMessage) {
            this.endCallMessage = endCallMessage;
            return this;
        }

        /**
         * <p>This is the message that the assistant will say if the call is forwarded to voicemail.</p>
         * <p>If unspecified, it will hang up.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage voicemailMessage(String voicemailMessage) {
            this.voicemailMessage = Optional.ofNullable(voicemailMessage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "voicemailMessage", nulls = Nulls.SKIP)
        public _FinalStage voicemailMessage(Optional<String> voicemailMessage) {
            this.voicemailMessage = voicemailMessage;
            return this;
        }

        /**
         * <p>These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].
         * This uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.
         * You can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage voicemailDetection(TwilioVoicemailDetection voicemailDetection) {
            this.voicemailDetection = Optional.ofNullable(voicemailDetection);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "voicemailDetection", nulls = Nulls.SKIP)
        public _FinalStage voicemailDetection(Optional<TwilioVoicemailDetection> voicemailDetection) {
            this.voicemailDetection = voicemailDetection;
            return this;
        }

        /**
         * <p>This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).</p>
         * <p>If unspecified, assistant will wait for user to speak and use the model to respond once they speak.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage firstMessage(String firstMessage) {
            this.firstMessage = Optional.ofNullable(firstMessage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "firstMessage", nulls = Nulls.SKIP)
        public _FinalStage firstMessage(Optional<String> firstMessage) {
            this.firstMessage = firstMessage;
            return this;
        }

        /**
         * <p>This is the name of the assistant.</p>
         * <p>This is required when you want to transfer between assistants in a call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transportConfigurations(List<TransportConfigurationTwilio> transportConfigurations) {
            this.transportConfigurations = Optional.ofNullable(transportConfigurations);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transportConfigurations", nulls = Nulls.SKIP)
        public _FinalStage transportConfigurations(
                Optional<List<TransportConfigurationTwilio>> transportConfigurations) {
            this.transportConfigurations = transportConfigurations;
            return this;
        }

        /**
         * <p>This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.</p>
         * <p>Default <code>false</code> while in beta.</p>
         * <p>@default false</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage modelOutputInMessagesEnabled(Boolean modelOutputInMessagesEnabled) {
            this.modelOutputInMessagesEnabled = Optional.ofNullable(modelOutputInMessagesEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "modelOutputInMessagesEnabled", nulls = Nulls.SKIP)
        public _FinalStage modelOutputInMessagesEnabled(Optional<Boolean> modelOutputInMessagesEnabled) {
            this.modelOutputInMessagesEnabled = modelOutputInMessagesEnabled;
            return this;
        }

        /**
         * <p>This enables filtering of noise and background speech while the user is talking.</p>
         * <p>Default <code>false</code> while in beta.</p>
         * <p>@default false</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage backgroundDenoisingEnabled(Boolean backgroundDenoisingEnabled) {
            this.backgroundDenoisingEnabled = Optional.ofNullable(backgroundDenoisingEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "backgroundDenoisingEnabled", nulls = Nulls.SKIP)
        public _FinalStage backgroundDenoisingEnabled(Optional<Boolean> backgroundDenoisingEnabled) {
            this.backgroundDenoisingEnabled = backgroundDenoisingEnabled;
            return this;
        }

        /**
         * <p>This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.</p>
         * <p>Default <code>false</code> while in beta.</p>
         * <p>@default false</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage backchannelingEnabled(Boolean backchannelingEnabled) {
            this.backchannelingEnabled = Optional.ofNullable(backchannelingEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "backchannelingEnabled", nulls = Nulls.SKIP)
        public _FinalStage backchannelingEnabled(Optional<Boolean> backchannelingEnabled) {
            this.backchannelingEnabled = backchannelingEnabled;
            return this;
        }

        /**
         * <p>This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage backgroundSound(AssistantBackgroundSound backgroundSound) {
            this.backgroundSound = Optional.ofNullable(backgroundSound);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "backgroundSound", nulls = Nulls.SKIP)
        public _FinalStage backgroundSound(Optional<AssistantBackgroundSound> backgroundSound) {
            this.backgroundSound = backgroundSound;
            return this;
        }

        /**
         * <p>This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.</p>
         * <p>@default 600 (10 minutes)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage maxDurationSeconds(Double maxDurationSeconds) {
            this.maxDurationSeconds = Optional.ofNullable(maxDurationSeconds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maxDurationSeconds", nulls = Nulls.SKIP)
        public _FinalStage maxDurationSeconds(Optional<Double> maxDurationSeconds) {
            this.maxDurationSeconds = maxDurationSeconds;
            return this;
        }

        /**
         * <p>How many seconds of silence to wait before ending the call. Defaults to 30.</p>
         * <p>@default 30</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage silenceTimeoutSeconds(Double silenceTimeoutSeconds) {
            this.silenceTimeoutSeconds = Optional.ofNullable(silenceTimeoutSeconds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "silenceTimeoutSeconds", nulls = Nulls.SKIP)
        public _FinalStage silenceTimeoutSeconds(Optional<Double> silenceTimeoutSeconds) {
            this.silenceTimeoutSeconds = silenceTimeoutSeconds;
            return this;
        }

        /**
         * <p>These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serverMessages(List<AssistantServerMessagesItem> serverMessages) {
            this.serverMessages = Optional.ofNullable(serverMessages);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serverMessages", nulls = Nulls.SKIP)
        public _FinalStage serverMessages(Optional<List<AssistantServerMessagesItem>> serverMessages) {
            this.serverMessages = serverMessages;
            return this;
        }

        /**
         * <p>These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage clientMessages(List<AssistantClientMessagesItem> clientMessages) {
            this.clientMessages = Optional.ofNullable(clientMessages);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "clientMessages", nulls = Nulls.SKIP)
        public _FinalStage clientMessages(Optional<List<AssistantClientMessagesItem>> clientMessages) {
            this.clientMessages = clientMessages;
            return this;
        }

        /**
         * <p>When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hipaaEnabled(Boolean hipaaEnabled) {
            this.hipaaEnabled = Optional.ofNullable(hipaaEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hipaaEnabled", nulls = Nulls.SKIP)
        public _FinalStage hipaaEnabled(Optional<Boolean> hipaaEnabled) {
            this.hipaaEnabled = hipaaEnabled;
            return this;
        }

        /**
         * <p>This is the mode for the first message. Default is 'assistant-speaks-first'.</p>
         * <p>Use:</p>
         * <ul>
         * <li>'assistant-speaks-first' to have the assistant speak first.</li>
         * <li>'assistant-waits-for-user' to have the assistant wait for the user to speak first.</li>
         * <li>'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (<code>assistant.model.messages</code> at call start, <code>call.messages</code> at squad transfer points).</li>
         * </ul>
         * <p>@default 'assistant-speaks-first'</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage firstMessageMode(AssistantFirstMessageMode firstMessageMode) {
            this.firstMessageMode = Optional.ofNullable(firstMessageMode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "firstMessageMode", nulls = Nulls.SKIP)
        public _FinalStage firstMessageMode(Optional<AssistantFirstMessageMode> firstMessageMode) {
            this.firstMessageMode = firstMessageMode;
            return this;
        }

        /**
         * <p>These are the options for the assistant's voice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage voice(AssistantVoice voice) {
            this.voice = Optional.ofNullable(voice);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "voice", nulls = Nulls.SKIP)
        public _FinalStage voice(Optional<AssistantVoice> voice) {
            this.voice = voice;
            return this;
        }

        /**
         * <p>These are the options for the assistant's LLM.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage model(AssistantModel model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public _FinalStage model(Optional<AssistantModel> model) {
            this.model = model;
            return this;
        }

        /**
         * <p>These are the options for the assistant's transcriber.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transcriber(AssistantTranscriber transcriber) {
            this.transcriber = Optional.ofNullable(transcriber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transcriber", nulls = Nulls.SKIP)
        public _FinalStage transcriber(Optional<AssistantTranscriber> transcriber) {
            this.transcriber = transcriber;
            return this;
        }

        @java.lang.Override
        public Assistant build() {
            return new Assistant(
                    transcriber,
                    model,
                    voice,
                    firstMessageMode,
                    hipaaEnabled,
                    clientMessages,
                    serverMessages,
                    silenceTimeoutSeconds,
                    maxDurationSeconds,
                    backgroundSound,
                    backchannelingEnabled,
                    backgroundDenoisingEnabled,
                    modelOutputInMessagesEnabled,
                    transportConfigurations,
                    name,
                    firstMessage,
                    voicemailDetection,
                    voicemailMessage,
                    endCallMessage,
                    endCallPhrases,
                    metadata,
                    serverUrl,
                    serverUrlSecret,
                    analysisPlan,
                    artifactPlan,
                    messagePlan,
                    startSpeakingPlan,
                    stopSpeakingPlan,
                    monitorPlan,
                    credentialIds,
                    id,
                    orgId,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
