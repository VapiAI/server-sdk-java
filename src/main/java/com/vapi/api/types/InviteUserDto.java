/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InviteUserDto.Builder.class)
public final class InviteUserDto {
    private final List<String> emails;

    private final InviteUserDtoRole role;

    private final Optional<String> redirectTo;

    private final Map<String, Object> additionalProperties;

    private InviteUserDto(
            List<String> emails,
            InviteUserDtoRole role,
            Optional<String> redirectTo,
            Map<String, Object> additionalProperties) {
        this.emails = emails;
        this.role = role;
        this.redirectTo = redirectTo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("emails")
    public List<String> getEmails() {
        return emails;
    }

    @JsonProperty("role")
    public InviteUserDtoRole getRole() {
        return role;
    }

    @JsonProperty("redirectTo")
    public Optional<String> getRedirectTo() {
        return redirectTo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InviteUserDto && equalTo((InviteUserDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InviteUserDto other) {
        return emails.equals(other.emails) && role.equals(other.role) && redirectTo.equals(other.redirectTo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.emails, this.role, this.redirectTo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RoleStage builder() {
        return new Builder();
    }

    public interface RoleStage {
        _FinalStage role(@NotNull InviteUserDtoRole role);

        Builder from(InviteUserDto other);
    }

    public interface _FinalStage {
        InviteUserDto build();

        _FinalStage emails(List<String> emails);

        _FinalStage addEmails(String emails);

        _FinalStage addAllEmails(List<String> emails);

        _FinalStage redirectTo(Optional<String> redirectTo);

        _FinalStage redirectTo(String redirectTo);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RoleStage, _FinalStage {
        private InviteUserDtoRole role;

        private Optional<String> redirectTo = Optional.empty();

        private List<String> emails = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InviteUserDto other) {
            emails(other.getEmails());
            role(other.getRole());
            redirectTo(other.getRedirectTo());
            return this;
        }

        @java.lang.Override
        @JsonSetter("role")
        public _FinalStage role(@NotNull InviteUserDtoRole role) {
            this.role = Objects.requireNonNull(role, "role must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage redirectTo(String redirectTo) {
            this.redirectTo = Optional.ofNullable(redirectTo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "redirectTo", nulls = Nulls.SKIP)
        public _FinalStage redirectTo(Optional<String> redirectTo) {
            this.redirectTo = redirectTo;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEmails(List<String> emails) {
            this.emails.addAll(emails);
            return this;
        }

        @java.lang.Override
        public _FinalStage addEmails(String emails) {
            this.emails.add(emails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "emails", nulls = Nulls.SKIP)
        public _FinalStage emails(List<String> emails) {
            this.emails.clear();
            this.emails.addAll(emails);
            return this;
        }

        @java.lang.Override
        public InviteUserDto build() {
            return new InviteUserDto(emails, role, redirectTo, additionalProperties);
        }
    }
}
