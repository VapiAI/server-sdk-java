/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InviteUserDto.Builder.class)
public final class InviteUserDto {
    private final String email;

    private final InviteUserDtoRole role;

    private final Map<String, Object> additionalProperties;

    private InviteUserDto(String email, InviteUserDtoRole role, Map<String, Object> additionalProperties) {
        this.email = email;
        this.role = role;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("email")
    public String getEmail() {
        return email;
    }

    @JsonProperty("role")
    public InviteUserDtoRole getRole() {
        return role;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InviteUserDto && equalTo((InviteUserDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InviteUserDto other) {
        return email.equals(other.email) && role.equals(other.role);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.email, this.role);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EmailStage builder() {
        return new Builder();
    }

    public interface EmailStage {
        RoleStage email(@NotNull String email);

        Builder from(InviteUserDto other);
    }

    public interface RoleStage {
        _FinalStage role(@NotNull InviteUserDtoRole role);
    }

    public interface _FinalStage {
        InviteUserDto build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EmailStage, RoleStage, _FinalStage {
        private String email;

        private InviteUserDtoRole role;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InviteUserDto other) {
            email(other.getEmail());
            role(other.getRole());
            return this;
        }

        @java.lang.Override
        @JsonSetter("email")
        public RoleStage email(@NotNull String email) {
            this.email = Objects.requireNonNull(email, "email must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("role")
        public _FinalStage role(@NotNull InviteUserDtoRole role) {
            this.role = Objects.requireNonNull(role, "role must not be null");
            return this;
        }

        @java.lang.Override
        public InviteUserDto build() {
            return new InviteUserDto(email, role, additionalProperties);
        }
    }
}
