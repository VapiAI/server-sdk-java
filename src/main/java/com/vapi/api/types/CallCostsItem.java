/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class CallCostsItem {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private CallCostsItem(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static CallCostsItem transport(TransportCost value) {
        return new CallCostsItem(new TransportValue(value));
    }

    public static CallCostsItem transcriber(TranscriberCost value) {
        return new CallCostsItem(new TranscriberValue(value));
    }

    public static CallCostsItem model(ModelCost value) {
        return new CallCostsItem(new ModelValue(value));
    }

    public static CallCostsItem voice(VoiceCost value) {
        return new CallCostsItem(new VoiceValue(value));
    }

    public static CallCostsItem vapi(VapiCost value) {
        return new CallCostsItem(new VapiValue(value));
    }

    public static CallCostsItem voicemailDetection(VoicemailDetectionCost value) {
        return new CallCostsItem(new VoicemailDetectionValue(value));
    }

    public static CallCostsItem analysis(AnalysisCost value) {
        return new CallCostsItem(new AnalysisValue(value));
    }

    public static CallCostsItem knowledgeBase(KnowledgeBaseCost value) {
        return new CallCostsItem(new KnowledgeBaseValue(value));
    }

    public boolean isTransport() {
        return value instanceof TransportValue;
    }

    public boolean isTranscriber() {
        return value instanceof TranscriberValue;
    }

    public boolean isModel() {
        return value instanceof ModelValue;
    }

    public boolean isVoice() {
        return value instanceof VoiceValue;
    }

    public boolean isVapi() {
        return value instanceof VapiValue;
    }

    public boolean isVoicemailDetection() {
        return value instanceof VoicemailDetectionValue;
    }

    public boolean isAnalysis() {
        return value instanceof AnalysisValue;
    }

    public boolean isKnowledgeBase() {
        return value instanceof KnowledgeBaseValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<TransportCost> getTransport() {
        if (isTransport()) {
            return Optional.of(((TransportValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TranscriberCost> getTranscriber() {
        if (isTranscriber()) {
            return Optional.of(((TranscriberValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ModelCost> getModel() {
        if (isModel()) {
            return Optional.of(((ModelValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<VoiceCost> getVoice() {
        if (isVoice()) {
            return Optional.of(((VoiceValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<VapiCost> getVapi() {
        if (isVapi()) {
            return Optional.of(((VapiValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<VoicemailDetectionCost> getVoicemailDetection() {
        if (isVoicemailDetection()) {
            return Optional.of(((VoicemailDetectionValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<AnalysisCost> getAnalysis() {
        if (isAnalysis()) {
            return Optional.of(((AnalysisValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<KnowledgeBaseCost> getKnowledgeBase() {
        if (isKnowledgeBase()) {
            return Optional.of(((KnowledgeBaseValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitTransport(TransportCost transport);

        T visitTranscriber(TranscriberCost transcriber);

        T visitModel(ModelCost model);

        T visitVoice(VoiceCost voice);

        T visitVapi(VapiCost vapi);

        T visitVoicemailDetection(VoicemailDetectionCost voicemailDetection);

        T visitAnalysis(AnalysisCost analysis);

        T visitKnowledgeBase(KnowledgeBaseCost knowledgeBase);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(TransportValue.class),
        @JsonSubTypes.Type(TranscriberValue.class),
        @JsonSubTypes.Type(ModelValue.class),
        @JsonSubTypes.Type(VoiceValue.class),
        @JsonSubTypes.Type(VapiValue.class),
        @JsonSubTypes.Type(VoicemailDetectionValue.class),
        @JsonSubTypes.Type(AnalysisValue.class),
        @JsonSubTypes.Type(KnowledgeBaseValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("transport")
    @JsonIgnoreProperties("type")
    private static final class TransportValue implements Value {
        @JsonUnwrapped
        private TransportCost value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TransportValue() {}

        private TransportValue(TransportCost value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTransport(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TransportValue && equalTo((TransportValue) other);
        }

        private boolean equalTo(TransportValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("transcriber")
    @JsonIgnoreProperties("type")
    private static final class TranscriberValue implements Value {
        @JsonUnwrapped
        private TranscriberCost value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TranscriberValue() {}

        private TranscriberValue(TranscriberCost value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTranscriber(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TranscriberValue && equalTo((TranscriberValue) other);
        }

        private boolean equalTo(TranscriberValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("model")
    @JsonIgnoreProperties("type")
    private static final class ModelValue implements Value {
        @JsonUnwrapped
        private ModelCost value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ModelValue() {}

        private ModelValue(ModelCost value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitModel(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ModelValue && equalTo((ModelValue) other);
        }

        private boolean equalTo(ModelValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("voice")
    @JsonIgnoreProperties("type")
    private static final class VoiceValue implements Value {
        @JsonUnwrapped
        private VoiceCost value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private VoiceValue() {}

        private VoiceValue(VoiceCost value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitVoice(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof VoiceValue && equalTo((VoiceValue) other);
        }

        private boolean equalTo(VoiceValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("vapi")
    @JsonIgnoreProperties("type")
    private static final class VapiValue implements Value {
        @JsonUnwrapped
        private VapiCost value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private VapiValue() {}

        private VapiValue(VapiCost value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitVapi(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof VapiValue && equalTo((VapiValue) other);
        }

        private boolean equalTo(VapiValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("voicemail-detection")
    @JsonIgnoreProperties("type")
    private static final class VoicemailDetectionValue implements Value {
        @JsonUnwrapped
        private VoicemailDetectionCost value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private VoicemailDetectionValue() {}

        private VoicemailDetectionValue(VoicemailDetectionCost value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitVoicemailDetection(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof VoicemailDetectionValue && equalTo((VoicemailDetectionValue) other);
        }

        private boolean equalTo(VoicemailDetectionValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("analysis")
    @JsonIgnoreProperties("type")
    private static final class AnalysisValue implements Value {
        @JsonUnwrapped
        private AnalysisCost value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AnalysisValue() {}

        private AnalysisValue(AnalysisCost value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAnalysis(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AnalysisValue && equalTo((AnalysisValue) other);
        }

        private boolean equalTo(AnalysisValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("knowledge-base")
    @JsonIgnoreProperties("type")
    private static final class KnowledgeBaseValue implements Value {
        @JsonUnwrapped
        private KnowledgeBaseCost value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private KnowledgeBaseValue() {}

        private KnowledgeBaseValue(KnowledgeBaseCost value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitKnowledgeBase(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof KnowledgeBaseValue && equalTo((KnowledgeBaseValue) other);
        }

        private boolean equalTo(KnowledgeBaseValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CallCostsItem{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
