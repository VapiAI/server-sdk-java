/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateToolCallBlockDto.Builder.class)
public final class UpdateToolCallBlockDto {
    private final Optional<List<UpdateToolCallBlockDtoMessagesItem>> messages;

    private final Optional<JsonSchema> inputSchema;

    private final Optional<JsonSchema> outputSchema;

    private final Optional<UpdateToolCallBlockDtoTool> tool;

    private final Optional<String> name;

    private final Optional<String> toolId;

    private final Map<String, Object> additionalProperties;

    private UpdateToolCallBlockDto(
            Optional<List<UpdateToolCallBlockDtoMessagesItem>> messages,
            Optional<JsonSchema> inputSchema,
            Optional<JsonSchema> outputSchema,
            Optional<UpdateToolCallBlockDtoTool> tool,
            Optional<String> name,
            Optional<String> toolId,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.inputSchema = inputSchema;
        this.outputSchema = outputSchema;
        this.tool = tool;
        this.name = name;
        this.toolId = toolId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the pre-configured messages that will be spoken to the user while the block is running.
     */
    @JsonProperty("messages")
    public Optional<List<UpdateToolCallBlockDtoMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return This is the input schema for the block. This is the input the block needs to run. It's given to the block as <code>steps[0].input</code>
     * <p>These are accessible as variables:</p>
     * <ul>
     * <li>({{input.propertyName}}) in context of the block execution (step)</li>
     * <li>({{stepName.input.propertyName}}) in context of the workflow</li>
     * </ul>
     */
    @JsonProperty("inputSchema")
    public Optional<JsonSchema> getInputSchema() {
        return inputSchema;
    }

    /**
     * @return This is the output schema for the block. This is the output the block will return to the workflow (<code>{{stepName.output}}</code>).
     * <p>These are accessible as variables:</p>
     * <ul>
     * <li>({{output.propertyName}}) in context of the block execution (step)</li>
     * <li>({{stepName.output.propertyName}}) in context of the workflow (read caveat #1)</li>
     * <li>({{blockName.output.propertyName}}) in context of the workflow (read caveat #2)</li>
     * </ul>
     * <p>Caveats:</p>
     * <ol>
     * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
     * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
     * </ol>
     */
    @JsonProperty("outputSchema")
    public Optional<JsonSchema> getOutputSchema() {
        return outputSchema;
    }

    /**
     * @return This is the tool that the block will call. To use an existing tool, use <code>toolId</code>.
     */
    @JsonProperty("tool")
    public Optional<UpdateToolCallBlockDtoTool> getTool() {
        return tool;
    }

    /**
     * @return This is the name of the block. This is just for your reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the id of the tool that the block will call. To use a transient tool, use <code>tool</code>.
     */
    @JsonProperty("toolId")
    public Optional<String> getToolId() {
        return toolId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateToolCallBlockDto && equalTo((UpdateToolCallBlockDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateToolCallBlockDto other) {
        return messages.equals(other.messages)
                && inputSchema.equals(other.inputSchema)
                && outputSchema.equals(other.outputSchema)
                && tool.equals(other.tool)
                && name.equals(other.name)
                && toolId.equals(other.toolId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.messages, this.inputSchema, this.outputSchema, this.tool, this.name, this.toolId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<UpdateToolCallBlockDtoMessagesItem>> messages = Optional.empty();

        private Optional<JsonSchema> inputSchema = Optional.empty();

        private Optional<JsonSchema> outputSchema = Optional.empty();

        private Optional<UpdateToolCallBlockDtoTool> tool = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> toolId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateToolCallBlockDto other) {
            messages(other.getMessages());
            inputSchema(other.getInputSchema());
            outputSchema(other.getOutputSchema());
            tool(other.getTool());
            name(other.getName());
            toolId(other.getToolId());
            return this;
        }

        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<UpdateToolCallBlockDtoMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<UpdateToolCallBlockDtoMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        @JsonSetter(value = "inputSchema", nulls = Nulls.SKIP)
        public Builder inputSchema(Optional<JsonSchema> inputSchema) {
            this.inputSchema = inputSchema;
            return this;
        }

        public Builder inputSchema(JsonSchema inputSchema) {
            this.inputSchema = Optional.ofNullable(inputSchema);
            return this;
        }

        @JsonSetter(value = "outputSchema", nulls = Nulls.SKIP)
        public Builder outputSchema(Optional<JsonSchema> outputSchema) {
            this.outputSchema = outputSchema;
            return this;
        }

        public Builder outputSchema(JsonSchema outputSchema) {
            this.outputSchema = Optional.ofNullable(outputSchema);
            return this;
        }

        @JsonSetter(value = "tool", nulls = Nulls.SKIP)
        public Builder tool(Optional<UpdateToolCallBlockDtoTool> tool) {
            this.tool = tool;
            return this;
        }

        public Builder tool(UpdateToolCallBlockDtoTool tool) {
            this.tool = Optional.ofNullable(tool);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "toolId", nulls = Nulls.SKIP)
        public Builder toolId(Optional<String> toolId) {
            this.toolId = toolId;
            return this;
        }

        public Builder toolId(String toolId) {
            this.toolId = Optional.ofNullable(toolId);
            return this;
        }

        public UpdateToolCallBlockDto build() {
            return new UpdateToolCallBlockDto(
                    messages, inputSchema, outputSchema, tool, name, toolId, additionalProperties);
        }
    }
}
