/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientMessageHang.Builder.class)
public final class ClientMessageHang {
    private final Map<String, Object> additionalProperties;

    private ClientMessageHang(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of the message. &quot;hang&quot; is sent when the assistant is hanging due to a delay. The delay can be caused by many factors, such as:
     * <ul>
     * <li>the model is too slow to respond</li>
     * <li>the voice is too slow to respond</li>
     * <li>the tool call is still waiting for a response from your server</li>
     * <li>etc.</li>
     * </ul>
     */
    @JsonProperty("type")
    public String getType() {
        return "hang";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientMessageHang;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClientMessageHang other) {
            return this;
        }

        public ClientMessageHang build() {
            return new ClientMessageHang(additionalProperties);
        }
    }
}
