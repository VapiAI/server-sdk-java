/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrgPlan.Builder.class)
public final class OrgPlan {
    private final Optional<List<Map<String, Object>>> includedProviders;

    private final Optional<Double> includedMinutes;

    private final Optional<Double> costPerOverageMinute;

    private final Map<String, Object> additionalProperties;

    private OrgPlan(
            Optional<List<Map<String, Object>>> includedProviders,
            Optional<Double> includedMinutes,
            Optional<Double> costPerOverageMinute,
            Map<String, Object> additionalProperties) {
        this.includedProviders = includedProviders;
        this.includedMinutes = includedMinutes;
        this.costPerOverageMinute = costPerOverageMinute;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("includedProviders")
    public Optional<List<Map<String, Object>>> getIncludedProviders() {
        return includedProviders;
    }

    @JsonProperty("includedMinutes")
    public Optional<Double> getIncludedMinutes() {
        return includedMinutes;
    }

    @JsonProperty("costPerOverageMinute")
    public Optional<Double> getCostPerOverageMinute() {
        return costPerOverageMinute;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrgPlan && equalTo((OrgPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrgPlan other) {
        return includedProviders.equals(other.includedProviders)
                && includedMinutes.equals(other.includedMinutes)
                && costPerOverageMinute.equals(other.costPerOverageMinute);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.includedProviders, this.includedMinutes, this.costPerOverageMinute);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Map<String, Object>>> includedProviders = Optional.empty();

        private Optional<Double> includedMinutes = Optional.empty();

        private Optional<Double> costPerOverageMinute = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrgPlan other) {
            includedProviders(other.getIncludedProviders());
            includedMinutes(other.getIncludedMinutes());
            costPerOverageMinute(other.getCostPerOverageMinute());
            return this;
        }

        @JsonSetter(value = "includedProviders", nulls = Nulls.SKIP)
        public Builder includedProviders(Optional<List<Map<String, Object>>> includedProviders) {
            this.includedProviders = includedProviders;
            return this;
        }

        public Builder includedProviders(List<Map<String, Object>> includedProviders) {
            this.includedProviders = Optional.ofNullable(includedProviders);
            return this;
        }

        @JsonSetter(value = "includedMinutes", nulls = Nulls.SKIP)
        public Builder includedMinutes(Optional<Double> includedMinutes) {
            this.includedMinutes = includedMinutes;
            return this;
        }

        public Builder includedMinutes(Double includedMinutes) {
            this.includedMinutes = Optional.ofNullable(includedMinutes);
            return this;
        }

        @JsonSetter(value = "costPerOverageMinute", nulls = Nulls.SKIP)
        public Builder costPerOverageMinute(Optional<Double> costPerOverageMinute) {
            this.costPerOverageMinute = costPerOverageMinute;
            return this;
        }

        public Builder costPerOverageMinute(Double costPerOverageMinute) {
            this.costPerOverageMinute = Optional.ofNullable(costPerOverageMinute);
            return this;
        }

        public OrgPlan build() {
            return new OrgPlan(includedProviders, includedMinutes, costPerOverageMinute, additionalProperties);
        }
    }
}
