/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientMessageToolCalls.Builder.class)
public final class ClientMessageToolCalls {
    private final Optional<String> type;

    private final List<ClientMessageToolCallsToolWithToolCallListItem> toolWithToolCallList;

    private final List<ToolCall> toolCallList;

    private final Map<String, Object> additionalProperties;

    private ClientMessageToolCalls(
            Optional<String> type,
            List<ClientMessageToolCallsToolWithToolCallListItem> toolWithToolCallList,
            List<ToolCall> toolCallList,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.toolWithToolCallList = toolWithToolCallList;
        this.toolCallList = toolCallList;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of the message. &quot;tool-calls&quot; is sent to call a tool.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return This is the list of tools calls that the model is requesting along with the original tool configuration.
     */
    @JsonProperty("toolWithToolCallList")
    public List<ClientMessageToolCallsToolWithToolCallListItem> getToolWithToolCallList() {
        return toolWithToolCallList;
    }

    /**
     * @return This is the list of tool calls that the model is requesting.
     */
    @JsonProperty("toolCallList")
    public List<ToolCall> getToolCallList() {
        return toolCallList;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientMessageToolCalls && equalTo((ClientMessageToolCalls) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientMessageToolCalls other) {
        return type.equals(other.type)
                && toolWithToolCallList.equals(other.toolWithToolCallList)
                && toolCallList.equals(other.toolCallList);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.toolWithToolCallList, this.toolCallList);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> type = Optional.empty();

        private List<ClientMessageToolCallsToolWithToolCallListItem> toolWithToolCallList = new ArrayList<>();

        private List<ToolCall> toolCallList = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClientMessageToolCalls other) {
            type(other.getType());
            toolWithToolCallList(other.getToolWithToolCallList());
            toolCallList(other.getToolCallList());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "toolWithToolCallList", nulls = Nulls.SKIP)
        public Builder toolWithToolCallList(List<ClientMessageToolCallsToolWithToolCallListItem> toolWithToolCallList) {
            this.toolWithToolCallList.clear();
            this.toolWithToolCallList.addAll(toolWithToolCallList);
            return this;
        }

        public Builder addToolWithToolCallList(ClientMessageToolCallsToolWithToolCallListItem toolWithToolCallList) {
            this.toolWithToolCallList.add(toolWithToolCallList);
            return this;
        }

        public Builder addAllToolWithToolCallList(
                List<ClientMessageToolCallsToolWithToolCallListItem> toolWithToolCallList) {
            this.toolWithToolCallList.addAll(toolWithToolCallList);
            return this;
        }

        @JsonSetter(value = "toolCallList", nulls = Nulls.SKIP)
        public Builder toolCallList(List<ToolCall> toolCallList) {
            this.toolCallList.clear();
            this.toolCallList.addAll(toolCallList);
            return this;
        }

        public Builder addToolCallList(ToolCall toolCallList) {
            this.toolCallList.add(toolCallList);
            return this;
        }

        public Builder addAllToolCallList(List<ToolCall> toolCallList) {
            this.toolCallList.addAll(toolCallList);
            return this;
        }

        public ClientMessageToolCalls build() {
            return new ClientMessageToolCalls(type, toolWithToolCallList, toolCallList, additionalProperties);
        }
    }
}
