/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientMessageWorkflowNodeStarted.Builder.class)
public final class ClientMessageWorkflowNodeStarted {
    private final Map<String, Object> node;

    private final Map<String, Object> additionalProperties;

    private ClientMessageWorkflowNodeStarted(Map<String, Object> node, Map<String, Object> additionalProperties) {
        this.node = node;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of the message. &quot;workflow.node.started&quot; is sent when the active node changes.
     */
    @JsonProperty("type")
    public String getType() {
        return "workflow.node.started";
    }

    /**
     * @return This is the active node.
     */
    @JsonProperty("node")
    public Map<String, Object> getNode() {
        return node;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientMessageWorkflowNodeStarted && equalTo((ClientMessageWorkflowNodeStarted) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientMessageWorkflowNodeStarted other) {
        return node.equals(other.node);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.node);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, Object> node = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClientMessageWorkflowNodeStarted other) {
            node(other.getNode());
            return this;
        }

        @JsonSetter(value = "node", nulls = Nulls.SKIP)
        public Builder node(Map<String, Object> node) {
            this.node.clear();
            this.node.putAll(node);
            return this;
        }

        public Builder putAllNode(Map<String, Object> node) {
            this.node.putAll(node);
            return this;
        }

        public Builder node(String key, Object value) {
            this.node.put(key, value);
            return this;
        }

        public ClientMessageWorkflowNodeStarted build() {
            return new ClientMessageWorkflowNodeStarted(node, additionalProperties);
        }
    }
}
