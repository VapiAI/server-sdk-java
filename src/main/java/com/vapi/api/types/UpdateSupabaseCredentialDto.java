/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateSupabaseCredentialDto.Builder.class)
public final class UpdateSupabaseCredentialDto {
    private final Optional<String> name;

    private final Optional<SupabaseBucketPlan> bucketPlan;

    private final Map<String, Object> additionalProperties;

    private UpdateSupabaseCredentialDto(
            Optional<String> name, Optional<SupabaseBucketPlan> bucketPlan, Map<String, Object> additionalProperties) {
        this.name = name;
        this.bucketPlan = bucketPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the name of credential. This is just for your reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("bucketPlan")
    public Optional<SupabaseBucketPlan> getBucketPlan() {
        return bucketPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateSupabaseCredentialDto && equalTo((UpdateSupabaseCredentialDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateSupabaseCredentialDto other) {
        return name.equals(other.name) && bucketPlan.equals(other.bucketPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.bucketPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<SupabaseBucketPlan> bucketPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateSupabaseCredentialDto other) {
            name(other.getName());
            bucketPlan(other.getBucketPlan());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "bucketPlan", nulls = Nulls.SKIP)
        public Builder bucketPlan(Optional<SupabaseBucketPlan> bucketPlan) {
            this.bucketPlan = bucketPlan;
            return this;
        }

        public Builder bucketPlan(SupabaseBucketPlan bucketPlan) {
            this.bucketPlan = Optional.ofNullable(bucketPlan);
            return this;
        }

        public UpdateSupabaseCredentialDto build() {
            return new UpdateSupabaseCredentialDto(name, bucketPlan, additionalProperties);
        }
    }
}
