/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolTemplateSetup.Builder.class)
public final class ToolTemplateSetup {
    private final String title;

    private final Optional<String> description;

    private final Optional<String> videoUrl;

    private final Optional<String> docsUrl;

    private final Map<String, Object> additionalProperties;

    private ToolTemplateSetup(
            String title,
            Optional<String> description,
            Optional<String> videoUrl,
            Optional<String> docsUrl,
            Map<String, Object> additionalProperties) {
        this.title = title;
        this.description = description;
        this.videoUrl = videoUrl;
        this.docsUrl = docsUrl;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("videoUrl")
    public Optional<String> getVideoUrl() {
        return videoUrl;
    }

    @JsonProperty("docsUrl")
    public Optional<String> getDocsUrl() {
        return docsUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolTemplateSetup && equalTo((ToolTemplateSetup) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolTemplateSetup other) {
        return title.equals(other.title)
                && description.equals(other.description)
                && videoUrl.equals(other.videoUrl)
                && docsUrl.equals(other.docsUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.title, this.description, this.videoUrl, this.docsUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TitleStage builder() {
        return new Builder();
    }

    public interface TitleStage {
        _FinalStage title(@NotNull String title);

        Builder from(ToolTemplateSetup other);
    }

    public interface _FinalStage {
        ToolTemplateSetup build();

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage videoUrl(Optional<String> videoUrl);

        _FinalStage videoUrl(String videoUrl);

        _FinalStage docsUrl(Optional<String> docsUrl);

        _FinalStage docsUrl(String docsUrl);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TitleStage, _FinalStage {
        private String title;

        private Optional<String> docsUrl = Optional.empty();

        private Optional<String> videoUrl = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ToolTemplateSetup other) {
            title(other.getTitle());
            description(other.getDescription());
            videoUrl(other.getVideoUrl());
            docsUrl(other.getDocsUrl());
            return this;
        }

        @java.lang.Override
        @JsonSetter("title")
        public _FinalStage title(@NotNull String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage docsUrl(String docsUrl) {
            this.docsUrl = Optional.ofNullable(docsUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "docsUrl", nulls = Nulls.SKIP)
        public _FinalStage docsUrl(Optional<String> docsUrl) {
            this.docsUrl = docsUrl;
            return this;
        }

        @java.lang.Override
        public _FinalStage videoUrl(String videoUrl) {
            this.videoUrl = Optional.ofNullable(videoUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "videoUrl", nulls = Nulls.SKIP)
        public _FinalStage videoUrl(Optional<String> videoUrl) {
            this.videoUrl = videoUrl;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public ToolTemplateSetup build() {
            return new ToolTemplateSetup(title, description, videoUrl, docsUrl, additionalProperties);
        }
    }
}
