/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JwtResponse.Builder.class)
public final class JwtResponse {
    private final String accessToken;

    private final Map<String, Object> aud;

    private final Map<String, Object> additionalProperties;

    private JwtResponse(String accessToken, Map<String, Object> aud, Map<String, Object> additionalProperties) {
        this.accessToken = accessToken;
        this.aud = aud;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accessToken")
    public String getAccessToken() {
        return accessToken;
    }

    @JsonProperty("aud")
    public Map<String, Object> getAud() {
        return aud;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JwtResponse && equalTo((JwtResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JwtResponse other) {
        return accessToken.equals(other.accessToken) && aud.equals(other.aud);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accessToken, this.aud);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccessTokenStage builder() {
        return new Builder();
    }

    public interface AccessTokenStage {
        _FinalStage accessToken(@NotNull String accessToken);

        Builder from(JwtResponse other);
    }

    public interface _FinalStage {
        JwtResponse build();

        _FinalStage aud(Map<String, Object> aud);

        _FinalStage putAllAud(Map<String, Object> aud);

        _FinalStage aud(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccessTokenStage, _FinalStage {
        private String accessToken;

        private Map<String, Object> aud = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(JwtResponse other) {
            accessToken(other.getAccessToken());
            aud(other.getAud());
            return this;
        }

        @java.lang.Override
        @JsonSetter("accessToken")
        public _FinalStage accessToken(@NotNull String accessToken) {
            this.accessToken = Objects.requireNonNull(accessToken, "accessToken must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage aud(String key, Object value) {
            this.aud.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllAud(Map<String, Object> aud) {
            this.aud.putAll(aud);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "aud", nulls = Nulls.SKIP)
        public _FinalStage aud(Map<String, Object> aud) {
            this.aud.clear();
            this.aud.putAll(aud);
            return this;
        }

        @java.lang.Override
        public JwtResponse build() {
            return new JwtResponse(accessToken, aud, additionalProperties);
        }
    }
}
