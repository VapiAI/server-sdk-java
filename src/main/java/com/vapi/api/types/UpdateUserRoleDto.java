/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateUserRoleDto.Builder.class)
public final class UpdateUserRoleDto {
    private final String userId;

    private final UpdateUserRoleDtoRole role;

    private final Map<String, Object> additionalProperties;

    private UpdateUserRoleDto(String userId, UpdateUserRoleDtoRole role, Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.role = role;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("userId")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("role")
    public UpdateUserRoleDtoRole getRole() {
        return role;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateUserRoleDto && equalTo((UpdateUserRoleDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateUserRoleDto other) {
        return userId.equals(other.userId) && role.equals(other.role);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userId, this.role);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        RoleStage userId(@NotNull String userId);

        Builder from(UpdateUserRoleDto other);
    }

    public interface RoleStage {
        _FinalStage role(@NotNull UpdateUserRoleDtoRole role);
    }

    public interface _FinalStage {
        UpdateUserRoleDto build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserIdStage, RoleStage, _FinalStage {
        private String userId;

        private UpdateUserRoleDtoRole role;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateUserRoleDto other) {
            userId(other.getUserId());
            role(other.getRole());
            return this;
        }

        @java.lang.Override
        @JsonSetter("userId")
        public RoleStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("role")
        public _FinalStage role(@NotNull UpdateUserRoleDtoRole role) {
            this.role = Objects.requireNonNull(role, "role must not be null");
            return this;
        }

        @java.lang.Override
        public UpdateUserRoleDto build() {
            return new UpdateUserRoleDto(userId, role, additionalProperties);
        }
    }
}
