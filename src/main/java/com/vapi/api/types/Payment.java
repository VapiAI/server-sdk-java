/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Payment.Builder.class)
public final class Payment {
    private final String id;

    private final Optional<String> orgId;

    private final String cost;

    private final List<Map<String, Object>> costs;

    private final PaymentStatus status;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final boolean isAutoReload;

    private final String subscriptionId;

    private final Optional<String> callId;

    private final Optional<String> phoneNumberId;

    private final Optional<String> stripePaymentIntentId;

    private final Optional<String> stripeInvoiceId;

    private final Map<String, Object> additionalProperties;

    private Payment(
            String id,
            Optional<String> orgId,
            String cost,
            List<Map<String, Object>> costs,
            PaymentStatus status,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            boolean isAutoReload,
            String subscriptionId,
            Optional<String> callId,
            Optional<String> phoneNumberId,
            Optional<String> stripePaymentIntentId,
            Optional<String> stripeInvoiceId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.orgId = orgId;
        this.cost = cost;
        this.costs = costs;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.isAutoReload = isAutoReload;
        this.subscriptionId = subscriptionId;
        this.callId = callId;
        this.phoneNumberId = phoneNumberId;
        this.stripePaymentIntentId = stripePaymentIntentId;
        this.stripeInvoiceId = stripeInvoiceId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the id of the payment
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the id of the org
     */
    @JsonProperty("orgId")
    public Optional<String> getOrgId() {
        return orgId;
    }

    /**
     * @return This is the total cost of the payment, which is the sum of all the costs in the costs object.
     * <p>Note: this is a string to avoid floating point precision issues.</p>
     */
    @JsonProperty("cost")
    public String getCost() {
        return cost;
    }

    /**
     * @return This is the itemized breakdown of payment amounts
     */
    @JsonProperty("costs")
    public List<Map<String, Object>> getCosts() {
        return costs;
    }

    /**
     * @return This is the status of the payment
     */
    @JsonProperty("status")
    public PaymentStatus getStatus() {
        return status;
    }

    /**
     * @return This is the timestamp when the payment was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the timestamp when the payment was last updated
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This indicates if this payment was automatically generated by the auto-reload feature
     */
    @JsonProperty("isAutoReload")
    public boolean getIsAutoReload() {
        return isAutoReload;
    }

    /**
     * @return This is the id of the subscription the payment belongs to
     */
    @JsonProperty("subscriptionId")
    public String getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return This is the id of the call
     */
    @JsonProperty("callId")
    public Optional<String> getCallId() {
        return callId;
    }

    /**
     * @return This is the id of the purchased phone number
     */
    @JsonProperty("phoneNumberId")
    public Optional<String> getPhoneNumberId() {
        return phoneNumberId;
    }

    /**
     * @return This is the id of the associated stripe payment intent
     */
    @JsonProperty("stripePaymentIntentId")
    public Optional<String> getStripePaymentIntentId() {
        return stripePaymentIntentId;
    }

    /**
     * @return This is the id of the associated stripe invoice
     */
    @JsonProperty("stripeInvoiceId")
    public Optional<String> getStripeInvoiceId() {
        return stripeInvoiceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Payment && equalTo((Payment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Payment other) {
        return id.equals(other.id)
                && orgId.equals(other.orgId)
                && cost.equals(other.cost)
                && costs.equals(other.costs)
                && status.equals(other.status)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && isAutoReload == other.isAutoReload
                && subscriptionId.equals(other.subscriptionId)
                && callId.equals(other.callId)
                && phoneNumberId.equals(other.phoneNumberId)
                && stripePaymentIntentId.equals(other.stripePaymentIntentId)
                && stripeInvoiceId.equals(other.stripeInvoiceId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.orgId,
                this.cost,
                this.costs,
                this.status,
                this.createdAt,
                this.updatedAt,
                this.isAutoReload,
                this.subscriptionId,
                this.callId,
                this.phoneNumberId,
                this.stripePaymentIntentId,
                this.stripeInvoiceId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        CostStage id(@NotNull String id);

        Builder from(Payment other);
    }

    public interface CostStage {
        StatusStage cost(@NotNull String cost);
    }

    public interface StatusStage {
        CreatedAtStage status(@NotNull PaymentStatus status);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        IsAutoReloadStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface IsAutoReloadStage {
        SubscriptionIdStage isAutoReload(boolean isAutoReload);
    }

    public interface SubscriptionIdStage {
        _FinalStage subscriptionId(@NotNull String subscriptionId);
    }

    public interface _FinalStage {
        Payment build();

        _FinalStage orgId(Optional<String> orgId);

        _FinalStage orgId(String orgId);

        _FinalStage costs(List<Map<String, Object>> costs);

        _FinalStage addCosts(Map<String, Object> costs);

        _FinalStage addAllCosts(List<Map<String, Object>> costs);

        _FinalStage callId(Optional<String> callId);

        _FinalStage callId(String callId);

        _FinalStage phoneNumberId(Optional<String> phoneNumberId);

        _FinalStage phoneNumberId(String phoneNumberId);

        _FinalStage stripePaymentIntentId(Optional<String> stripePaymentIntentId);

        _FinalStage stripePaymentIntentId(String stripePaymentIntentId);

        _FinalStage stripeInvoiceId(Optional<String> stripeInvoiceId);

        _FinalStage stripeInvoiceId(String stripeInvoiceId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    CostStage,
                    StatusStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    IsAutoReloadStage,
                    SubscriptionIdStage,
                    _FinalStage {
        private String id;

        private String cost;

        private PaymentStatus status;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private boolean isAutoReload;

        private String subscriptionId;

        private Optional<String> stripeInvoiceId = Optional.empty();

        private Optional<String> stripePaymentIntentId = Optional.empty();

        private Optional<String> phoneNumberId = Optional.empty();

        private Optional<String> callId = Optional.empty();

        private List<Map<String, Object>> costs = new ArrayList<>();

        private Optional<String> orgId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Payment other) {
            id(other.getId());
            orgId(other.getOrgId());
            cost(other.getCost());
            costs(other.getCosts());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            isAutoReload(other.getIsAutoReload());
            subscriptionId(other.getSubscriptionId());
            callId(other.getCallId());
            phoneNumberId(other.getPhoneNumberId());
            stripePaymentIntentId(other.getStripePaymentIntentId());
            stripeInvoiceId(other.getStripeInvoiceId());
            return this;
        }

        /**
         * <p>This is the id of the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public CostStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the total cost of the payment, which is the sum of all the costs in the costs object.</p>
         * <p>Note: this is a string to avoid floating point precision issues.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cost")
        public StatusStage cost(@NotNull String cost) {
            this.cost = Objects.requireNonNull(cost, "cost must not be null");
            return this;
        }

        /**
         * <p>This is the status of the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public CreatedAtStage status(@NotNull PaymentStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>This is the timestamp when the payment was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the timestamp when the payment was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public IsAutoReloadStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This indicates if this payment was automatically generated by the auto-reload feature</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isAutoReload")
        public SubscriptionIdStage isAutoReload(boolean isAutoReload) {
            this.isAutoReload = isAutoReload;
            return this;
        }

        /**
         * <p>This is the id of the subscription the payment belongs to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subscriptionId")
        public _FinalStage subscriptionId(@NotNull String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId, "subscriptionId must not be null");
            return this;
        }

        /**
         * <p>This is the id of the associated stripe invoice</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeInvoiceId(String stripeInvoiceId) {
            this.stripeInvoiceId = Optional.ofNullable(stripeInvoiceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeInvoiceId", nulls = Nulls.SKIP)
        public _FinalStage stripeInvoiceId(Optional<String> stripeInvoiceId) {
            this.stripeInvoiceId = stripeInvoiceId;
            return this;
        }

        /**
         * <p>This is the id of the associated stripe payment intent</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripePaymentIntentId(String stripePaymentIntentId) {
            this.stripePaymentIntentId = Optional.ofNullable(stripePaymentIntentId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripePaymentIntentId", nulls = Nulls.SKIP)
        public _FinalStage stripePaymentIntentId(Optional<String> stripePaymentIntentId) {
            this.stripePaymentIntentId = stripePaymentIntentId;
            return this;
        }

        /**
         * <p>This is the id of the purchased phone number</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumberId(String phoneNumberId) {
            this.phoneNumberId = Optional.ofNullable(phoneNumberId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phoneNumberId", nulls = Nulls.SKIP)
        public _FinalStage phoneNumberId(Optional<String> phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        /**
         * <p>This is the id of the call</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage callId(String callId) {
            this.callId = Optional.ofNullable(callId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "callId", nulls = Nulls.SKIP)
        public _FinalStage callId(Optional<String> callId) {
            this.callId = callId;
            return this;
        }

        /**
         * <p>This is the itemized breakdown of payment amounts</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllCosts(List<Map<String, Object>> costs) {
            this.costs.addAll(costs);
            return this;
        }

        /**
         * <p>This is the itemized breakdown of payment amounts</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addCosts(Map<String, Object> costs) {
            this.costs.add(costs);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "costs", nulls = Nulls.SKIP)
        public _FinalStage costs(List<Map<String, Object>> costs) {
            this.costs.clear();
            this.costs.addAll(costs);
            return this;
        }

        /**
         * <p>This is the id of the org</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orgId(String orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orgId", nulls = Nulls.SKIP)
        public _FinalStage orgId(Optional<String> orgId) {
            this.orgId = orgId;
            return this;
        }

        @java.lang.Override
        public Payment build() {
            return new Payment(
                    id,
                    orgId,
                    cost,
                    costs,
                    status,
                    createdAt,
                    updatedAt,
                    isAutoReload,
                    subscriptionId,
                    callId,
                    phoneNumberId,
                    stripePaymentIntentId,
                    stripeInvoiceId,
                    additionalProperties);
        }
    }
}
