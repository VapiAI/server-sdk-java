/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Org.Builder.class)
public final class Org {
    private final Optional<Boolean> hipaaEnabled;

    private final Optional<Subscription> subscription;

    private final Optional<String> subscriptionId;

    private final String id;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<String> stripeCustomerId;

    private final Optional<String> stripeSubscriptionId;

    private final Optional<String> stripeSubscriptionItemId;

    private final Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart;

    private final Optional<String> stripeSubscriptionStatus;

    private final Optional<OrgPlan> plan;

    private final Optional<String> name;

    private final Optional<OrgChannel> channel;

    private final Optional<Double> billingLimit;

    private final Optional<String> serverUrl;

    private final Optional<String> serverUrlSecret;

    private final Optional<Double> concurrencyLimit;

    private final Map<String, Object> additionalProperties;

    private Org(
            Optional<Boolean> hipaaEnabled,
            Optional<Subscription> subscription,
            Optional<String> subscriptionId,
            String id,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<String> stripeCustomerId,
            Optional<String> stripeSubscriptionId,
            Optional<String> stripeSubscriptionItemId,
            Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart,
            Optional<String> stripeSubscriptionStatus,
            Optional<OrgPlan> plan,
            Optional<String> name,
            Optional<OrgChannel> channel,
            Optional<Double> billingLimit,
            Optional<String> serverUrl,
            Optional<String> serverUrlSecret,
            Optional<Double> concurrencyLimit,
            Map<String, Object> additionalProperties) {
        this.hipaaEnabled = hipaaEnabled;
        this.subscription = subscription;
        this.subscriptionId = subscriptionId;
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.stripeCustomerId = stripeCustomerId;
        this.stripeSubscriptionId = stripeSubscriptionId;
        this.stripeSubscriptionItemId = stripeSubscriptionItemId;
        this.stripeSubscriptionCurrentPeriodStart = stripeSubscriptionCurrentPeriodStart;
        this.stripeSubscriptionStatus = stripeSubscriptionStatus;
        this.plan = plan;
        this.name = name;
        this.channel = channel;
        this.billingLimit = billingLimit;
        this.serverUrl = serverUrl;
        this.serverUrlSecret = serverUrlSecret;
        this.concurrencyLimit = concurrencyLimit;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
     * When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.
     * This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.
     */
    @JsonProperty("hipaaEnabled")
    public Optional<Boolean> getHipaaEnabled() {
        return hipaaEnabled;
    }

    @JsonProperty("subscription")
    public Optional<Subscription> getSubscription() {
        return subscription;
    }

    /**
     * @return This is the ID of the subscription the org belongs to.
     */
    @JsonProperty("subscriptionId")
    public Optional<String> getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return This is the unique identifier for the org.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the org was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the org was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is the Stripe customer for the org.
     */
    @JsonProperty("stripeCustomerId")
    public Optional<String> getStripeCustomerId() {
        return stripeCustomerId;
    }

    /**
     * @return This is the subscription for the org.
     */
    @JsonProperty("stripeSubscriptionId")
    public Optional<String> getStripeSubscriptionId() {
        return stripeSubscriptionId;
    }

    /**
     * @return This is the subscription's subscription item.
     */
    @JsonProperty("stripeSubscriptionItemId")
    public Optional<String> getStripeSubscriptionItemId() {
        return stripeSubscriptionItemId;
    }

    /**
     * @return This is the subscription's current period start.
     */
    @JsonProperty("stripeSubscriptionCurrentPeriodStart")
    public Optional<OffsetDateTime> getStripeSubscriptionCurrentPeriodStart() {
        return stripeSubscriptionCurrentPeriodStart;
    }

    /**
     * @return This is the subscription's status.
     */
    @JsonProperty("stripeSubscriptionStatus")
    public Optional<String> getStripeSubscriptionStatus() {
        return stripeSubscriptionStatus;
    }

    /**
     * @return This is the plan for the org.
     */
    @JsonProperty("plan")
    public Optional<OrgPlan> getPlan() {
        return plan;
    }

    /**
     * @return This is the name of the org. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the channel of the org. There is the cluster the API traffic for the org will be directed.
     */
    @JsonProperty("channel")
    public Optional<OrgChannel> getChannel() {
        return channel;
    }

    /**
     * @return This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.
     */
    @JsonProperty("billingLimit")
    public Optional<Double> getBillingLimit() {
        return billingLimit;
    }

    /**
     * @return This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.
     * <p>All requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.</p>
     */
    @JsonProperty("serverUrl")
    public Optional<String> getServerUrl() {
        return serverUrl;
    }

    /**
     * @return This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.
     */
    @JsonProperty("serverUrlSecret")
    public Optional<String> getServerUrlSecret() {
        return serverUrlSecret;
    }

    /**
     * @return This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.
     */
    @JsonProperty("concurrencyLimit")
    public Optional<Double> getConcurrencyLimit() {
        return concurrencyLimit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Org && equalTo((Org) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Org other) {
        return hipaaEnabled.equals(other.hipaaEnabled)
                && subscription.equals(other.subscription)
                && subscriptionId.equals(other.subscriptionId)
                && id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && stripeCustomerId.equals(other.stripeCustomerId)
                && stripeSubscriptionId.equals(other.stripeSubscriptionId)
                && stripeSubscriptionItemId.equals(other.stripeSubscriptionItemId)
                && stripeSubscriptionCurrentPeriodStart.equals(other.stripeSubscriptionCurrentPeriodStart)
                && stripeSubscriptionStatus.equals(other.stripeSubscriptionStatus)
                && plan.equals(other.plan)
                && name.equals(other.name)
                && channel.equals(other.channel)
                && billingLimit.equals(other.billingLimit)
                && serverUrl.equals(other.serverUrl)
                && serverUrlSecret.equals(other.serverUrlSecret)
                && concurrencyLimit.equals(other.concurrencyLimit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.hipaaEnabled,
                this.subscription,
                this.subscriptionId,
                this.id,
                this.createdAt,
                this.updatedAt,
                this.stripeCustomerId,
                this.stripeSubscriptionId,
                this.stripeSubscriptionItemId,
                this.stripeSubscriptionCurrentPeriodStart,
                this.stripeSubscriptionStatus,
                this.plan,
                this.name,
                this.channel,
                this.billingLimit,
                this.serverUrl,
                this.serverUrlSecret,
                this.concurrencyLimit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        CreatedAtStage id(@NotNull String id);

        Builder from(Org other);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Org build();

        _FinalStage hipaaEnabled(Optional<Boolean> hipaaEnabled);

        _FinalStage hipaaEnabled(Boolean hipaaEnabled);

        _FinalStage subscription(Optional<Subscription> subscription);

        _FinalStage subscription(Subscription subscription);

        _FinalStage subscriptionId(Optional<String> subscriptionId);

        _FinalStage subscriptionId(String subscriptionId);

        _FinalStage stripeCustomerId(Optional<String> stripeCustomerId);

        _FinalStage stripeCustomerId(String stripeCustomerId);

        _FinalStage stripeSubscriptionId(Optional<String> stripeSubscriptionId);

        _FinalStage stripeSubscriptionId(String stripeSubscriptionId);

        _FinalStage stripeSubscriptionItemId(Optional<String> stripeSubscriptionItemId);

        _FinalStage stripeSubscriptionItemId(String stripeSubscriptionItemId);

        _FinalStage stripeSubscriptionCurrentPeriodStart(Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart);

        _FinalStage stripeSubscriptionCurrentPeriodStart(OffsetDateTime stripeSubscriptionCurrentPeriodStart);

        _FinalStage stripeSubscriptionStatus(Optional<String> stripeSubscriptionStatus);

        _FinalStage stripeSubscriptionStatus(String stripeSubscriptionStatus);

        _FinalStage plan(Optional<OrgPlan> plan);

        _FinalStage plan(OrgPlan plan);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage channel(Optional<OrgChannel> channel);

        _FinalStage channel(OrgChannel channel);

        _FinalStage billingLimit(Optional<Double> billingLimit);

        _FinalStage billingLimit(Double billingLimit);

        _FinalStage serverUrl(Optional<String> serverUrl);

        _FinalStage serverUrl(String serverUrl);

        _FinalStage serverUrlSecret(Optional<String> serverUrlSecret);

        _FinalStage serverUrlSecret(String serverUrlSecret);

        _FinalStage concurrencyLimit(Optional<Double> concurrencyLimit);

        _FinalStage concurrencyLimit(Double concurrencyLimit);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<Double> concurrencyLimit = Optional.empty();

        private Optional<String> serverUrlSecret = Optional.empty();

        private Optional<String> serverUrl = Optional.empty();

        private Optional<Double> billingLimit = Optional.empty();

        private Optional<OrgChannel> channel = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<OrgPlan> plan = Optional.empty();

        private Optional<String> stripeSubscriptionStatus = Optional.empty();

        private Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart = Optional.empty();

        private Optional<String> stripeSubscriptionItemId = Optional.empty();

        private Optional<String> stripeSubscriptionId = Optional.empty();

        private Optional<String> stripeCustomerId = Optional.empty();

        private Optional<String> subscriptionId = Optional.empty();

        private Optional<Subscription> subscription = Optional.empty();

        private Optional<Boolean> hipaaEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Org other) {
            hipaaEnabled(other.getHipaaEnabled());
            subscription(other.getSubscription());
            subscriptionId(other.getSubscriptionId());
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            stripeCustomerId(other.getStripeCustomerId());
            stripeSubscriptionId(other.getStripeSubscriptionId());
            stripeSubscriptionItemId(other.getStripeSubscriptionItemId());
            stripeSubscriptionCurrentPeriodStart(other.getStripeSubscriptionCurrentPeriodStart());
            stripeSubscriptionStatus(other.getStripeSubscriptionStatus());
            plan(other.getPlan());
            name(other.getName());
            channel(other.getChannel());
            billingLimit(other.getBillingLimit());
            serverUrl(other.getServerUrl());
            serverUrlSecret(other.getServerUrlSecret());
            concurrencyLimit(other.getConcurrencyLimit());
            return this;
        }

        /**
         * <p>This is the unique identifier for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public CreatedAtStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the org was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the org was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage concurrencyLimit(Double concurrencyLimit) {
            this.concurrencyLimit = Optional.ofNullable(concurrencyLimit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "concurrencyLimit", nulls = Nulls.SKIP)
        public _FinalStage concurrencyLimit(Optional<Double> concurrencyLimit) {
            this.concurrencyLimit = concurrencyLimit;
            return this;
        }

        /**
         * <p>This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serverUrlSecret(String serverUrlSecret) {
            this.serverUrlSecret = Optional.ofNullable(serverUrlSecret);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serverUrlSecret", nulls = Nulls.SKIP)
        public _FinalStage serverUrlSecret(Optional<String> serverUrlSecret) {
            this.serverUrlSecret = serverUrlSecret;
            return this;
        }

        /**
         * <p>This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.</p>
         * <p>All requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serverUrl(String serverUrl) {
            this.serverUrl = Optional.ofNullable(serverUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serverUrl", nulls = Nulls.SKIP)
        public _FinalStage serverUrl(Optional<String> serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * <p>This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage billingLimit(Double billingLimit) {
            this.billingLimit = Optional.ofNullable(billingLimit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billingLimit", nulls = Nulls.SKIP)
        public _FinalStage billingLimit(Optional<Double> billingLimit) {
            this.billingLimit = billingLimit;
            return this;
        }

        /**
         * <p>This is the channel of the org. There is the cluster the API traffic for the org will be directed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage channel(OrgChannel channel) {
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "channel", nulls = Nulls.SKIP)
        public _FinalStage channel(Optional<OrgChannel> channel) {
            this.channel = channel;
            return this;
        }

        /**
         * <p>This is the name of the org. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This is the plan for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage plan(OrgPlan plan) {
            this.plan = Optional.ofNullable(plan);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "plan", nulls = Nulls.SKIP)
        public _FinalStage plan(Optional<OrgPlan> plan) {
            this.plan = plan;
            return this;
        }

        /**
         * <p>This is the subscription's status.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeSubscriptionStatus(String stripeSubscriptionStatus) {
            this.stripeSubscriptionStatus = Optional.ofNullable(stripeSubscriptionStatus);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeSubscriptionStatus", nulls = Nulls.SKIP)
        public _FinalStage stripeSubscriptionStatus(Optional<String> stripeSubscriptionStatus) {
            this.stripeSubscriptionStatus = stripeSubscriptionStatus;
            return this;
        }

        /**
         * <p>This is the subscription's current period start.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeSubscriptionCurrentPeriodStart(OffsetDateTime stripeSubscriptionCurrentPeriodStart) {
            this.stripeSubscriptionCurrentPeriodStart = Optional.ofNullable(stripeSubscriptionCurrentPeriodStart);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeSubscriptionCurrentPeriodStart", nulls = Nulls.SKIP)
        public _FinalStage stripeSubscriptionCurrentPeriodStart(
                Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart) {
            this.stripeSubscriptionCurrentPeriodStart = stripeSubscriptionCurrentPeriodStart;
            return this;
        }

        /**
         * <p>This is the subscription's subscription item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeSubscriptionItemId(String stripeSubscriptionItemId) {
            this.stripeSubscriptionItemId = Optional.ofNullable(stripeSubscriptionItemId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeSubscriptionItemId", nulls = Nulls.SKIP)
        public _FinalStage stripeSubscriptionItemId(Optional<String> stripeSubscriptionItemId) {
            this.stripeSubscriptionItemId = stripeSubscriptionItemId;
            return this;
        }

        /**
         * <p>This is the subscription for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeSubscriptionId(String stripeSubscriptionId) {
            this.stripeSubscriptionId = Optional.ofNullable(stripeSubscriptionId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeSubscriptionId", nulls = Nulls.SKIP)
        public _FinalStage stripeSubscriptionId(Optional<String> stripeSubscriptionId) {
            this.stripeSubscriptionId = stripeSubscriptionId;
            return this;
        }

        /**
         * <p>This is the Stripe customer for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeCustomerId(String stripeCustomerId) {
            this.stripeCustomerId = Optional.ofNullable(stripeCustomerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "stripeCustomerId", nulls = Nulls.SKIP)
        public _FinalStage stripeCustomerId(Optional<String> stripeCustomerId) {
            this.stripeCustomerId = stripeCustomerId;
            return this;
        }

        /**
         * <p>This is the ID of the subscription the org belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage subscriptionId(String subscriptionId) {
            this.subscriptionId = Optional.ofNullable(subscriptionId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subscriptionId", nulls = Nulls.SKIP)
        public _FinalStage subscriptionId(Optional<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        @java.lang.Override
        public _FinalStage subscription(Subscription subscription) {
            this.subscription = Optional.ofNullable(subscription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subscription", nulls = Nulls.SKIP)
        public _FinalStage subscription(Optional<Subscription> subscription) {
            this.subscription = subscription;
            return this;
        }

        /**
         * <p>When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
         * When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.
         * This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hipaaEnabled(Boolean hipaaEnabled) {
            this.hipaaEnabled = Optional.ofNullable(hipaaEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hipaaEnabled", nulls = Nulls.SKIP)
        public _FinalStage hipaaEnabled(Optional<Boolean> hipaaEnabled) {
            this.hipaaEnabled = hipaaEnabled;
            return this;
        }

        @java.lang.Override
        public Org build() {
            return new Org(
                    hipaaEnabled,
                    subscription,
                    subscriptionId,
                    id,
                    createdAt,
                    updatedAt,
                    stripeCustomerId,
                    stripeSubscriptionId,
                    stripeSubscriptionItemId,
                    stripeSubscriptionCurrentPeriodStart,
                    stripeSubscriptionStatus,
                    plan,
                    name,
                    channel,
                    billingLimit,
                    serverUrl,
                    serverUrlSecret,
                    concurrencyLimit,
                    additionalProperties);
        }
    }
}
