/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolCallBlock.Builder.class)
public final class ToolCallBlock {
    private final Optional<List<ToolCallBlockMessagesItem>> messages;

    private final Optional<JsonSchema> inputSchema;

    private final Optional<JsonSchema> outputSchema;

    private final Optional<ToolCallBlockTool> tool;

    private final String id;

    private final String orgId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<String> name;

    private final Optional<String> toolId;

    private final Map<String, Object> additionalProperties;

    private ToolCallBlock(
            Optional<List<ToolCallBlockMessagesItem>> messages,
            Optional<JsonSchema> inputSchema,
            Optional<JsonSchema> outputSchema,
            Optional<ToolCallBlockTool> tool,
            String id,
            String orgId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<String> name,
            Optional<String> toolId,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.inputSchema = inputSchema;
        this.outputSchema = outputSchema;
        this.tool = tool;
        this.id = id;
        this.orgId = orgId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = name;
        this.toolId = toolId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the pre-configured messages that will be spoken to the user while the block is running.
     */
    @JsonProperty("messages")
    public Optional<List<ToolCallBlockMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return This is the input schema for the block. This is the input the block needs to run. It's given to the block as <code>steps[0].input</code>
     * <p>These are accessible as variables:</p>
     * <ul>
     * <li>({{input.propertyName}}) in context of the block execution (step)</li>
     * <li>({{stepName.input.propertyName}}) in context of the workflow</li>
     * </ul>
     */
    @JsonProperty("inputSchema")
    public Optional<JsonSchema> getInputSchema() {
        return inputSchema;
    }

    /**
     * @return This is the output schema for the block. This is the output the block will return to the workflow (<code>{{stepName.output}}</code>).
     * <p>These are accessible as variables:</p>
     * <ul>
     * <li>({{output.propertyName}}) in context of the block execution (step)</li>
     * <li>({{stepName.output.propertyName}}) in context of the workflow (read caveat #1)</li>
     * <li>({{blockName.output.propertyName}}) in context of the workflow (read caveat #2)</li>
     * </ul>
     * <p>Caveats:</p>
     * <ol>
     * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
     * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
     * </ol>
     */
    @JsonProperty("outputSchema")
    public Optional<JsonSchema> getOutputSchema() {
        return outputSchema;
    }

    /**
     * @return This is the tool that the block will call. To use an existing tool, use <code>toolId</code>.
     */
    @JsonProperty("tool")
    public Optional<ToolCallBlockTool> getTool() {
        return tool;
    }

    /**
     * @return This is the unique identifier for the block.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the organization that this block belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the block was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the block was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is the name of the block. This is just for your reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the id of the tool that the block will call. To use a transient tool, use <code>tool</code>.
     */
    @JsonProperty("toolId")
    public Optional<String> getToolId() {
        return toolId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolCallBlock && equalTo((ToolCallBlock) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolCallBlock other) {
        return messages.equals(other.messages)
                && inputSchema.equals(other.inputSchema)
                && outputSchema.equals(other.outputSchema)
                && tool.equals(other.tool)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && name.equals(other.name)
                && toolId.equals(other.toolId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.messages,
                this.inputSchema,
                this.outputSchema,
                this.tool,
                this.id,
                this.orgId,
                this.createdAt,
                this.updatedAt,
                this.name,
                this.toolId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        OrgIdStage id(@NotNull String id);

        Builder from(ToolCallBlock other);
    }

    public interface OrgIdStage {
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ToolCallBlock build();

        _FinalStage messages(Optional<List<ToolCallBlockMessagesItem>> messages);

        _FinalStage messages(List<ToolCallBlockMessagesItem> messages);

        _FinalStage inputSchema(Optional<JsonSchema> inputSchema);

        _FinalStage inputSchema(JsonSchema inputSchema);

        _FinalStage outputSchema(Optional<JsonSchema> outputSchema);

        _FinalStage outputSchema(JsonSchema outputSchema);

        _FinalStage tool(Optional<ToolCallBlockTool> tool);

        _FinalStage tool(ToolCallBlockTool tool);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage toolId(Optional<String> toolId);

        _FinalStage toolId(String toolId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, OrgIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<String> toolId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<ToolCallBlockTool> tool = Optional.empty();

        private Optional<JsonSchema> outputSchema = Optional.empty();

        private Optional<JsonSchema> inputSchema = Optional.empty();

        private Optional<List<ToolCallBlockMessagesItem>> messages = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ToolCallBlock other) {
            messages(other.getMessages());
            inputSchema(other.getInputSchema());
            outputSchema(other.getOutputSchema());
            tool(other.getTool());
            id(other.getId());
            orgId(other.getOrgId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            name(other.getName());
            toolId(other.getToolId());
            return this;
        }

        /**
         * <p>This is the unique identifier for the block.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the organization that this block belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the block was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the block was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the id of the tool that the block will call. To use a transient tool, use <code>tool</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage toolId(String toolId) {
            this.toolId = Optional.ofNullable(toolId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "toolId", nulls = Nulls.SKIP)
        public _FinalStage toolId(Optional<String> toolId) {
            this.toolId = toolId;
            return this;
        }

        /**
         * <p>This is the name of the block. This is just for your reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This is the tool that the block will call. To use an existing tool, use <code>toolId</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tool(ToolCallBlockTool tool) {
            this.tool = Optional.ofNullable(tool);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tool", nulls = Nulls.SKIP)
        public _FinalStage tool(Optional<ToolCallBlockTool> tool) {
            this.tool = tool;
            return this;
        }

        /**
         * <p>This is the output schema for the block. This is the output the block will return to the workflow (<code>{{stepName.output}}</code>).</p>
         * <p>These are accessible as variables:</p>
         * <ul>
         * <li>({{output.propertyName}}) in context of the block execution (step)</li>
         * <li>({{stepName.output.propertyName}}) in context of the workflow (read caveat #1)</li>
         * <li>({{blockName.output.propertyName}}) in context of the workflow (read caveat #2)</li>
         * </ul>
         * <p>Caveats:</p>
         * <ol>
         * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
         * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage outputSchema(JsonSchema outputSchema) {
            this.outputSchema = Optional.ofNullable(outputSchema);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "outputSchema", nulls = Nulls.SKIP)
        public _FinalStage outputSchema(Optional<JsonSchema> outputSchema) {
            this.outputSchema = outputSchema;
            return this;
        }

        /**
         * <p>This is the input schema for the block. This is the input the block needs to run. It's given to the block as <code>steps[0].input</code></p>
         * <p>These are accessible as variables:</p>
         * <ul>
         * <li>({{input.propertyName}}) in context of the block execution (step)</li>
         * <li>({{stepName.input.propertyName}}) in context of the workflow</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage inputSchema(JsonSchema inputSchema) {
            this.inputSchema = Optional.ofNullable(inputSchema);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "inputSchema", nulls = Nulls.SKIP)
        public _FinalStage inputSchema(Optional<JsonSchema> inputSchema) {
            this.inputSchema = inputSchema;
            return this;
        }

        /**
         * <p>These are the pre-configured messages that will be spoken to the user while the block is running.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<ToolCallBlockMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<ToolCallBlockMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        @java.lang.Override
        public ToolCallBlock build() {
            return new ToolCallBlock(
                    messages,
                    inputSchema,
                    outputSchema,
                    tool,
                    id,
                    orgId,
                    createdAt,
                    updatedAt,
                    name,
                    toolId,
                    additionalProperties);
        }
    }
}
