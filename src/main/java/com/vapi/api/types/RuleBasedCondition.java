/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RuleBasedCondition.Builder.class)
public final class RuleBasedCondition {
    private final RuleBasedConditionOperator operator;

    private final String leftSide;

    private final String rightSide;

    private final Map<String, Object> additionalProperties;

    private RuleBasedCondition(
            RuleBasedConditionOperator operator,
            String leftSide,
            String rightSide,
            Map<String, Object> additionalProperties) {
        this.operator = operator;
        this.leftSide = leftSide;
        this.rightSide = rightSide;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the operator you want to use to compare the left side and right side.
     * <p>The operation becomes <code>(leftSide) operator (rightSide)</code>.</p>
     */
    @JsonProperty("operator")
    public RuleBasedConditionOperator getOperator() {
        return operator;
    }

    /**
     * @return This is the left side of the operation.
     * <p>You can reference any variable in the context of the current block execution (step):</p>
     * <ul>
     * <li>&quot;{{output.your-property-name}}&quot; for current step's output</li>
     * <li>&quot;{{input.your-property-name}}&quot; for current step's input</li>
     * <li>&quot;{{your-step-name.output.your-property-name}}&quot; for another step's output (in the same workflow; read caveat #1)</li>
     * <li>&quot;{{your-step-name.input.your-property-name}}&quot; for another step's input (in the same workflow; read caveat #1)</li>
     * <li>&quot;{{your-block-name.output.your-property-name}}&quot; for another block's output (in the same workflow; read caveat #2)</li>
     * <li>&quot;{{your-block-name.input.your-property-name}}&quot; for another block's input (in the same workflow; read caveat #2)</li>
     * <li>&quot;{{workflow.input.your-property-name}}&quot; for the current workflow's input</li>
     * <li>&quot;{{global.your-property-name}}&quot; for the global context</li>
     * </ul>
     * <p>Or, you can use a constant:</p>
     * <ul>
     * <li>&quot;1&quot;</li>
     * <li>&quot;text&quot;</li>
     * <li>&quot;true&quot;</li>
     * <li>&quot;false&quot;</li>
     * </ul>
     * <p>Or, you can mix and match with string interpolation:</p>
     * <ul>
     * <li>&quot;{{your-property-name}}-{{input.your-property-name-2}}-1&quot;</li>
     * </ul>
     * <p>Caveats:</p>
     * <ol>
     * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.input/output.propertyName}} will reference the latest usage of the step.</li>
     * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.input/output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
     * </ol>
     */
    @JsonProperty("leftSide")
    public String getLeftSide() {
        return leftSide;
    }

    /**
     * @return This is the right side of the operation.
     * <p>You can reference any variable in the context of the current block execution (step):</p>
     * <ul>
     * <li>&quot;{{output.your-property-name}}&quot; for current step's output</li>
     * <li>&quot;{{input.your-property-name}}&quot; for current step's input</li>
     * <li>&quot;{{your-step-name.output.your-property-name}}&quot; for another step's output (in the same workflow; read caveat #1)</li>
     * <li>&quot;{{your-step-name.input.your-property-name}}&quot; for another step's input (in the same workflow; read caveat #1)</li>
     * <li>&quot;{{your-block-name.output.your-property-name}}&quot; for another block's output (in the same workflow; read caveat #2)</li>
     * <li>&quot;{{your-block-name.input.your-property-name}}&quot; for another block's input (in the same workflow; read caveat #2)</li>
     * <li>&quot;{{workflow.input.your-property-name}}&quot; for the current workflow's input</li>
     * <li>&quot;{{global.your-property-name}}&quot; for the global context</li>
     * </ul>
     * <p>Or, you can use a constant:</p>
     * <ul>
     * <li>&quot;1&quot;</li>
     * <li>&quot;text&quot;</li>
     * <li>&quot;true&quot;</li>
     * <li>&quot;false&quot;</li>
     * </ul>
     * <p>Or, you can mix and match with string interpolation:</p>
     * <ul>
     * <li>&quot;{{your-property-name}}-{{input.your-property-name-2}}-1&quot;</li>
     * </ul>
     * <p>Caveats:</p>
     * <ol>
     * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.input/output.propertyName}} will reference the latest usage of the step.</li>
     * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.input/output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
     * </ol>
     */
    @JsonProperty("rightSide")
    public String getRightSide() {
        return rightSide;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RuleBasedCondition && equalTo((RuleBasedCondition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RuleBasedCondition other) {
        return operator.equals(other.operator) && leftSide.equals(other.leftSide) && rightSide.equals(other.rightSide);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operator, this.leftSide, this.rightSide);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OperatorStage builder() {
        return new Builder();
    }

    public interface OperatorStage {
        LeftSideStage operator(@NotNull RuleBasedConditionOperator operator);

        Builder from(RuleBasedCondition other);
    }

    public interface LeftSideStage {
        RightSideStage leftSide(@NotNull String leftSide);
    }

    public interface RightSideStage {
        _FinalStage rightSide(@NotNull String rightSide);
    }

    public interface _FinalStage {
        RuleBasedCondition build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OperatorStage, LeftSideStage, RightSideStage, _FinalStage {
        private RuleBasedConditionOperator operator;

        private String leftSide;

        private String rightSide;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RuleBasedCondition other) {
            operator(other.getOperator());
            leftSide(other.getLeftSide());
            rightSide(other.getRightSide());
            return this;
        }

        /**
         * <p>This is the operator you want to use to compare the left side and right side.</p>
         * <p>The operation becomes <code>(leftSide) operator (rightSide)</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("operator")
        public LeftSideStage operator(@NotNull RuleBasedConditionOperator operator) {
            this.operator = Objects.requireNonNull(operator, "operator must not be null");
            return this;
        }

        /**
         * <p>This is the left side of the operation.</p>
         * <p>You can reference any variable in the context of the current block execution (step):</p>
         * <ul>
         * <li>&quot;{{output.your-property-name}}&quot; for current step's output</li>
         * <li>&quot;{{input.your-property-name}}&quot; for current step's input</li>
         * <li>&quot;{{your-step-name.output.your-property-name}}&quot; for another step's output (in the same workflow; read caveat #1)</li>
         * <li>&quot;{{your-step-name.input.your-property-name}}&quot; for another step's input (in the same workflow; read caveat #1)</li>
         * <li>&quot;{{your-block-name.output.your-property-name}}&quot; for another block's output (in the same workflow; read caveat #2)</li>
         * <li>&quot;{{your-block-name.input.your-property-name}}&quot; for another block's input (in the same workflow; read caveat #2)</li>
         * <li>&quot;{{workflow.input.your-property-name}}&quot; for the current workflow's input</li>
         * <li>&quot;{{global.your-property-name}}&quot; for the global context</li>
         * </ul>
         * <p>Or, you can use a constant:</p>
         * <ul>
         * <li>&quot;1&quot;</li>
         * <li>&quot;text&quot;</li>
         * <li>&quot;true&quot;</li>
         * <li>&quot;false&quot;</li>
         * </ul>
         * <p>Or, you can mix and match with string interpolation:</p>
         * <ul>
         * <li>&quot;{{your-property-name}}-{{input.your-property-name-2}}-1&quot;</li>
         * </ul>
         * <p>Caveats:</p>
         * <ol>
         * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.input/output.propertyName}} will reference the latest usage of the step.</li>
         * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.input/output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("leftSide")
        public RightSideStage leftSide(@NotNull String leftSide) {
            this.leftSide = Objects.requireNonNull(leftSide, "leftSide must not be null");
            return this;
        }

        /**
         * <p>This is the right side of the operation.</p>
         * <p>You can reference any variable in the context of the current block execution (step):</p>
         * <ul>
         * <li>&quot;{{output.your-property-name}}&quot; for current step's output</li>
         * <li>&quot;{{input.your-property-name}}&quot; for current step's input</li>
         * <li>&quot;{{your-step-name.output.your-property-name}}&quot; for another step's output (in the same workflow; read caveat #1)</li>
         * <li>&quot;{{your-step-name.input.your-property-name}}&quot; for another step's input (in the same workflow; read caveat #1)</li>
         * <li>&quot;{{your-block-name.output.your-property-name}}&quot; for another block's output (in the same workflow; read caveat #2)</li>
         * <li>&quot;{{your-block-name.input.your-property-name}}&quot; for another block's input (in the same workflow; read caveat #2)</li>
         * <li>&quot;{{workflow.input.your-property-name}}&quot; for the current workflow's input</li>
         * <li>&quot;{{global.your-property-name}}&quot; for the global context</li>
         * </ul>
         * <p>Or, you can use a constant:</p>
         * <ul>
         * <li>&quot;1&quot;</li>
         * <li>&quot;text&quot;</li>
         * <li>&quot;true&quot;</li>
         * <li>&quot;false&quot;</li>
         * </ul>
         * <p>Or, you can mix and match with string interpolation:</p>
         * <ul>
         * <li>&quot;{{your-property-name}}-{{input.your-property-name-2}}-1&quot;</li>
         * </ul>
         * <p>Caveats:</p>
         * <ol>
         * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.input/output.propertyName}} will reference the latest usage of the step.</li>
         * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.input/output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("rightSide")
        public _FinalStage rightSide(@NotNull String rightSide) {
            this.rightSide = Objects.requireNonNull(rightSide, "rightSide must not be null");
            return this;
        }

        @java.lang.Override
        public RuleBasedCondition build() {
            return new RuleBasedCondition(operator, leftSide, rightSide, additionalProperties);
        }
    }
}
