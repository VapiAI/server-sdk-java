/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AssignmentMutation.Builder.class)
public final class AssignmentMutation {
    private final Optional<List<AssignmentMutationConditionsItem>> conditions;

    private final String variable;

    private final String value;

    private final Map<String, Object> additionalProperties;

    private AssignmentMutation(
            Optional<List<AssignmentMutationConditionsItem>> conditions,
            String variable,
            String value,
            Map<String, Object> additionalProperties) {
        this.conditions = conditions;
        this.variable = variable;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is an optional array of conditions that must be met for this mutation to be triggered.
     */
    @JsonProperty("conditions")
    public Optional<List<AssignmentMutationConditionsItem>> getConditions() {
        return conditions;
    }

    /**
     * @return This mutation assigns a new value to an existing or new variable.
     */
    @JsonProperty("type")
    public String getType() {
        return "assignment";
    }

    /**
     * @return This is the variable to assign a new value to.
     * <p>You can reference any variable in the context of the current block execution (step):</p>
     * <ul>
     * <li>&quot;output.your-property-name&quot; for current step's output</li>
     * <li>&quot;your-step-name.output.your-property-name&quot; for another step's output (in the same workflow; read caveat #1)</li>
     * <li>&quot;your-block-name.output.your-property-name&quot; for another block's output (in the same workflow; read caveat #2)</li>
     * <li>&quot;global.your-property-name&quot; for the global context</li>
     * </ul>
     * <p>This needs to be the key path of the variable. If you use {{}}, it'll dereference that to the value of the variable before assignment. This can be useful if the path is dynamic. Example:</p>
     * <ul>
     * <li>&quot;global.{{my-tool-call-step.output.my-key-name}}&quot;</li>
     * </ul>
     * <p>You can also string interpolate multiple variables to get the key name:</p>
     * <ul>
     * <li>&quot;global.{{my-tool-call-step.output.my-key-name-suffix}}-{{my-tool-call-step.output.my-key-name}}&quot;</li>
     * </ul>
     * <p>The path to the new variable is created if it doesn't exist. Example:</p>
     * <ul>
     * <li>&quot;global.this-does-not-exist.neither-does-this&quot; will create <code>this-does-not-exist</code> object with <code>neither-does-this</code> as a key</li>
     * </ul>
     * <p>Caveats:</p>
     * <ol>
     * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
     * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow.</li>
     * </ol>
     */
    @JsonProperty("variable")
    public String getVariable() {
        return variable;
    }

    /**
     * @return The value to assign to the variable.
     * <p>You can reference any variable in the context of the current block execution (step):</p>
     * <ul>
     * <li>&quot;{{output.your-property-name}}&quot; for current step's output</li>
     * <li>&quot;{{your-step-name.output.your-property-name}}&quot; for another step's output (in the same workflow; read caveat #1)</li>
     * <li>&quot;{{your-block-name.output.your-property-name}}&quot; for another block's output (in the same workflow; read caveat #2)</li>
     * <li>&quot;{{global.your-property-name}}&quot; for the global context</li>
     * </ul>
     * <p>Or, you can use a constant:</p>
     * <ul>
     * <li>&quot;1&quot;</li>
     * <li>&quot;text&quot;</li>
     * <li>&quot;true&quot;</li>
     * <li>&quot;false&quot;</li>
     * </ul>
     * <p>Or, you can mix and match with string interpolation:</p>
     * <ul>
     * <li>&quot;{{your-property-name}}-{{input.your-property-name-2}}-1&quot;</li>
     * </ul>
     * <p>Caveats:</p>
     * <ol>
     * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
     * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow.</li>
     * </ol>
     */
    @JsonProperty("value")
    public String getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AssignmentMutation && equalTo((AssignmentMutation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AssignmentMutation other) {
        return conditions.equals(other.conditions) && variable.equals(other.variable) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.conditions, this.variable, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static VariableStage builder() {
        return new Builder();
    }

    public interface VariableStage {
        ValueStage variable(@NotNull String variable);

        Builder from(AssignmentMutation other);
    }

    public interface ValueStage {
        _FinalStage value(@NotNull String value);
    }

    public interface _FinalStage {
        AssignmentMutation build();

        _FinalStage conditions(Optional<List<AssignmentMutationConditionsItem>> conditions);

        _FinalStage conditions(List<AssignmentMutationConditionsItem> conditions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements VariableStage, ValueStage, _FinalStage {
        private String variable;

        private String value;

        private Optional<List<AssignmentMutationConditionsItem>> conditions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AssignmentMutation other) {
            conditions(other.getConditions());
            variable(other.getVariable());
            value(other.getValue());
            return this;
        }

        /**
         * <p>This is the variable to assign a new value to.</p>
         * <p>You can reference any variable in the context of the current block execution (step):</p>
         * <ul>
         * <li>&quot;output.your-property-name&quot; for current step's output</li>
         * <li>&quot;your-step-name.output.your-property-name&quot; for another step's output (in the same workflow; read caveat #1)</li>
         * <li>&quot;your-block-name.output.your-property-name&quot; for another block's output (in the same workflow; read caveat #2)</li>
         * <li>&quot;global.your-property-name&quot; for the global context</li>
         * </ul>
         * <p>This needs to be the key path of the variable. If you use {{}}, it'll dereference that to the value of the variable before assignment. This can be useful if the path is dynamic. Example:</p>
         * <ul>
         * <li>&quot;global.{{my-tool-call-step.output.my-key-name}}&quot;</li>
         * </ul>
         * <p>You can also string interpolate multiple variables to get the key name:</p>
         * <ul>
         * <li>&quot;global.{{my-tool-call-step.output.my-key-name-suffix}}-{{my-tool-call-step.output.my-key-name}}&quot;</li>
         * </ul>
         * <p>The path to the new variable is created if it doesn't exist. Example:</p>
         * <ul>
         * <li>&quot;global.this-does-not-exist.neither-does-this&quot; will create <code>this-does-not-exist</code> object with <code>neither-does-this</code> as a key</li>
         * </ul>
         * <p>Caveats:</p>
         * <ol>
         * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
         * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow.</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("variable")
        public ValueStage variable(@NotNull String variable) {
            this.variable = Objects.requireNonNull(variable, "variable must not be null");
            return this;
        }

        /**
         * <p>The value to assign to the variable.</p>
         * <p>You can reference any variable in the context of the current block execution (step):</p>
         * <ul>
         * <li>&quot;{{output.your-property-name}}&quot; for current step's output</li>
         * <li>&quot;{{your-step-name.output.your-property-name}}&quot; for another step's output (in the same workflow; read caveat #1)</li>
         * <li>&quot;{{your-block-name.output.your-property-name}}&quot; for another block's output (in the same workflow; read caveat #2)</li>
         * <li>&quot;{{global.your-property-name}}&quot; for the global context</li>
         * </ul>
         * <p>Or, you can use a constant:</p>
         * <ul>
         * <li>&quot;1&quot;</li>
         * <li>&quot;text&quot;</li>
         * <li>&quot;true&quot;</li>
         * <li>&quot;false&quot;</li>
         * </ul>
         * <p>Or, you can mix and match with string interpolation:</p>
         * <ul>
         * <li>&quot;{{your-property-name}}-{{input.your-property-name-2}}-1&quot;</li>
         * </ul>
         * <p>Caveats:</p>
         * <ol>
         * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
         * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow.</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("value")
        public _FinalStage value(@NotNull String value) {
            this.value = Objects.requireNonNull(value, "value must not be null");
            return this;
        }

        /**
         * <p>This is an optional array of conditions that must be met for this mutation to be triggered.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage conditions(List<AssignmentMutationConditionsItem> conditions) {
            this.conditions = Optional.ofNullable(conditions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "conditions", nulls = Nulls.SKIP)
        public _FinalStage conditions(Optional<List<AssignmentMutationConditionsItem>> conditions) {
            this.conditions = conditions;
            return this;
        }

        @java.lang.Override
        public AssignmentMutation build() {
            return new AssignmentMutation(conditions, variable, value, additionalProperties);
        }
    }
}
