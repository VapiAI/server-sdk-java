/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateVapiPhoneNumberDto.Builder.class)
public final class CreateVapiPhoneNumberDto {
    private final Optional<CreateVapiPhoneNumberDtoFallbackDestination> fallbackDestination;

    private final String sipUri;

    private final Optional<SipAuthentication> authentication;

    private final Optional<String> name;

    private final Optional<String> assistantId;

    private final Optional<String> squadId;

    private final Optional<String> serverUrl;

    private final Optional<String> serverUrlSecret;

    private final Map<String, Object> additionalProperties;

    private CreateVapiPhoneNumberDto(
            Optional<CreateVapiPhoneNumberDtoFallbackDestination> fallbackDestination,
            String sipUri,
            Optional<SipAuthentication> authentication,
            Optional<String> name,
            Optional<String> assistantId,
            Optional<String> squadId,
            Optional<String> serverUrl,
            Optional<String> serverUrlSecret,
            Map<String, Object> additionalProperties) {
        this.fallbackDestination = fallbackDestination;
        this.sipUri = sipUri;
        this.authentication = authentication;
        this.name = name;
        this.assistantId = assistantId;
        this.squadId = squadId;
        this.serverUrl = serverUrl;
        this.serverUrlSecret = serverUrlSecret;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the fallback destination an inbound call will be transferred to if:
     * <ol>
     * <li><code>assistantId</code> is not set</li>
     * <li><code>squadId</code> is not set</li>
     * <li>and, <code>assistant-request</code> message to the <code>serverUrl</code> fails</li>
     * </ol>
     * <p>If this is not set and above conditions are met, the inbound call is hung up with an error message.</p>
     */
    @JsonProperty("fallbackDestination")
    public Optional<CreateVapiPhoneNumberDtoFallbackDestination> getFallbackDestination() {
        return fallbackDestination;
    }

    /**
     * @return This is the SIP URI of the phone number. You can SIP INVITE this. The assistant attached to this number will answer.
     * <p>This is case-insensitive.</p>
     */
    @JsonProperty("sipUri")
    public String getSipUri() {
        return sipUri;
    }

    /**
     * @return This enables authentication for incoming SIP INVITE requests to the <code>sipUri</code>.
     * <p>If not set, any username/password to the 401 challenge of the SIP INVITE will be accepted.</p>
     */
    @JsonProperty("authentication")
    public Optional<SipAuthentication> getAuthentication() {
        return authentication;
    }

    /**
     * @return This is the name of the phone number. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the assistant that will be used for incoming calls to this phone number.
     * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the squad that will be used for incoming calls to this phone number.
     * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
     */
    @JsonProperty("squadId")
    public Optional<String> getSquadId() {
        return squadId;
    }

    /**
     * @return This is the server URL where messages will be sent for calls on this number. This includes the <code>assistant-request</code> message.
     * <p>You can see the shape of the messages sent in <code>ServerMessage</code>.</p>
     * <p>This overrides the <code>org.serverUrl</code>. Order of precedence: tool.server.url &gt; assistant.serverUrl &gt; phoneNumber.serverUrl &gt; org.serverUrl.</p>
     */
    @JsonProperty("serverUrl")
    public Optional<String> getServerUrl() {
        return serverUrl;
    }

    /**
     * @return This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.
     * <p>Same precedence logic as serverUrl.</p>
     */
    @JsonProperty("serverUrlSecret")
    public Optional<String> getServerUrlSecret() {
        return serverUrlSecret;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateVapiPhoneNumberDto && equalTo((CreateVapiPhoneNumberDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateVapiPhoneNumberDto other) {
        return fallbackDestination.equals(other.fallbackDestination)
                && sipUri.equals(other.sipUri)
                && authentication.equals(other.authentication)
                && name.equals(other.name)
                && assistantId.equals(other.assistantId)
                && squadId.equals(other.squadId)
                && serverUrl.equals(other.serverUrl)
                && serverUrlSecret.equals(other.serverUrlSecret);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.fallbackDestination,
                this.sipUri,
                this.authentication,
                this.name,
                this.assistantId,
                this.squadId,
                this.serverUrl,
                this.serverUrlSecret);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SipUriStage builder() {
        return new Builder();
    }

    public interface SipUriStage {
        _FinalStage sipUri(@NotNull String sipUri);

        Builder from(CreateVapiPhoneNumberDto other);
    }

    public interface _FinalStage {
        CreateVapiPhoneNumberDto build();

        _FinalStage fallbackDestination(Optional<CreateVapiPhoneNumberDtoFallbackDestination> fallbackDestination);

        _FinalStage fallbackDestination(CreateVapiPhoneNumberDtoFallbackDestination fallbackDestination);

        _FinalStage authentication(Optional<SipAuthentication> authentication);

        _FinalStage authentication(SipAuthentication authentication);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        _FinalStage squadId(Optional<String> squadId);

        _FinalStage squadId(String squadId);

        _FinalStage serverUrl(Optional<String> serverUrl);

        _FinalStage serverUrl(String serverUrl);

        _FinalStage serverUrlSecret(Optional<String> serverUrlSecret);

        _FinalStage serverUrlSecret(String serverUrlSecret);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SipUriStage, _FinalStage {
        private String sipUri;

        private Optional<String> serverUrlSecret = Optional.empty();

        private Optional<String> serverUrl = Optional.empty();

        private Optional<String> squadId = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<SipAuthentication> authentication = Optional.empty();

        private Optional<CreateVapiPhoneNumberDtoFallbackDestination> fallbackDestination = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateVapiPhoneNumberDto other) {
            fallbackDestination(other.getFallbackDestination());
            sipUri(other.getSipUri());
            authentication(other.getAuthentication());
            name(other.getName());
            assistantId(other.getAssistantId());
            squadId(other.getSquadId());
            serverUrl(other.getServerUrl());
            serverUrlSecret(other.getServerUrlSecret());
            return this;
        }

        /**
         * <p>This is the SIP URI of the phone number. You can SIP INVITE this. The assistant attached to this number will answer.</p>
         * <p>This is case-insensitive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sipUri")
        public _FinalStage sipUri(@NotNull String sipUri) {
            this.sipUri = Objects.requireNonNull(sipUri, "sipUri must not be null");
            return this;
        }

        /**
         * <p>This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.</p>
         * <p>Same precedence logic as serverUrl.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serverUrlSecret(String serverUrlSecret) {
            this.serverUrlSecret = Optional.ofNullable(serverUrlSecret);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serverUrlSecret", nulls = Nulls.SKIP)
        public _FinalStage serverUrlSecret(Optional<String> serverUrlSecret) {
            this.serverUrlSecret = serverUrlSecret;
            return this;
        }

        /**
         * <p>This is the server URL where messages will be sent for calls on this number. This includes the <code>assistant-request</code> message.</p>
         * <p>You can see the shape of the messages sent in <code>ServerMessage</code>.</p>
         * <p>This overrides the <code>org.serverUrl</code>. Order of precedence: tool.server.url &gt; assistant.serverUrl &gt; phoneNumber.serverUrl &gt; org.serverUrl.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serverUrl(String serverUrl) {
            this.serverUrl = Optional.ofNullable(serverUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serverUrl", nulls = Nulls.SKIP)
        public _FinalStage serverUrl(Optional<String> serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * <p>This is the squad that will be used for incoming calls to this phone number.</p>
         * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage squadId(String squadId) {
            this.squadId = Optional.ofNullable(squadId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "squadId", nulls = Nulls.SKIP)
        public _FinalStage squadId(Optional<String> squadId) {
            this.squadId = squadId;
            return this;
        }

        /**
         * <p>This is the assistant that will be used for incoming calls to this phone number.</p>
         * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        /**
         * <p>This is the name of the phone number. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This enables authentication for incoming SIP INVITE requests to the <code>sipUri</code>.</p>
         * <p>If not set, any username/password to the 401 challenge of the SIP INVITE will be accepted.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage authentication(SipAuthentication authentication) {
            this.authentication = Optional.ofNullable(authentication);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "authentication", nulls = Nulls.SKIP)
        public _FinalStage authentication(Optional<SipAuthentication> authentication) {
            this.authentication = authentication;
            return this;
        }

        /**
         * <p>This is the fallback destination an inbound call will be transferred to if:</p>
         * <ol>
         * <li><code>assistantId</code> is not set</li>
         * <li><code>squadId</code> is not set</li>
         * <li>and, <code>assistant-request</code> message to the <code>serverUrl</code> fails</li>
         * </ol>
         * <p>If this is not set and above conditions are met, the inbound call is hung up with an error message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fallbackDestination(CreateVapiPhoneNumberDtoFallbackDestination fallbackDestination) {
            this.fallbackDestination = Optional.ofNullable(fallbackDestination);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fallbackDestination", nulls = Nulls.SKIP)
        public _FinalStage fallbackDestination(
                Optional<CreateVapiPhoneNumberDtoFallbackDestination> fallbackDestination) {
            this.fallbackDestination = fallbackDestination;
            return this;
        }

        @java.lang.Override
        public CreateVapiPhoneNumberDto build() {
            return new CreateVapiPhoneNumberDto(
                    fallbackDestination,
                    sipUri,
                    authentication,
                    name,
                    assistantId,
                    squadId,
                    serverUrl,
                    serverUrlSecret,
                    additionalProperties);
        }
    }
}
