/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateVonagePhoneNumberDto.Builder.class)
public final class CreateVonagePhoneNumberDto {
    private final Optional<CreateVonagePhoneNumberDtoFallbackDestination> fallbackDestination;

    private final String number;

    private final String credentialId;

    private final Optional<String> name;

    private final Optional<String> assistantId;

    private final Optional<String> squadId;

    private final Optional<Server> server;

    private final Map<String, Object> additionalProperties;

    private CreateVonagePhoneNumberDto(
            Optional<CreateVonagePhoneNumberDtoFallbackDestination> fallbackDestination,
            String number,
            String credentialId,
            Optional<String> name,
            Optional<String> assistantId,
            Optional<String> squadId,
            Optional<Server> server,
            Map<String, Object> additionalProperties) {
        this.fallbackDestination = fallbackDestination;
        this.number = number;
        this.credentialId = credentialId;
        this.name = name;
        this.assistantId = assistantId;
        this.squadId = squadId;
        this.server = server;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the fallback destination an inbound call will be transferred to if:
     * <ol>
     * <li><code>assistantId</code> is not set</li>
     * <li><code>squadId</code> is not set</li>
     * <li>and, <code>assistant-request</code> message to the <code>serverUrl</code> fails</li>
     * </ol>
     * <p>If this is not set and above conditions are met, the inbound call is hung up with an error message.</p>
     */
    @JsonProperty("fallbackDestination")
    public Optional<CreateVonagePhoneNumberDtoFallbackDestination> getFallbackDestination() {
        return fallbackDestination;
    }

    /**
     * @return These are the digits of the phone number you own on your Vonage.
     */
    @JsonProperty("number")
    public String getNumber() {
        return number;
    }

    /**
     * @return This is the credential that is used to make outgoing calls, and do operations like call transfer and hang up.
     */
    @JsonProperty("credentialId")
    public String getCredentialId() {
        return credentialId;
    }

    /**
     * @return This is the name of the phone number. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the assistant that will be used for incoming calls to this phone number.
     * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the squad that will be used for incoming calls to this phone number.
     * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
     */
    @JsonProperty("squadId")
    public Optional<String> getSquadId() {
        return squadId;
    }

    /**
     * @return This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.
     * <p>The order of precedence is:</p>
     * <ol>
     * <li>assistant.server</li>
     * <li>phoneNumber.server</li>
     * <li>org.server</li>
     * </ol>
     */
    @JsonProperty("server")
    public Optional<Server> getServer() {
        return server;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateVonagePhoneNumberDto && equalTo((CreateVonagePhoneNumberDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateVonagePhoneNumberDto other) {
        return fallbackDestination.equals(other.fallbackDestination)
                && number.equals(other.number)
                && credentialId.equals(other.credentialId)
                && name.equals(other.name)
                && assistantId.equals(other.assistantId)
                && squadId.equals(other.squadId)
                && server.equals(other.server);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.fallbackDestination,
                this.number,
                this.credentialId,
                this.name,
                this.assistantId,
                this.squadId,
                this.server);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NumberStage builder() {
        return new Builder();
    }

    public interface NumberStage {
        CredentialIdStage number(@NotNull String number);

        Builder from(CreateVonagePhoneNumberDto other);
    }

    public interface CredentialIdStage {
        _FinalStage credentialId(@NotNull String credentialId);
    }

    public interface _FinalStage {
        CreateVonagePhoneNumberDto build();

        _FinalStage fallbackDestination(Optional<CreateVonagePhoneNumberDtoFallbackDestination> fallbackDestination);

        _FinalStage fallbackDestination(CreateVonagePhoneNumberDtoFallbackDestination fallbackDestination);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        _FinalStage squadId(Optional<String> squadId);

        _FinalStage squadId(String squadId);

        _FinalStage server(Optional<Server> server);

        _FinalStage server(Server server);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NumberStage, CredentialIdStage, _FinalStage {
        private String number;

        private String credentialId;

        private Optional<Server> server = Optional.empty();

        private Optional<String> squadId = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<CreateVonagePhoneNumberDtoFallbackDestination> fallbackDestination = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateVonagePhoneNumberDto other) {
            fallbackDestination(other.getFallbackDestination());
            number(other.getNumber());
            credentialId(other.getCredentialId());
            name(other.getName());
            assistantId(other.getAssistantId());
            squadId(other.getSquadId());
            server(other.getServer());
            return this;
        }

        /**
         * <p>These are the digits of the phone number you own on your Vonage.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("number")
        public CredentialIdStage number(@NotNull String number) {
            this.number = Objects.requireNonNull(number, "number must not be null");
            return this;
        }

        /**
         * <p>This is the credential that is used to make outgoing calls, and do operations like call transfer and hang up.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("credentialId")
        public _FinalStage credentialId(@NotNull String credentialId) {
            this.credentialId = Objects.requireNonNull(credentialId, "credentialId must not be null");
            return this;
        }

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage server(Server server) {
            this.server = Optional.ofNullable(server);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "server", nulls = Nulls.SKIP)
        public _FinalStage server(Optional<Server> server) {
            this.server = server;
            return this;
        }

        /**
         * <p>This is the squad that will be used for incoming calls to this phone number.</p>
         * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage squadId(String squadId) {
            this.squadId = Optional.ofNullable(squadId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "squadId", nulls = Nulls.SKIP)
        public _FinalStage squadId(Optional<String> squadId) {
            this.squadId = squadId;
            return this;
        }

        /**
         * <p>This is the assistant that will be used for incoming calls to this phone number.</p>
         * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        /**
         * <p>This is the name of the phone number. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This is the fallback destination an inbound call will be transferred to if:</p>
         * <ol>
         * <li><code>assistantId</code> is not set</li>
         * <li><code>squadId</code> is not set</li>
         * <li>and, <code>assistant-request</code> message to the <code>serverUrl</code> fails</li>
         * </ol>
         * <p>If this is not set and above conditions are met, the inbound call is hung up with an error message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fallbackDestination(CreateVonagePhoneNumberDtoFallbackDestination fallbackDestination) {
            this.fallbackDestination = Optional.ofNullable(fallbackDestination);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fallbackDestination", nulls = Nulls.SKIP)
        public _FinalStage fallbackDestination(
                Optional<CreateVonagePhoneNumberDtoFallbackDestination> fallbackDestination) {
            this.fallbackDestination = fallbackDestination;
            return this;
        }

        @java.lang.Override
        public CreateVonagePhoneNumberDto build() {
            return new CreateVonagePhoneNumberDto(
                    fallbackDestination,
                    number,
                    credentialId,
                    name,
                    assistantId,
                    squadId,
                    server,
                    additionalProperties);
        }
    }
}
