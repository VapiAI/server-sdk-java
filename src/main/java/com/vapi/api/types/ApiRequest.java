/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApiRequest.Builder.class)
public final class ApiRequest {
    private final ApiRequestMethod method;

    private final String url;

    private final Optional<JsonSchema> headers;

    private final Optional<JsonSchema> body;

    private final ApiRequestMode mode;

    private final Optional<List<Hook>> hooks;

    private final Optional<JsonSchema> output;

    private final String name;

    private final Optional<Map<String, Object>> metadata;

    private final Map<String, Object> additionalProperties;

    private ApiRequest(
            ApiRequestMethod method,
            String url,
            Optional<JsonSchema> headers,
            Optional<JsonSchema> body,
            ApiRequestMode mode,
            Optional<List<Hook>> hooks,
            Optional<JsonSchema> output,
            String name,
            Optional<Map<String, Object>> metadata,
            Map<String, Object> additionalProperties) {
        this.method = method;
        this.url = url;
        this.headers = headers;
        this.body = body;
        this.mode = mode;
        this.hooks = hooks;
        this.output = output;
        this.name = name;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("method")
    public ApiRequestMethod getMethod() {
        return method;
    }

    /**
     * @return Api endpoint to send requests to.
     */
    @JsonProperty("url")
    public String getUrl() {
        return url;
    }

    /**
     * @return These are the custom headers to include in the Api Request sent.
     * <p>Each key-value pair represents a header name and its value.</p>
     */
    @JsonProperty("headers")
    public Optional<JsonSchema> getHeaders() {
        return headers;
    }

    /**
     * @return This defined the JSON body of your Api Request. For example, if <code>body_schema</code>
     * included &quot;my_field&quot;: &quot;my_gather_statement.user_age&quot;, then the json body sent to the server would have that particular value assign to it.
     * Right now, only data from gather statements are supported.
     */
    @JsonProperty("body")
    public Optional<JsonSchema> getBody() {
        return body;
    }

    /**
     * @return This is the mode of the Api Request.
     * We only support BLOCKING and BACKGROUND for now.
     */
    @JsonProperty("mode")
    public ApiRequestMode getMode() {
        return mode;
    }

    /**
     * @return This is a list of hooks for a task.
     * Each hook is a list of tasks to run on a trigger (such as on start, on failure, etc).
     * Only Say is supported for now.
     */
    @JsonProperty("hooks")
    public Optional<List<Hook>> getHooks() {
        return hooks;
    }

    /**
     * @return This is the schema for the outputs of the Api Request.
     */
    @JsonProperty("output")
    public Optional<JsonSchema> getOutput() {
        return output;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is for metadata you want to store on the task.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApiRequest && equalTo((ApiRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApiRequest other) {
        return method.equals(other.method)
                && url.equals(other.url)
                && headers.equals(other.headers)
                && body.equals(other.body)
                && mode.equals(other.mode)
                && hooks.equals(other.hooks)
                && output.equals(other.output)
                && name.equals(other.name)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.method,
                this.url,
                this.headers,
                this.body,
                this.mode,
                this.hooks,
                this.output,
                this.name,
                this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        UrlStage method(@NotNull ApiRequestMethod method);

        Builder from(ApiRequest other);
    }

    public interface UrlStage {
        ModeStage url(@NotNull String url);
    }

    public interface ModeStage {
        NameStage mode(@NotNull ApiRequestMode mode);
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        ApiRequest build();

        _FinalStage headers(Optional<JsonSchema> headers);

        _FinalStage headers(JsonSchema headers);

        _FinalStage body(Optional<JsonSchema> body);

        _FinalStage body(JsonSchema body);

        _FinalStage hooks(Optional<List<Hook>> hooks);

        _FinalStage hooks(List<Hook> hooks);

        _FinalStage output(Optional<JsonSchema> output);

        _FinalStage output(JsonSchema output);

        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MethodStage, UrlStage, ModeStage, NameStage, _FinalStage {
        private ApiRequestMethod method;

        private String url;

        private ApiRequestMode mode;

        private String name;

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<JsonSchema> output = Optional.empty();

        private Optional<List<Hook>> hooks = Optional.empty();

        private Optional<JsonSchema> body = Optional.empty();

        private Optional<JsonSchema> headers = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ApiRequest other) {
            method(other.getMethod());
            url(other.getUrl());
            headers(other.getHeaders());
            body(other.getBody());
            mode(other.getMode());
            hooks(other.getHooks());
            output(other.getOutput());
            name(other.getName());
            metadata(other.getMetadata());
            return this;
        }

        @java.lang.Override
        @JsonSetter("method")
        public UrlStage method(@NotNull ApiRequestMethod method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        /**
         * <p>Api endpoint to send requests to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("url")
        public ModeStage url(@NotNull String url) {
            this.url = Objects.requireNonNull(url, "url must not be null");
            return this;
        }

        /**
         * <p>This is the mode of the Api Request.
         * We only support BLOCKING and BACKGROUND for now.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("mode")
        public NameStage mode(@NotNull ApiRequestMode mode) {
            this.mode = Objects.requireNonNull(mode, "mode must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>This is for metadata you want to store on the task.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>This is the schema for the outputs of the Api Request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage output(JsonSchema output) {
            this.output = Optional.ofNullable(output);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "output", nulls = Nulls.SKIP)
        public _FinalStage output(Optional<JsonSchema> output) {
            this.output = output;
            return this;
        }

        /**
         * <p>This is a list of hooks for a task.
         * Each hook is a list of tasks to run on a trigger (such as on start, on failure, etc).
         * Only Say is supported for now.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hooks(List<Hook> hooks) {
            this.hooks = Optional.ofNullable(hooks);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hooks", nulls = Nulls.SKIP)
        public _FinalStage hooks(Optional<List<Hook>> hooks) {
            this.hooks = hooks;
            return this;
        }

        /**
         * <p>This defined the JSON body of your Api Request. For example, if <code>body_schema</code>
         * included &quot;my_field&quot;: &quot;my_gather_statement.user_age&quot;, then the json body sent to the server would have that particular value assign to it.
         * Right now, only data from gather statements are supported.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage body(JsonSchema body) {
            this.body = Optional.ofNullable(body);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "body", nulls = Nulls.SKIP)
        public _FinalStage body(Optional<JsonSchema> body) {
            this.body = body;
            return this;
        }

        /**
         * <p>These are the custom headers to include in the Api Request sent.</p>
         * <p>Each key-value pair represents a header name and its value.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage headers(JsonSchema headers) {
            this.headers = Optional.ofNullable(headers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "headers", nulls = Nulls.SKIP)
        public _FinalStage headers(Optional<JsonSchema> headers) {
            this.headers = headers;
            return this;
        }

        @java.lang.Override
        public ApiRequest build() {
            return new ApiRequest(
                    method, url, headers, body, mode, hooks, output, name, metadata, additionalProperties);
        }
    }
}
