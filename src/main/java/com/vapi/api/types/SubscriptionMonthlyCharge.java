/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionMonthlyCharge.Builder.class)
public final class SubscriptionMonthlyCharge {
    private final double monthlyCharge;

    private final List<Map<String, Object>> costs;

    private final Map<String, Object> additionalProperties;

    private SubscriptionMonthlyCharge(
            double monthlyCharge, List<Map<String, Object>> costs, Map<String, Object> additionalProperties) {
        this.monthlyCharge = monthlyCharge;
        this.costs = costs;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the monthly charge for the subscription.
     */
    @JsonProperty("monthlyCharge")
    public double getMonthlyCharge() {
        return monthlyCharge;
    }

    /**
     * @return These are the different costs that make up the monthly charge.
     */
    @JsonProperty("costs")
    public List<Map<String, Object>> getCosts() {
        return costs;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubscriptionMonthlyCharge && equalTo((SubscriptionMonthlyCharge) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubscriptionMonthlyCharge other) {
        return monthlyCharge == other.monthlyCharge && costs.equals(other.costs);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.monthlyCharge, this.costs);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MonthlyChargeStage builder() {
        return new Builder();
    }

    public interface MonthlyChargeStage {
        _FinalStage monthlyCharge(double monthlyCharge);

        Builder from(SubscriptionMonthlyCharge other);
    }

    public interface _FinalStage {
        SubscriptionMonthlyCharge build();

        _FinalStage costs(List<Map<String, Object>> costs);

        _FinalStage addCosts(Map<String, Object> costs);

        _FinalStage addAllCosts(List<Map<String, Object>> costs);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MonthlyChargeStage, _FinalStage {
        private double monthlyCharge;

        private List<Map<String, Object>> costs = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SubscriptionMonthlyCharge other) {
            monthlyCharge(other.getMonthlyCharge());
            costs(other.getCosts());
            return this;
        }

        /**
         * <p>This is the monthly charge for the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("monthlyCharge")
        public _FinalStage monthlyCharge(double monthlyCharge) {
            this.monthlyCharge = monthlyCharge;
            return this;
        }

        /**
         * <p>These are the different costs that make up the monthly charge.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllCosts(List<Map<String, Object>> costs) {
            this.costs.addAll(costs);
            return this;
        }

        /**
         * <p>These are the different costs that make up the monthly charge.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addCosts(Map<String, Object> costs) {
            this.costs.add(costs);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "costs", nulls = Nulls.SKIP)
        public _FinalStage costs(List<Map<String, Object>> costs) {
            this.costs.clear();
            this.costs.addAll(costs);
            return this;
        }

        @java.lang.Override
        public SubscriptionMonthlyCharge build() {
            return new SubscriptionMonthlyCharge(monthlyCharge, costs, additionalProperties);
        }
    }
}
