/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ClientInboundMessageMessage {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ClientInboundMessageMessage(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ClientInboundMessageMessage addMessage(ClientInboundMessageAddMessage value) {
        return new ClientInboundMessageMessage(new AddMessageValue(value));
    }

    public static ClientInboundMessageMessage control(ClientInboundMessageControl value) {
        return new ClientInboundMessageMessage(new ControlValue(value));
    }

    public static ClientInboundMessageMessage say(ClientInboundMessageSay value) {
        return new ClientInboundMessageMessage(new SayValue(value));
    }

    public static ClientInboundMessageMessage transfer(ClientInboundMessageTransfer value) {
        return new ClientInboundMessageMessage(new TransferValue(value));
    }

    public boolean isAddMessage() {
        return value instanceof AddMessageValue;
    }

    public boolean isControl() {
        return value instanceof ControlValue;
    }

    public boolean isSay() {
        return value instanceof SayValue;
    }

    public boolean isTransfer() {
        return value instanceof TransferValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ClientInboundMessageAddMessage> getAddMessage() {
        if (isAddMessage()) {
            return Optional.of(((AddMessageValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ClientInboundMessageControl> getControl() {
        if (isControl()) {
            return Optional.of(((ControlValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ClientInboundMessageSay> getSay() {
        if (isSay()) {
            return Optional.of(((SayValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ClientInboundMessageTransfer> getTransfer() {
        if (isTransfer()) {
            return Optional.of(((TransferValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitAddMessage(ClientInboundMessageAddMessage addMessage);

        T visitControl(ClientInboundMessageControl control);

        T visitSay(ClientInboundMessageSay say);

        T visitTransfer(ClientInboundMessageTransfer transfer);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(AddMessageValue.class),
        @JsonSubTypes.Type(ControlValue.class),
        @JsonSubTypes.Type(SayValue.class),
        @JsonSubTypes.Type(TransferValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("add-message")
    private static final class AddMessageValue implements Value {
        @JsonUnwrapped
        private ClientInboundMessageAddMessage value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AddMessageValue() {}

        private AddMessageValue(ClientInboundMessageAddMessage value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAddMessage(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AddMessageValue && equalTo((AddMessageValue) other);
        }

        private boolean equalTo(AddMessageValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ClientInboundMessageMessage{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("control")
    private static final class ControlValue implements Value {
        @JsonUnwrapped
        private ClientInboundMessageControl value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ControlValue() {}

        private ControlValue(ClientInboundMessageControl value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitControl(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ControlValue && equalTo((ControlValue) other);
        }

        private boolean equalTo(ControlValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ClientInboundMessageMessage{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("say")
    private static final class SayValue implements Value {
        @JsonUnwrapped
        private ClientInboundMessageSay value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SayValue() {}

        private SayValue(ClientInboundMessageSay value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSay(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SayValue && equalTo((SayValue) other);
        }

        private boolean equalTo(SayValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ClientInboundMessageMessage{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("transfer")
    private static final class TransferValue implements Value {
        @JsonUnwrapped
        private ClientInboundMessageTransfer value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TransferValue() {}

        private TransferValue(ClientInboundMessageTransfer value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTransfer(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TransferValue && equalTo((TransferValue) other);
        }

        private boolean equalTo(TransferValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ClientInboundMessageMessage{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ClientInboundMessageMessage{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
