/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateConversationBlockDto.Builder.class)
public final class CreateConversationBlockDto {
    private final Optional<List<CreateConversationBlockDtoMessagesItem>> messages;

    private final Optional<JsonSchema> inputSchema;

    private final Optional<JsonSchema> outputSchema;

    private final String instruction;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private CreateConversationBlockDto(
            Optional<List<CreateConversationBlockDtoMessagesItem>> messages,
            Optional<JsonSchema> inputSchema,
            Optional<JsonSchema> outputSchema,
            String instruction,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.inputSchema = inputSchema;
        this.outputSchema = outputSchema;
        this.instruction = instruction;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the pre-configured messages that will be spoken to the user while the block is running.
     */
    @JsonProperty("messages")
    public Optional<List<CreateConversationBlockDtoMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return This is the input schema for the block. This is the input the block needs to run. It's given to the block as <code>steps[0].input</code>
     * <p>These are accessible as variables:</p>
     * <ul>
     * <li>({{input.propertyName}}) in context of the block execution (step)</li>
     * <li>({{stepName.input.propertyName}}) in context of the workflow</li>
     * </ul>
     */
    @JsonProperty("inputSchema")
    public Optional<JsonSchema> getInputSchema() {
        return inputSchema;
    }

    /**
     * @return This is the output schema for the block. This is the output the block will return to the workflow (<code>{{stepName.output}}</code>).
     * <p>These are accessible as variables:</p>
     * <ul>
     * <li>({{output.propertyName}}) in context of the block execution (step)</li>
     * <li>({{stepName.output.propertyName}}) in context of the workflow (read caveat #1)</li>
     * <li>({{blockName.output.propertyName}}) in context of the workflow (read caveat #2)</li>
     * </ul>
     * <p>Caveats:</p>
     * <ol>
     * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
     * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
     * </ol>
     */
    @JsonProperty("outputSchema")
    public Optional<JsonSchema> getOutputSchema() {
        return outputSchema;
    }

    /**
     * @return This is the instruction to the model.
     * <p>You can reference any variable in the context of the current block execution (step):</p>
     * <ul>
     * <li>&quot;{{input.your-property-name}}&quot; for the current step's input</li>
     * <li>&quot;{{your-step-name.output.your-property-name}}&quot; for another step's output (in the same workflow; read caveat #1)</li>
     * <li>&quot;{{your-step-name.input.your-property-name}}&quot; for another step's input (in the same workflow; read caveat #1)</li>
     * <li>&quot;{{your-block-name.output.your-property-name}}&quot; for another block's output (in the same workflow; read caveat #2)</li>
     * <li>&quot;{{your-block-name.input.your-property-name}}&quot; for another block's input (in the same workflow; read caveat #2)</li>
     * <li>&quot;{{workflow.input.your-property-name}}&quot; for the current workflow's input</li>
     * <li>&quot;{{global.your-property-name}}&quot; for the global context</li>
     * </ul>
     * <p>This can be as simple or as complex as you want it to be.</p>
     * <ul>
     * <li>&quot;say hello and ask the user about their day!&quot;</li>
     * <li>&quot;collect the user's first and last name&quot;</li>
     * <li>&quot;user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}&quot;</li>
     * </ul>
     * <p>Caveats:</p>
     * <ol>
     * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output/input.propertyName}} will reference the latest usage of the step.</li>
     * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output/input.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
     * </ol>
     */
    @JsonProperty("instruction")
    public String getInstruction() {
        return instruction;
    }

    /**
     * @return This is the name of the block. This is just for your reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateConversationBlockDto && equalTo((CreateConversationBlockDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateConversationBlockDto other) {
        return messages.equals(other.messages)
                && inputSchema.equals(other.inputSchema)
                && outputSchema.equals(other.outputSchema)
                && instruction.equals(other.instruction)
                && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.messages, this.inputSchema, this.outputSchema, this.instruction, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InstructionStage builder() {
        return new Builder();
    }

    public interface InstructionStage {
        _FinalStage instruction(@NotNull String instruction);

        Builder from(CreateConversationBlockDto other);
    }

    public interface _FinalStage {
        CreateConversationBlockDto build();

        _FinalStage messages(Optional<List<CreateConversationBlockDtoMessagesItem>> messages);

        _FinalStage messages(List<CreateConversationBlockDtoMessagesItem> messages);

        _FinalStage inputSchema(Optional<JsonSchema> inputSchema);

        _FinalStage inputSchema(JsonSchema inputSchema);

        _FinalStage outputSchema(Optional<JsonSchema> outputSchema);

        _FinalStage outputSchema(JsonSchema outputSchema);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements InstructionStage, _FinalStage {
        private String instruction;

        private Optional<String> name = Optional.empty();

        private Optional<JsonSchema> outputSchema = Optional.empty();

        private Optional<JsonSchema> inputSchema = Optional.empty();

        private Optional<List<CreateConversationBlockDtoMessagesItem>> messages = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateConversationBlockDto other) {
            messages(other.getMessages());
            inputSchema(other.getInputSchema());
            outputSchema(other.getOutputSchema());
            instruction(other.getInstruction());
            name(other.getName());
            return this;
        }

        /**
         * <p>This is the instruction to the model.</p>
         * <p>You can reference any variable in the context of the current block execution (step):</p>
         * <ul>
         * <li>&quot;{{input.your-property-name}}&quot; for the current step's input</li>
         * <li>&quot;{{your-step-name.output.your-property-name}}&quot; for another step's output (in the same workflow; read caveat #1)</li>
         * <li>&quot;{{your-step-name.input.your-property-name}}&quot; for another step's input (in the same workflow; read caveat #1)</li>
         * <li>&quot;{{your-block-name.output.your-property-name}}&quot; for another block's output (in the same workflow; read caveat #2)</li>
         * <li>&quot;{{your-block-name.input.your-property-name}}&quot; for another block's input (in the same workflow; read caveat #2)</li>
         * <li>&quot;{{workflow.input.your-property-name}}&quot; for the current workflow's input</li>
         * <li>&quot;{{global.your-property-name}}&quot; for the global context</li>
         * </ul>
         * <p>This can be as simple or as complex as you want it to be.</p>
         * <ul>
         * <li>&quot;say hello and ask the user about their day!&quot;</li>
         * <li>&quot;collect the user's first and last name&quot;</li>
         * <li>&quot;user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}&quot;</li>
         * </ul>
         * <p>Caveats:</p>
         * <ol>
         * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output/input.propertyName}} will reference the latest usage of the step.</li>
         * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output/input.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("instruction")
        public _FinalStage instruction(@NotNull String instruction) {
            this.instruction = Objects.requireNonNull(instruction, "instruction must not be null");
            return this;
        }

        /**
         * <p>This is the name of the block. This is just for your reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This is the output schema for the block. This is the output the block will return to the workflow (<code>{{stepName.output}}</code>).</p>
         * <p>These are accessible as variables:</p>
         * <ul>
         * <li>({{output.propertyName}}) in context of the block execution (step)</li>
         * <li>({{stepName.output.propertyName}}) in context of the workflow (read caveat #1)</li>
         * <li>({{blockName.output.propertyName}}) in context of the workflow (read caveat #2)</li>
         * </ul>
         * <p>Caveats:</p>
         * <ol>
         * <li>a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step.</li>
         * <li>a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage outputSchema(JsonSchema outputSchema) {
            this.outputSchema = Optional.ofNullable(outputSchema);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "outputSchema", nulls = Nulls.SKIP)
        public _FinalStage outputSchema(Optional<JsonSchema> outputSchema) {
            this.outputSchema = outputSchema;
            return this;
        }

        /**
         * <p>This is the input schema for the block. This is the input the block needs to run. It's given to the block as <code>steps[0].input</code></p>
         * <p>These are accessible as variables:</p>
         * <ul>
         * <li>({{input.propertyName}}) in context of the block execution (step)</li>
         * <li>({{stepName.input.propertyName}}) in context of the workflow</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage inputSchema(JsonSchema inputSchema) {
            this.inputSchema = Optional.ofNullable(inputSchema);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "inputSchema", nulls = Nulls.SKIP)
        public _FinalStage inputSchema(Optional<JsonSchema> inputSchema) {
            this.inputSchema = inputSchema;
            return this;
        }

        /**
         * <p>These are the pre-configured messages that will be spoken to the user while the block is running.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<CreateConversationBlockDtoMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<CreateConversationBlockDtoMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        @java.lang.Override
        public CreateConversationBlockDto build() {
            return new CreateConversationBlockDto(
                    messages, inputSchema, outputSchema, instruction, name, additionalProperties);
        }
    }
}
