/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ServerMessageResponseAssistantRequest.Builder.class)
public final class ServerMessageResponseAssistantRequest {
    private final Optional<ServerMessageResponseAssistantRequestDestination> destination;

    private final Optional<String> assistantId;

    private final Optional<CreateAssistantDto> assistant;

    private final Optional<AssistantOverrides> assistantOverrides;

    private final Optional<String> squadId;

    private final Optional<CreateSquadDto> squad;

    private final Optional<String> error;

    private final Map<String, Object> additionalProperties;

    private ServerMessageResponseAssistantRequest(
            Optional<ServerMessageResponseAssistantRequestDestination> destination,
            Optional<String> assistantId,
            Optional<CreateAssistantDto> assistant,
            Optional<AssistantOverrides> assistantOverrides,
            Optional<String> squadId,
            Optional<CreateSquadDto> squad,
            Optional<String> error,
            Map<String, Object> additionalProperties) {
        this.destination = destination;
        this.assistantId = assistantId;
        this.assistant = assistant;
        this.assistantOverrides = assistantOverrides;
        this.squadId = squadId;
        this.squad = squad;
        this.error = error;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the destination to transfer the inbound call to. This will immediately transfer without using any assistants.
     * <p>If this is sent, <code>assistantId</code>, <code>assistant</code>, <code>squadId</code>, and <code>squad</code> are ignored.</p>
     */
    @JsonProperty("destination")
    public Optional<ServerMessageResponseAssistantRequestDestination> getDestination() {
        return destination;
    }

    /**
     * @return This is the assistant that will be used for the call. To use a transient assistant, use <code>assistant</code> instead.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the assistant that will be used for the call. To use an existing assistant, use <code>assistantId</code> instead.
     * <p>If you're unsure why you're getting an invalid assistant, try logging your response and send the JSON blob to POST /assistant which will return the validation errors.</p>
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return These are the overrides for the <code>assistant</code> or <code>assistantId</code>'s settings and template variables.
     */
    @JsonProperty("assistantOverrides")
    public Optional<AssistantOverrides> getAssistantOverrides() {
        return assistantOverrides;
    }

    /**
     * @return This is the squad that will be used for the call. To use a transient squad, use <code>squad</code> instead.
     */
    @JsonProperty("squadId")
    public Optional<String> getSquadId() {
        return squadId;
    }

    /**
     * @return This is a squad that will be used for the call. To use an existing squad, use <code>squadId</code> instead.
     */
    @JsonProperty("squad")
    public Optional<CreateSquadDto> getSquad() {
        return squad;
    }

    /**
     * @return This is the error if the call shouldn't be accepted. This is spoken to the customer.
     * <p>If this is sent, <code>assistantId</code>, <code>assistant</code>, <code>squadId</code>, <code>squad</code>, and <code>destination</code> are ignored.</p>
     */
    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ServerMessageResponseAssistantRequest
                && equalTo((ServerMessageResponseAssistantRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ServerMessageResponseAssistantRequest other) {
        return destination.equals(other.destination)
                && assistantId.equals(other.assistantId)
                && assistant.equals(other.assistant)
                && assistantOverrides.equals(other.assistantOverrides)
                && squadId.equals(other.squadId)
                && squad.equals(other.squad)
                && error.equals(other.error);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.destination,
                this.assistantId,
                this.assistant,
                this.assistantOverrides,
                this.squadId,
                this.squad,
                this.error);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ServerMessageResponseAssistantRequestDestination> destination = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<AssistantOverrides> assistantOverrides = Optional.empty();

        private Optional<String> squadId = Optional.empty();

        private Optional<CreateSquadDto> squad = Optional.empty();

        private Optional<String> error = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ServerMessageResponseAssistantRequest other) {
            destination(other.getDestination());
            assistantId(other.getAssistantId());
            assistant(other.getAssistant());
            assistantOverrides(other.getAssistantOverrides());
            squadId(other.getSquadId());
            squad(other.getSquad());
            error(other.getError());
            return this;
        }

        @JsonSetter(value = "destination", nulls = Nulls.SKIP)
        public Builder destination(Optional<ServerMessageResponseAssistantRequestDestination> destination) {
            this.destination = destination;
            return this;
        }

        public Builder destination(ServerMessageResponseAssistantRequestDestination destination) {
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public Builder assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        public Builder assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public Builder assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        public Builder assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        @JsonSetter(value = "assistantOverrides", nulls = Nulls.SKIP)
        public Builder assistantOverrides(Optional<AssistantOverrides> assistantOverrides) {
            this.assistantOverrides = assistantOverrides;
            return this;
        }

        public Builder assistantOverrides(AssistantOverrides assistantOverrides) {
            this.assistantOverrides = Optional.ofNullable(assistantOverrides);
            return this;
        }

        @JsonSetter(value = "squadId", nulls = Nulls.SKIP)
        public Builder squadId(Optional<String> squadId) {
            this.squadId = squadId;
            return this;
        }

        public Builder squadId(String squadId) {
            this.squadId = Optional.ofNullable(squadId);
            return this;
        }

        @JsonSetter(value = "squad", nulls = Nulls.SKIP)
        public Builder squad(Optional<CreateSquadDto> squad) {
            this.squad = squad;
            return this;
        }

        public Builder squad(CreateSquadDto squad) {
            this.squad = Optional.ofNullable(squad);
            return this;
        }

        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public Builder error(Optional<String> error) {
            this.error = error;
            return this;
        }

        public Builder error(String error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        public ServerMessageResponseAssistantRequest build() {
            return new ServerMessageResponseAssistantRequest(
                    destination,
                    assistantId,
                    assistant,
                    assistantOverrides,
                    squadId,
                    squad,
                    error,
                    additionalProperties);
        }
    }
}
