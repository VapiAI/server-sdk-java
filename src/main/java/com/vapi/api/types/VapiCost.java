/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VapiCost.Builder.class)
public final class VapiCost {
    private final double minutes;

    private final double cost;

    private final Map<String, Object> additionalProperties;

    private VapiCost(double minutes, double cost, Map<String, Object> additionalProperties) {
        this.minutes = minutes;
        this.cost = cost;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the minutes of Vapi usage. This should match <code>call.endedAt</code> - <code>call.startedAt</code>.
     */
    @JsonProperty("minutes")
    public double getMinutes() {
        return minutes;
    }

    /**
     * @return This is the cost of the component in USD.
     */
    @JsonProperty("cost")
    public double getCost() {
        return cost;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VapiCost && equalTo((VapiCost) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VapiCost other) {
        return minutes == other.minutes && cost == other.cost;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.minutes, this.cost);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MinutesStage builder() {
        return new Builder();
    }

    public interface MinutesStage {
        CostStage minutes(double minutes);

        Builder from(VapiCost other);
    }

    public interface CostStage {
        _FinalStage cost(double cost);
    }

    public interface _FinalStage {
        VapiCost build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MinutesStage, CostStage, _FinalStage {
        private double minutes;

        private double cost;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(VapiCost other) {
            minutes(other.getMinutes());
            cost(other.getCost());
            return this;
        }

        /**
         * <p>This is the minutes of Vapi usage. This should match <code>call.endedAt</code> - <code>call.startedAt</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("minutes")
        public CostStage minutes(double minutes) {
            this.minutes = minutes;
            return this;
        }

        /**
         * <p>This is the cost of the component in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cost")
        public _FinalStage cost(double cost) {
            this.cost = cost;
            return this;
        }

        @java.lang.Override
        public VapiCost build() {
            return new VapiCost(minutes, cost, additionalProperties);
        }
    }
}
