/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Workflow.Builder.class)
public final class Workflow {
    private final List<WorkflowNodesItem> nodes;

    private final String id;

    private final String orgId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final String name;

    private final List<Edge> edges;

    private final Map<String, Object> additionalProperties;

    private Workflow(
            List<WorkflowNodesItem> nodes,
            String id,
            String orgId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            String name,
            List<Edge> edges,
            Map<String, Object> additionalProperties) {
        this.nodes = nodes;
        this.id = id;
        this.orgId = orgId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = name;
        this.edges = edges;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("nodes")
    public List<WorkflowNodesItem> getNodes() {
        return nodes;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("edges")
    public List<Edge> getEdges() {
        return edges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Workflow && equalTo((Workflow) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Workflow other) {
        return nodes.equals(other.nodes)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && name.equals(other.name)
                && edges.equals(other.edges);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nodes, this.id, this.orgId, this.createdAt, this.updatedAt, this.name, this.edges);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        OrgIdStage id(@NotNull String id);

        Builder from(Workflow other);
    }

    public interface OrgIdStage {
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        NameStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        Workflow build();

        _FinalStage nodes(List<WorkflowNodesItem> nodes);

        _FinalStage addNodes(WorkflowNodesItem nodes);

        _FinalStage addAllNodes(List<WorkflowNodesItem> nodes);

        _FinalStage edges(List<Edge> edges);

        _FinalStage addEdges(Edge edges);

        _FinalStage addAllEdges(List<Edge> edges);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, OrgIdStage, CreatedAtStage, UpdatedAtStage, NameStage, _FinalStage {
        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private String name;

        private List<Edge> edges = new ArrayList<>();

        private List<WorkflowNodesItem> nodes = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Workflow other) {
            nodes(other.getNodes());
            id(other.getId());
            orgId(other.getOrgId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            name(other.getName());
            edges(other.getEdges());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public NameStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEdges(List<Edge> edges) {
            this.edges.addAll(edges);
            return this;
        }

        @java.lang.Override
        public _FinalStage addEdges(Edge edges) {
            this.edges.add(edges);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "edges", nulls = Nulls.SKIP)
        public _FinalStage edges(List<Edge> edges) {
            this.edges.clear();
            this.edges.addAll(edges);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllNodes(List<WorkflowNodesItem> nodes) {
            this.nodes.addAll(nodes);
            return this;
        }

        @java.lang.Override
        public _FinalStage addNodes(WorkflowNodesItem nodes) {
            this.nodes.add(nodes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nodes", nulls = Nulls.SKIP)
        public _FinalStage nodes(List<WorkflowNodesItem> nodes) {
            this.nodes.clear();
            this.nodes.addAll(nodes);
            return this;
        }

        @java.lang.Override
        public Workflow build() {
            return new Workflow(nodes, id, orgId, createdAt, updatedAt, name, edges, additionalProperties);
        }
    }
}
