/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientMessageToolCallsResult.Builder.class)
public final class ClientMessageToolCallsResult {
    private final Map<String, Object> toolCallResult;

    private final Map<String, Object> additionalProperties;

    private ClientMessageToolCallsResult(Map<String, Object> toolCallResult, Map<String, Object> additionalProperties) {
        this.toolCallResult = toolCallResult;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the result of the tool call.
     */
    @JsonProperty("toolCallResult")
    public Map<String, Object> getToolCallResult() {
        return toolCallResult;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientMessageToolCallsResult && equalTo((ClientMessageToolCallsResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientMessageToolCallsResult other) {
        return toolCallResult.equals(other.toolCallResult);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.toolCallResult);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, Object> toolCallResult = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClientMessageToolCallsResult other) {
            toolCallResult(other.getToolCallResult());
            return this;
        }

        @JsonSetter(value = "toolCallResult", nulls = Nulls.SKIP)
        public Builder toolCallResult(Map<String, Object> toolCallResult) {
            this.toolCallResult.clear();
            this.toolCallResult.putAll(toolCallResult);
            return this;
        }

        public Builder putAllToolCallResult(Map<String, Object> toolCallResult) {
            this.toolCallResult.putAll(toolCallResult);
            return this;
        }

        public Builder toolCallResult(String key, Object value) {
            this.toolCallResult.put(key, value);
            return this;
        }

        public ClientMessageToolCallsResult build() {
            return new ClientMessageToolCallsResult(toolCallResult, additionalProperties);
        }
    }
}
