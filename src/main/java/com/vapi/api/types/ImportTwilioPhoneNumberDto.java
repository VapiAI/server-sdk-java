/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ImportTwilioPhoneNumberDto.Builder.class)
public final class ImportTwilioPhoneNumberDto {
    private final Optional<ImportTwilioPhoneNumberDtoFallbackDestination> fallbackDestination;

    private final String twilioPhoneNumber;

    private final String twilioAccountSid;

    private final String twilioAuthToken;

    private final Optional<String> name;

    private final Optional<String> assistantId;

    private final Optional<String> squadId;

    private final Optional<Server> server;

    private final Map<String, Object> additionalProperties;

    private ImportTwilioPhoneNumberDto(
            Optional<ImportTwilioPhoneNumberDtoFallbackDestination> fallbackDestination,
            String twilioPhoneNumber,
            String twilioAccountSid,
            String twilioAuthToken,
            Optional<String> name,
            Optional<String> assistantId,
            Optional<String> squadId,
            Optional<Server> server,
            Map<String, Object> additionalProperties) {
        this.fallbackDestination = fallbackDestination;
        this.twilioPhoneNumber = twilioPhoneNumber;
        this.twilioAccountSid = twilioAccountSid;
        this.twilioAuthToken = twilioAuthToken;
        this.name = name;
        this.assistantId = assistantId;
        this.squadId = squadId;
        this.server = server;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the fallback destination an inbound call will be transferred to if:
     * <ol>
     * <li><code>assistantId</code> is not set</li>
     * <li><code>squadId</code> is not set</li>
     * <li>and, <code>assistant-request</code> message to the <code>serverUrl</code> fails</li>
     * </ol>
     * <p>If this is not set and above conditions are met, the inbound call is hung up with an error message.</p>
     */
    @JsonProperty("fallbackDestination")
    public Optional<ImportTwilioPhoneNumberDtoFallbackDestination> getFallbackDestination() {
        return fallbackDestination;
    }

    /**
     * @return These are the digits of the phone number you own on your Twilio.
     */
    @JsonProperty("twilioPhoneNumber")
    public String getTwilioPhoneNumber() {
        return twilioPhoneNumber;
    }

    /**
     * @return This is your Twilio Account SID that will be used to handle this phone number.
     */
    @JsonProperty("twilioAccountSid")
    public String getTwilioAccountSid() {
        return twilioAccountSid;
    }

    /**
     * @return This is the Twilio Auth Token that will be used to handle this phone number.
     */
    @JsonProperty("twilioAuthToken")
    public String getTwilioAuthToken() {
        return twilioAuthToken;
    }

    /**
     * @return This is the name of the phone number. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the assistant that will be used for incoming calls to this phone number.
     * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the squad that will be used for incoming calls to this phone number.
     * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
     */
    @JsonProperty("squadId")
    public Optional<String> getSquadId() {
        return squadId;
    }

    /**
     * @return This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.
     * <p>The order of precedence is:</p>
     * <ol>
     * <li>assistant.server</li>
     * <li>phoneNumber.server</li>
     * <li>org.server</li>
     * </ol>
     */
    @JsonProperty("server")
    public Optional<Server> getServer() {
        return server;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ImportTwilioPhoneNumberDto && equalTo((ImportTwilioPhoneNumberDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ImportTwilioPhoneNumberDto other) {
        return fallbackDestination.equals(other.fallbackDestination)
                && twilioPhoneNumber.equals(other.twilioPhoneNumber)
                && twilioAccountSid.equals(other.twilioAccountSid)
                && twilioAuthToken.equals(other.twilioAuthToken)
                && name.equals(other.name)
                && assistantId.equals(other.assistantId)
                && squadId.equals(other.squadId)
                && server.equals(other.server);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.fallbackDestination,
                this.twilioPhoneNumber,
                this.twilioAccountSid,
                this.twilioAuthToken,
                this.name,
                this.assistantId,
                this.squadId,
                this.server);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TwilioPhoneNumberStage builder() {
        return new Builder();
    }

    public interface TwilioPhoneNumberStage {
        TwilioAccountSidStage twilioPhoneNumber(@NotNull String twilioPhoneNumber);

        Builder from(ImportTwilioPhoneNumberDto other);
    }

    public interface TwilioAccountSidStage {
        TwilioAuthTokenStage twilioAccountSid(@NotNull String twilioAccountSid);
    }

    public interface TwilioAuthTokenStage {
        _FinalStage twilioAuthToken(@NotNull String twilioAuthToken);
    }

    public interface _FinalStage {
        ImportTwilioPhoneNumberDto build();

        _FinalStage fallbackDestination(Optional<ImportTwilioPhoneNumberDtoFallbackDestination> fallbackDestination);

        _FinalStage fallbackDestination(ImportTwilioPhoneNumberDtoFallbackDestination fallbackDestination);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        _FinalStage squadId(Optional<String> squadId);

        _FinalStage squadId(String squadId);

        _FinalStage server(Optional<Server> server);

        _FinalStage server(Server server);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TwilioPhoneNumberStage, TwilioAccountSidStage, TwilioAuthTokenStage, _FinalStage {
        private String twilioPhoneNumber;

        private String twilioAccountSid;

        private String twilioAuthToken;

        private Optional<Server> server = Optional.empty();

        private Optional<String> squadId = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<ImportTwilioPhoneNumberDtoFallbackDestination> fallbackDestination = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ImportTwilioPhoneNumberDto other) {
            fallbackDestination(other.getFallbackDestination());
            twilioPhoneNumber(other.getTwilioPhoneNumber());
            twilioAccountSid(other.getTwilioAccountSid());
            twilioAuthToken(other.getTwilioAuthToken());
            name(other.getName());
            assistantId(other.getAssistantId());
            squadId(other.getSquadId());
            server(other.getServer());
            return this;
        }

        /**
         * <p>These are the digits of the phone number you own on your Twilio.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("twilioPhoneNumber")
        public TwilioAccountSidStage twilioPhoneNumber(@NotNull String twilioPhoneNumber) {
            this.twilioPhoneNumber = Objects.requireNonNull(twilioPhoneNumber, "twilioPhoneNumber must not be null");
            return this;
        }

        /**
         * <p>This is your Twilio Account SID that will be used to handle this phone number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("twilioAccountSid")
        public TwilioAuthTokenStage twilioAccountSid(@NotNull String twilioAccountSid) {
            this.twilioAccountSid = Objects.requireNonNull(twilioAccountSid, "twilioAccountSid must not be null");
            return this;
        }

        /**
         * <p>This is the Twilio Auth Token that will be used to handle this phone number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("twilioAuthToken")
        public _FinalStage twilioAuthToken(@NotNull String twilioAuthToken) {
            this.twilioAuthToken = Objects.requireNonNull(twilioAuthToken, "twilioAuthToken must not be null");
            return this;
        }

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage server(Server server) {
            this.server = Optional.ofNullable(server);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "server", nulls = Nulls.SKIP)
        public _FinalStage server(Optional<Server> server) {
            this.server = server;
            return this;
        }

        /**
         * <p>This is the squad that will be used for incoming calls to this phone number.</p>
         * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage squadId(String squadId) {
            this.squadId = Optional.ofNullable(squadId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "squadId", nulls = Nulls.SKIP)
        public _FinalStage squadId(Optional<String> squadId) {
            this.squadId = squadId;
            return this;
        }

        /**
         * <p>This is the assistant that will be used for incoming calls to this phone number.</p>
         * <p>If neither <code>assistantId</code> nor <code>squadId</code> is set, <code>assistant-request</code> will be sent to your Server URL. Check <code>ServerMessage</code> and <code>ServerMessageResponse</code> for the shape of the message and response that is expected.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        /**
         * <p>This is the name of the phone number. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This is the fallback destination an inbound call will be transferred to if:</p>
         * <ol>
         * <li><code>assistantId</code> is not set</li>
         * <li><code>squadId</code> is not set</li>
         * <li>and, <code>assistant-request</code> message to the <code>serverUrl</code> fails</li>
         * </ol>
         * <p>If this is not set and above conditions are met, the inbound call is hung up with an error message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fallbackDestination(ImportTwilioPhoneNumberDtoFallbackDestination fallbackDestination) {
            this.fallbackDestination = Optional.ofNullable(fallbackDestination);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fallbackDestination", nulls = Nulls.SKIP)
        public _FinalStage fallbackDestination(
                Optional<ImportTwilioPhoneNumberDtoFallbackDestination> fallbackDestination) {
            this.fallbackDestination = fallbackDestination;
            return this;
        }

        @java.lang.Override
        public ImportTwilioPhoneNumberDto build() {
            return new ImportTwilioPhoneNumberDto(
                    fallbackDestination,
                    twilioPhoneNumber,
                    twilioAccountSid,
                    twilioAuthToken,
                    name,
                    assistantId,
                    squadId,
                    server,
                    additionalProperties);
        }
    }
}
