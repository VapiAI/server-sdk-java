/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChatCompletionsDto.Builder.class)
public final class ChatCompletionsDto {
    private final List<ChatCompletionMessageWorkflows> messages;

    private final Optional<String> workflowId;

    private final Optional<CreateWorkflowDto> workflow;

    private final Map<String, Object> additionalProperties;

    private ChatCompletionsDto(
            List<ChatCompletionMessageWorkflows> messages,
            Optional<String> workflowId,
            Optional<CreateWorkflowDto> workflow,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.workflowId = workflowId;
        this.workflow = workflow;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("messages")
    public List<ChatCompletionMessageWorkflows> getMessages() {
        return messages;
    }

    @JsonProperty("workflowId")
    public Optional<String> getWorkflowId() {
        return workflowId;
    }

    @JsonProperty("workflow")
    public Optional<CreateWorkflowDto> getWorkflow() {
        return workflow;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatCompletionsDto && equalTo((ChatCompletionsDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatCompletionsDto other) {
        return messages.equals(other.messages)
                && workflowId.equals(other.workflowId)
                && workflow.equals(other.workflow);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.messages, this.workflowId, this.workflow);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<ChatCompletionMessageWorkflows> messages = new ArrayList<>();

        private Optional<String> workflowId = Optional.empty();

        private Optional<CreateWorkflowDto> workflow = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ChatCompletionsDto other) {
            messages(other.getMessages());
            workflowId(other.getWorkflowId());
            workflow(other.getWorkflow());
            return this;
        }

        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(List<ChatCompletionMessageWorkflows> messages) {
            this.messages.clear();
            this.messages.addAll(messages);
            return this;
        }

        public Builder addMessages(ChatCompletionMessageWorkflows messages) {
            this.messages.add(messages);
            return this;
        }

        public Builder addAllMessages(List<ChatCompletionMessageWorkflows> messages) {
            this.messages.addAll(messages);
            return this;
        }

        @JsonSetter(value = "workflowId", nulls = Nulls.SKIP)
        public Builder workflowId(Optional<String> workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        public Builder workflowId(String workflowId) {
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        @JsonSetter(value = "workflow", nulls = Nulls.SKIP)
        public Builder workflow(Optional<CreateWorkflowDto> workflow) {
            this.workflow = workflow;
            return this;
        }

        public Builder workflow(CreateWorkflowDto workflow) {
            this.workflow = Optional.ofNullable(workflow);
            return this;
        }

        public ChatCompletionsDto build() {
            return new ChatCompletionsDto(messages, workflowId, workflow, additionalProperties);
        }
    }
}
