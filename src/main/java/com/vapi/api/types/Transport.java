/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Transport.Builder.class)
public final class Transport {
    private final Optional<TransportProvider> provider;

    private final Optional<Boolean> assistantVideoEnabled;

    private final Map<String, Object> additionalProperties;

    private Transport(
            Optional<TransportProvider> provider,
            Optional<Boolean> assistantVideoEnabled,
            Map<String, Object> additionalProperties) {
        this.provider = provider;
        this.assistantVideoEnabled = assistantVideoEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the provider used for the call.
     */
    @JsonProperty("provider")
    public Optional<TransportProvider> getProvider() {
        return provider;
    }

    /**
     * @return This is determines whether the assistant will have video enabled.
     * <p>Only relevant for <code>webCall</code> type.</p>
     */
    @JsonProperty("assistantVideoEnabled")
    public Optional<Boolean> getAssistantVideoEnabled() {
        return assistantVideoEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Transport && equalTo((Transport) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Transport other) {
        return provider.equals(other.provider) && assistantVideoEnabled.equals(other.assistantVideoEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.provider, this.assistantVideoEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TransportProvider> provider = Optional.empty();

        private Optional<Boolean> assistantVideoEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Transport other) {
            provider(other.getProvider());
            assistantVideoEnabled(other.getAssistantVideoEnabled());
            return this;
        }

        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public Builder provider(Optional<TransportProvider> provider) {
            this.provider = provider;
            return this;
        }

        public Builder provider(TransportProvider provider) {
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        @JsonSetter(value = "assistantVideoEnabled", nulls = Nulls.SKIP)
        public Builder assistantVideoEnabled(Optional<Boolean> assistantVideoEnabled) {
            this.assistantVideoEnabled = assistantVideoEnabled;
            return this;
        }

        public Builder assistantVideoEnabled(Boolean assistantVideoEnabled) {
            this.assistantVideoEnabled = Optional.ofNullable(assistantVideoEnabled);
            return this;
        }

        public Transport build() {
            return new Transport(provider, assistantVideoEnabled, additionalProperties);
        }
    }
}
