/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Server.Builder.class)
public final class Server {
    private final Optional<Double> timeoutSeconds;

    private final String url;

    private final Optional<String> secret;

    private final Optional<Map<String, Object>> headers;

    private final Map<String, Object> additionalProperties;

    private Server(
            Optional<Double> timeoutSeconds,
            String url,
            Optional<String> secret,
            Optional<Map<String, Object>> headers,
            Map<String, Object> additionalProperties) {
        this.timeoutSeconds = timeoutSeconds;
        this.url = url;
        this.secret = secret;
        this.headers = headers;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the timeout in seconds for the request to your server. Defaults to 20 seconds.
     * <p>@default 20</p>
     */
    @JsonProperty("timeoutSeconds")
    public Optional<Double> getTimeoutSeconds() {
        return timeoutSeconds;
    }

    /**
     * @return API endpoint to send requests to.
     */
    @JsonProperty("url")
    public String getUrl() {
        return url;
    }

    /**
     * @return This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.
     * <p>Same precedence logic as server.</p>
     */
    @JsonProperty("secret")
    public Optional<String> getSecret() {
        return secret;
    }

    /**
     * @return These are the custom headers to include in the request sent to your server.
     * <p>Each key-value pair represents a header name and its value.</p>
     */
    @JsonProperty("headers")
    public Optional<Map<String, Object>> getHeaders() {
        return headers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Server && equalTo((Server) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Server other) {
        return timeoutSeconds.equals(other.timeoutSeconds)
                && url.equals(other.url)
                && secret.equals(other.secret)
                && headers.equals(other.headers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.timeoutSeconds, this.url, this.secret, this.headers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UrlStage builder() {
        return new Builder();
    }

    public interface UrlStage {
        _FinalStage url(@NotNull String url);

        Builder from(Server other);
    }

    public interface _FinalStage {
        Server build();

        _FinalStage timeoutSeconds(Optional<Double> timeoutSeconds);

        _FinalStage timeoutSeconds(Double timeoutSeconds);

        _FinalStage secret(Optional<String> secret);

        _FinalStage secret(String secret);

        _FinalStage headers(Optional<Map<String, Object>> headers);

        _FinalStage headers(Map<String, Object> headers);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UrlStage, _FinalStage {
        private String url;

        private Optional<Map<String, Object>> headers = Optional.empty();

        private Optional<String> secret = Optional.empty();

        private Optional<Double> timeoutSeconds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Server other) {
            timeoutSeconds(other.getTimeoutSeconds());
            url(other.getUrl());
            secret(other.getSecret());
            headers(other.getHeaders());
            return this;
        }

        /**
         * <p>API endpoint to send requests to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("url")
        public _FinalStage url(@NotNull String url) {
            this.url = Objects.requireNonNull(url, "url must not be null");
            return this;
        }

        /**
         * <p>These are the custom headers to include in the request sent to your server.</p>
         * <p>Each key-value pair represents a header name and its value.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage headers(Map<String, Object> headers) {
            this.headers = Optional.ofNullable(headers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "headers", nulls = Nulls.SKIP)
        public _FinalStage headers(Optional<Map<String, Object>> headers) {
            this.headers = headers;
            return this;
        }

        /**
         * <p>This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.</p>
         * <p>Same precedence logic as server.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage secret(String secret) {
            this.secret = Optional.ofNullable(secret);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "secret", nulls = Nulls.SKIP)
        public _FinalStage secret(Optional<String> secret) {
            this.secret = secret;
            return this;
        }

        /**
         * <p>This is the timeout in seconds for the request to your server. Defaults to 20 seconds.</p>
         * <p>@default 20</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage timeoutSeconds(Double timeoutSeconds) {
            this.timeoutSeconds = Optional.ofNullable(timeoutSeconds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "timeoutSeconds", nulls = Nulls.SKIP)
        public _FinalStage timeoutSeconds(Optional<Double> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        @java.lang.Override
        public Server build() {
            return new Server(timeoutSeconds, url, secret, headers, additionalProperties);
        }
    }
}
