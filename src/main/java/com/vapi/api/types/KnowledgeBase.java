/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KnowledgeBase.Builder.class)
public final class KnowledgeBase {
    private final Optional<Double> topK;

    private final List<String> fileIds;

    private final Map<String, Object> additionalProperties;

    private KnowledgeBase(Optional<Double> topK, List<String> fileIds, Map<String, Object> additionalProperties) {
        this.topK = topK;
        this.fileIds = fileIds;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("provider")
    public String getProvider() {
        return "canonical";
    }

    @JsonProperty("topK")
    public Optional<Double> getTopK() {
        return topK;
    }

    @JsonProperty("fileIds")
    public List<String> getFileIds() {
        return fileIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KnowledgeBase && equalTo((KnowledgeBase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KnowledgeBase other) {
        return topK.equals(other.topK) && fileIds.equals(other.fileIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.topK, this.fileIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> topK = Optional.empty();

        private List<String> fileIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(KnowledgeBase other) {
            topK(other.getTopK());
            fileIds(other.getFileIds());
            return this;
        }

        @JsonSetter(value = "topK", nulls = Nulls.SKIP)
        public Builder topK(Optional<Double> topK) {
            this.topK = topK;
            return this;
        }

        public Builder topK(Double topK) {
            this.topK = Optional.ofNullable(topK);
            return this;
        }

        @JsonSetter(value = "fileIds", nulls = Nulls.SKIP)
        public Builder fileIds(List<String> fileIds) {
            this.fileIds.clear();
            this.fileIds.addAll(fileIds);
            return this;
        }

        public Builder addFileIds(String fileIds) {
            this.fileIds.add(fileIds);
            return this;
        }

        public Builder addAllFileIds(List<String> fileIds) {
            this.fileIds.addAll(fileIds);
            return this;
        }

        public KnowledgeBase build() {
            return new KnowledgeBase(topK, fileIds, additionalProperties);
        }
    }
}
