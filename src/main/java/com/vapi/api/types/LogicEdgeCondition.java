/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LogicEdgeCondition.Builder.class)
public final class LogicEdgeCondition {
    private final String liquid;

    private final Map<String, Object> additionalProperties;

    private LogicEdgeCondition(String liquid, Map<String, Object> additionalProperties) {
        this.liquid = liquid;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("liquid")
    public String getLiquid() {
        return liquid;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LogicEdgeCondition && equalTo((LogicEdgeCondition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LogicEdgeCondition other) {
        return liquid.equals(other.liquid);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.liquid);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LiquidStage builder() {
        return new Builder();
    }

    public interface LiquidStage {
        _FinalStage liquid(@NotNull String liquid);

        Builder from(LogicEdgeCondition other);
    }

    public interface _FinalStage {
        LogicEdgeCondition build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LiquidStage, _FinalStage {
        private String liquid;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LogicEdgeCondition other) {
            liquid(other.getLiquid());
            return this;
        }

        @java.lang.Override
        @JsonSetter("liquid")
        public _FinalStage liquid(@NotNull String liquid) {
            this.liquid = Objects.requireNonNull(liquid, "liquid must not be null");
            return this;
        }

        @java.lang.Override
        public LogicEdgeCondition build() {
            return new LogicEdgeCondition(liquid, additionalProperties);
        }
    }
}
