/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Hook.Builder.class)
public final class Hook {
    private final HookOn on;

    private final List<SayHook> do_;

    private final Map<String, Object> additionalProperties;

    private Hook(HookOn on, List<SayHook> do_, Map<String, Object> additionalProperties) {
        this.on = on;
        this.do_ = do_;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("on")
    public HookOn getOn() {
        return on;
    }

    @JsonProperty("do")
    public List<SayHook> getDo() {
        return do_;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Hook && equalTo((Hook) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Hook other) {
        return on.equals(other.on) && do_.equals(other.do_);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.on, this.do_);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OnStage builder() {
        return new Builder();
    }

    public interface OnStage {
        _FinalStage on(@NotNull HookOn on);

        Builder from(Hook other);
    }

    public interface _FinalStage {
        Hook build();

        _FinalStage do_(List<SayHook> do_);

        _FinalStage addDo(SayHook do_);

        _FinalStage addAllDo(List<SayHook> do_);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OnStage, _FinalStage {
        private HookOn on;

        private List<SayHook> do_ = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Hook other) {
            on(other.getOn());
            do_(other.getDo());
            return this;
        }

        @java.lang.Override
        @JsonSetter("on")
        public _FinalStage on(@NotNull HookOn on) {
            this.on = Objects.requireNonNull(on, "on must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllDo(List<SayHook> do_) {
            this.do_.addAll(do_);
            return this;
        }

        @java.lang.Override
        public _FinalStage addDo(SayHook do_) {
            this.do_.add(do_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "do", nulls = Nulls.SKIP)
        public _FinalStage do_(List<SayHook> do_) {
            this.do_.clear();
            this.do_.addAll(do_);
            return this;
        }

        @java.lang.Override
        public Hook build() {
            return new Hook(on, do_, additionalProperties);
        }
    }
}
