/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AutoReloadPlanDto.Builder.class)
public final class AutoReloadPlanDto {
    private final Optional<AutoReloadPlan> autoReloadPlan;

    private final Map<String, Object> additionalProperties;

    private AutoReloadPlanDto(Optional<AutoReloadPlan> autoReloadPlan, Map<String, Object> additionalProperties) {
        this.autoReloadPlan = autoReloadPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the auto reload plan to be configured for the subscription.
     * It can be null if no auto reload plan is set.
     */
    @JsonProperty("autoReloadPlan")
    public Optional<AutoReloadPlan> getAutoReloadPlan() {
        return autoReloadPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AutoReloadPlanDto && equalTo((AutoReloadPlanDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AutoReloadPlanDto other) {
        return autoReloadPlan.equals(other.autoReloadPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.autoReloadPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AutoReloadPlan> autoReloadPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AutoReloadPlanDto other) {
            autoReloadPlan(other.getAutoReloadPlan());
            return this;
        }

        @JsonSetter(value = "autoReloadPlan", nulls = Nulls.SKIP)
        public Builder autoReloadPlan(Optional<AutoReloadPlan> autoReloadPlan) {
            this.autoReloadPlan = autoReloadPlan;
            return this;
        }

        public Builder autoReloadPlan(AutoReloadPlan autoReloadPlan) {
            this.autoReloadPlan = Optional.ofNullable(autoReloadPlan);
            return this;
        }

        public AutoReloadPlanDto build() {
            return new AutoReloadPlanDto(autoReloadPlan, additionalProperties);
        }
    }
}
