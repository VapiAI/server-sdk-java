/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateS3CredentialDto.Builder.class)
public final class UpdateS3CredentialDto {
    private final String awsAccessKeyId;

    private final String awsSecretAccessKey;

    private final String region;

    private final String s3BucketName;

    private final String s3PathPrefix;

    private final Map<String, Object> additionalProperties;

    private UpdateS3CredentialDto(
            String awsAccessKeyId,
            String awsSecretAccessKey,
            String region,
            String s3BucketName,
            String s3PathPrefix,
            Map<String, Object> additionalProperties) {
        this.awsAccessKeyId = awsAccessKeyId;
        this.awsSecretAccessKey = awsSecretAccessKey;
        this.region = region;
        this.s3BucketName = s3BucketName;
        this.s3PathPrefix = s3PathPrefix;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Credential provider. Only allowed value is s3
     */
    @JsonProperty("provider")
    public String getProvider() {
        return "s3";
    }

    /**
     * @return AWS access key ID.
     */
    @JsonProperty("awsAccessKeyId")
    public String getAwsAccessKeyId() {
        return awsAccessKeyId;
    }

    /**
     * @return AWS access key secret. This is not returned in the API.
     */
    @JsonProperty("awsSecretAccessKey")
    public String getAwsSecretAccessKey() {
        return awsSecretAccessKey;
    }

    /**
     * @return AWS region in which the S3 bucket is located.
     */
    @JsonProperty("region")
    public String getRegion() {
        return region;
    }

    /**
     * @return AWS S3 bucket name.
     */
    @JsonProperty("s3BucketName")
    public String getS3BucketName() {
        return s3BucketName;
    }

    /**
     * @return The path prefix for the uploaded recording. Ex. &quot;recordings/&quot;
     */
    @JsonProperty("s3PathPrefix")
    public String getS3PathPrefix() {
        return s3PathPrefix;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateS3CredentialDto && equalTo((UpdateS3CredentialDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateS3CredentialDto other) {
        return awsAccessKeyId.equals(other.awsAccessKeyId)
                && awsSecretAccessKey.equals(other.awsSecretAccessKey)
                && region.equals(other.region)
                && s3BucketName.equals(other.s3BucketName)
                && s3PathPrefix.equals(other.s3PathPrefix);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.awsAccessKeyId, this.awsSecretAccessKey, this.region, this.s3BucketName, this.s3PathPrefix);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AwsAccessKeyIdStage builder() {
        return new Builder();
    }

    public interface AwsAccessKeyIdStage {
        AwsSecretAccessKeyStage awsAccessKeyId(@NotNull String awsAccessKeyId);

        Builder from(UpdateS3CredentialDto other);
    }

    public interface AwsSecretAccessKeyStage {
        RegionStage awsSecretAccessKey(@NotNull String awsSecretAccessKey);
    }

    public interface RegionStage {
        S3BucketNameStage region(@NotNull String region);
    }

    public interface S3BucketNameStage {
        S3PathPrefixStage s3BucketName(@NotNull String s3BucketName);
    }

    public interface S3PathPrefixStage {
        _FinalStage s3PathPrefix(@NotNull String s3PathPrefix);
    }

    public interface _FinalStage {
        UpdateS3CredentialDto build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AwsAccessKeyIdStage,
                    AwsSecretAccessKeyStage,
                    RegionStage,
                    S3BucketNameStage,
                    S3PathPrefixStage,
                    _FinalStage {
        private String awsAccessKeyId;

        private String awsSecretAccessKey;

        private String region;

        private String s3BucketName;

        private String s3PathPrefix;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateS3CredentialDto other) {
            awsAccessKeyId(other.getAwsAccessKeyId());
            awsSecretAccessKey(other.getAwsSecretAccessKey());
            region(other.getRegion());
            s3BucketName(other.getS3BucketName());
            s3PathPrefix(other.getS3PathPrefix());
            return this;
        }

        /**
         * <p>AWS access key ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("awsAccessKeyId")
        public AwsSecretAccessKeyStage awsAccessKeyId(@NotNull String awsAccessKeyId) {
            this.awsAccessKeyId = Objects.requireNonNull(awsAccessKeyId, "awsAccessKeyId must not be null");
            return this;
        }

        /**
         * <p>AWS access key secret. This is not returned in the API.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("awsSecretAccessKey")
        public RegionStage awsSecretAccessKey(@NotNull String awsSecretAccessKey) {
            this.awsSecretAccessKey = Objects.requireNonNull(awsSecretAccessKey, "awsSecretAccessKey must not be null");
            return this;
        }

        /**
         * <p>AWS region in which the S3 bucket is located.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("region")
        public S3BucketNameStage region(@NotNull String region) {
            this.region = Objects.requireNonNull(region, "region must not be null");
            return this;
        }

        /**
         * <p>AWS S3 bucket name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("s3BucketName")
        public S3PathPrefixStage s3BucketName(@NotNull String s3BucketName) {
            this.s3BucketName = Objects.requireNonNull(s3BucketName, "s3BucketName must not be null");
            return this;
        }

        /**
         * <p>The path prefix for the uploaded recording. Ex. &quot;recordings/&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("s3PathPrefix")
        public _FinalStage s3PathPrefix(@NotNull String s3PathPrefix) {
            this.s3PathPrefix = Objects.requireNonNull(s3PathPrefix, "s3PathPrefix must not be null");
            return this;
        }

        @java.lang.Override
        public UpdateS3CredentialDto build() {
            return new UpdateS3CredentialDto(
                    awsAccessKeyId, awsSecretAccessKey, region, s3BucketName, s3PathPrefix, additionalProperties);
        }
    }
}
