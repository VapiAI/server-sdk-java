/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FallbackTranscriberPlan.Builder.class)
public final class FallbackTranscriberPlan {
    private final List<FallbackTranscriberPlanTranscribersItem> transcribers;

    private final Map<String, Object> additionalProperties;

    private FallbackTranscriberPlan(
            List<FallbackTranscriberPlanTranscribersItem> transcribers, Map<String, Object> additionalProperties) {
        this.transcribers = transcribers;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("transcribers")
    public List<FallbackTranscriberPlanTranscribersItem> getTranscribers() {
        return transcribers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FallbackTranscriberPlan && equalTo((FallbackTranscriberPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FallbackTranscriberPlan other) {
        return transcribers.equals(other.transcribers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.transcribers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<FallbackTranscriberPlanTranscribersItem> transcribers = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FallbackTranscriberPlan other) {
            transcribers(other.getTranscribers());
            return this;
        }

        @JsonSetter(value = "transcribers", nulls = Nulls.SKIP)
        public Builder transcribers(List<FallbackTranscriberPlanTranscribersItem> transcribers) {
            this.transcribers.clear();
            this.transcribers.addAll(transcribers);
            return this;
        }

        public Builder addTranscribers(FallbackTranscriberPlanTranscribersItem transcribers) {
            this.transcribers.add(transcribers);
            return this;
        }

        public Builder addAllTranscribers(List<FallbackTranscriberPlanTranscribersItem> transcribers) {
            this.transcribers.addAll(transcribers);
            return this;
        }

        public FallbackTranscriberPlan build() {
            return new FallbackTranscriberPlan(transcribers, additionalProperties);
        }
    }
}
