/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VariableExtractionSchema.Builder.class)
public final class VariableExtractionSchema {
    private final VariableExtractionSchemaType type;

    private final String title;

    private final String description;

    private final Optional<List<String>> enum_;

    private final Map<String, Object> additionalProperties;

    private VariableExtractionSchema(
            VariableExtractionSchemaType type,
            String title,
            String description,
            Optional<List<String>> enum_,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.title = title;
        this.description = description;
        this.enum_ = enum_;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of output you'd like.
     * <p><code>string</code>, <code>number</code>, <code>boolean</code> are primitive types.</p>
     */
    @JsonProperty("type")
    public VariableExtractionSchemaType getType() {
        return type;
    }

    /**
     * @return This is the title of the variable.
     * <p>It can only contain letters, numbers, and underscores.</p>
     */
    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    /**
     * @return This is the description to help the model understand what it needs to output.
     */
    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    /**
     * @return This is the enum values to choose from. Only used if the type is <code>string</code>.
     */
    @JsonProperty("enum")
    public Optional<List<String>> getEnum() {
        return enum_;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VariableExtractionSchema && equalTo((VariableExtractionSchema) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VariableExtractionSchema other) {
        return type.equals(other.type)
                && title.equals(other.title)
                && description.equals(other.description)
                && enum_.equals(other.enum_);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.title, this.description, this.enum_);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        TitleStage type(@NotNull VariableExtractionSchemaType type);

        Builder from(VariableExtractionSchema other);
    }

    public interface TitleStage {
        DescriptionStage title(@NotNull String title);
    }

    public interface DescriptionStage {
        _FinalStage description(@NotNull String description);
    }

    public interface _FinalStage {
        VariableExtractionSchema build();

        _FinalStage enum_(Optional<List<String>> enum_);

        _FinalStage enum_(List<String> enum_);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, TitleStage, DescriptionStage, _FinalStage {
        private VariableExtractionSchemaType type;

        private String title;

        private String description;

        private Optional<List<String>> enum_ = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(VariableExtractionSchema other) {
            type(other.getType());
            title(other.getTitle());
            description(other.getDescription());
            enum_(other.getEnum());
            return this;
        }

        /**
         * <p>This is the type of output you'd like.</p>
         * <p><code>string</code>, <code>number</code>, <code>boolean</code> are primitive types.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public TitleStage type(@NotNull VariableExtractionSchemaType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>This is the title of the variable.</p>
         * <p>It can only contain letters, numbers, and underscores.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("title")
        public DescriptionStage title(@NotNull String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        /**
         * <p>This is the description to help the model understand what it needs to output.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("description")
        public _FinalStage description(@NotNull String description) {
            this.description = Objects.requireNonNull(description, "description must not be null");
            return this;
        }

        /**
         * <p>This is the enum values to choose from. Only used if the type is <code>string</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enum_(List<String> enum_) {
            this.enum_ = Optional.ofNullable(enum_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "enum", nulls = Nulls.SKIP)
        public _FinalStage enum_(Optional<List<String>> enum_) {
            this.enum_ = enum_;
            return this;
        }

        @java.lang.Override
        public VariableExtractionSchema build() {
            return new VariableExtractionSchema(type, title, description, enum_, additionalProperties);
        }
    }
}
