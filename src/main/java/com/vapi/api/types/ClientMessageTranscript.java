/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientMessageTranscript.Builder.class)
public final class ClientMessageTranscript {
    private final ClientMessageTranscriptType type;

    private final ClientMessageTranscriptRole role;

    private final ClientMessageTranscriptTranscriptType transcriptType;

    private final String transcript;

    private final Map<String, Object> additionalProperties;

    private ClientMessageTranscript(
            ClientMessageTranscriptType type,
            ClientMessageTranscriptRole role,
            ClientMessageTranscriptTranscriptType transcriptType,
            String transcript,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.role = role;
        this.transcriptType = transcriptType;
        this.transcript = transcript;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of the message. &quot;transcript&quot; is sent as transcriber outputs partial or final transcript.
     */
    @JsonProperty("type")
    public ClientMessageTranscriptType getType() {
        return type;
    }

    /**
     * @return This is the role for which the transcript is for.
     */
    @JsonProperty("role")
    public ClientMessageTranscriptRole getRole() {
        return role;
    }

    /**
     * @return This is the type of the transcript.
     */
    @JsonProperty("transcriptType")
    public ClientMessageTranscriptTranscriptType getTranscriptType() {
        return transcriptType;
    }

    /**
     * @return This is the transcript content.
     */
    @JsonProperty("transcript")
    public String getTranscript() {
        return transcript;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientMessageTranscript && equalTo((ClientMessageTranscript) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientMessageTranscript other) {
        return type.equals(other.type)
                && role.equals(other.role)
                && transcriptType.equals(other.transcriptType)
                && transcript.equals(other.transcript);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.role, this.transcriptType, this.transcript);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        RoleStage type(@NotNull ClientMessageTranscriptType type);

        Builder from(ClientMessageTranscript other);
    }

    public interface RoleStage {
        TranscriptTypeStage role(@NotNull ClientMessageTranscriptRole role);
    }

    public interface TranscriptTypeStage {
        TranscriptStage transcriptType(@NotNull ClientMessageTranscriptTranscriptType transcriptType);
    }

    public interface TranscriptStage {
        _FinalStage transcript(@NotNull String transcript);
    }

    public interface _FinalStage {
        ClientMessageTranscript build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TypeStage, RoleStage, TranscriptTypeStage, TranscriptStage, _FinalStage {
        private ClientMessageTranscriptType type;

        private ClientMessageTranscriptRole role;

        private ClientMessageTranscriptTranscriptType transcriptType;

        private String transcript;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientMessageTranscript other) {
            type(other.getType());
            role(other.getRole());
            transcriptType(other.getTranscriptType());
            transcript(other.getTranscript());
            return this;
        }

        /**
         * <p>This is the type of the message. &quot;transcript&quot; is sent as transcriber outputs partial or final transcript.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public RoleStage type(@NotNull ClientMessageTranscriptType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>This is the role for which the transcript is for.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("role")
        public TranscriptTypeStage role(@NotNull ClientMessageTranscriptRole role) {
            this.role = Objects.requireNonNull(role, "role must not be null");
            return this;
        }

        /**
         * <p>This is the type of the transcript.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transcriptType")
        public TranscriptStage transcriptType(@NotNull ClientMessageTranscriptTranscriptType transcriptType) {
            this.transcriptType = Objects.requireNonNull(transcriptType, "transcriptType must not be null");
            return this;
        }

        /**
         * <p>This is the transcript content.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transcript")
        public _FinalStage transcript(@NotNull String transcript) {
            this.transcript = Objects.requireNonNull(transcript, "transcript must not be null");
            return this;
        }

        @java.lang.Override
        public ClientMessageTranscript build() {
            return new ClientMessageTranscript(type, role, transcriptType, transcript, additionalProperties);
        }
    }
}
