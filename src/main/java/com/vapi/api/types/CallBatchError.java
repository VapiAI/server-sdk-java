/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CallBatchError.Builder.class)
public final class CallBatchError {
    private final CreateCustomerDto customer;

    private final String error;

    private final Map<String, Object> additionalProperties;

    private CallBatchError(CreateCustomerDto customer, String error, Map<String, Object> additionalProperties) {
        this.customer = customer;
        this.error = error;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("customer")
    public CreateCustomerDto getCustomer() {
        return customer;
    }

    @JsonProperty("error")
    public String getError() {
        return error;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CallBatchError && equalTo((CallBatchError) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CallBatchError other) {
        return customer.equals(other.customer) && error.equals(other.error);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.customer, this.error);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CustomerStage builder() {
        return new Builder();
    }

    public interface CustomerStage {
        ErrorStage customer(@NotNull CreateCustomerDto customer);

        Builder from(CallBatchError other);
    }

    public interface ErrorStage {
        _FinalStage error(@NotNull String error);
    }

    public interface _FinalStage {
        CallBatchError build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CustomerStage, ErrorStage, _FinalStage {
        private CreateCustomerDto customer;

        private String error;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CallBatchError other) {
            customer(other.getCustomer());
            error(other.getError());
            return this;
        }

        @java.lang.Override
        @JsonSetter("customer")
        public ErrorStage customer(@NotNull CreateCustomerDto customer) {
            this.customer = Objects.requireNonNull(customer, "customer must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("error")
        public _FinalStage error(@NotNull String error) {
            this.error = Objects.requireNonNull(error, "error must not be null");
            return this;
        }

        @java.lang.Override
        public CallBatchError build() {
            return new CallBatchError(customer, error, additionalProperties);
        }
    }
}
