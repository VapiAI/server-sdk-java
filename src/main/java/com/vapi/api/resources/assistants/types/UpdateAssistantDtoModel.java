/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.assistants.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vapi.api.types.AnthropicModel;
import com.vapi.api.types.AnyscaleModel;
import com.vapi.api.types.CustomLlmModel;
import com.vapi.api.types.DeepInfraModel;
import com.vapi.api.types.GroqModel;
import com.vapi.api.types.OpenAiModel;
import com.vapi.api.types.OpenRouterModel;
import com.vapi.api.types.PerplexityAiModel;
import com.vapi.api.types.TogetherAiModel;
import com.vapi.api.types.VapiModel;
import java.util.Objects;
import java.util.Optional;

public final class UpdateAssistantDtoModel {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private UpdateAssistantDtoModel(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static UpdateAssistantDtoModel anyscale(AnyscaleModel value) {
        return new UpdateAssistantDtoModel(new AnyscaleValue(value));
    }

    public static UpdateAssistantDtoModel anthropic(AnthropicModel value) {
        return new UpdateAssistantDtoModel(new AnthropicValue(value));
    }

    public static UpdateAssistantDtoModel customLlm(CustomLlmModel value) {
        return new UpdateAssistantDtoModel(new CustomLlmValue(value));
    }

    public static UpdateAssistantDtoModel deepinfra(DeepInfraModel value) {
        return new UpdateAssistantDtoModel(new DeepinfraValue(value));
    }

    public static UpdateAssistantDtoModel groq(GroqModel value) {
        return new UpdateAssistantDtoModel(new GroqValue(value));
    }

    public static UpdateAssistantDtoModel openai(OpenAiModel value) {
        return new UpdateAssistantDtoModel(new OpenaiValue(value));
    }

    public static UpdateAssistantDtoModel openrouter(OpenRouterModel value) {
        return new UpdateAssistantDtoModel(new OpenrouterValue(value));
    }

    public static UpdateAssistantDtoModel perplexityAi(PerplexityAiModel value) {
        return new UpdateAssistantDtoModel(new PerplexityAiValue(value));
    }

    public static UpdateAssistantDtoModel togetherAi(TogetherAiModel value) {
        return new UpdateAssistantDtoModel(new TogetherAiValue(value));
    }

    public static UpdateAssistantDtoModel vapi(VapiModel value) {
        return new UpdateAssistantDtoModel(new VapiValue(value));
    }

    public boolean isAnyscale() {
        return value instanceof AnyscaleValue;
    }

    public boolean isAnthropic() {
        return value instanceof AnthropicValue;
    }

    public boolean isCustomLlm() {
        return value instanceof CustomLlmValue;
    }

    public boolean isDeepinfra() {
        return value instanceof DeepinfraValue;
    }

    public boolean isGroq() {
        return value instanceof GroqValue;
    }

    public boolean isOpenai() {
        return value instanceof OpenaiValue;
    }

    public boolean isOpenrouter() {
        return value instanceof OpenrouterValue;
    }

    public boolean isPerplexityAi() {
        return value instanceof PerplexityAiValue;
    }

    public boolean isTogetherAi() {
        return value instanceof TogetherAiValue;
    }

    public boolean isVapi() {
        return value instanceof VapiValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<AnyscaleModel> getAnyscale() {
        if (isAnyscale()) {
            return Optional.of(((AnyscaleValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<AnthropicModel> getAnthropic() {
        if (isAnthropic()) {
            return Optional.of(((AnthropicValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CustomLlmModel> getCustomLlm() {
        if (isCustomLlm()) {
            return Optional.of(((CustomLlmValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<DeepInfraModel> getDeepinfra() {
        if (isDeepinfra()) {
            return Optional.of(((DeepinfraValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GroqModel> getGroq() {
        if (isGroq()) {
            return Optional.of(((GroqValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<OpenAiModel> getOpenai() {
        if (isOpenai()) {
            return Optional.of(((OpenaiValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<OpenRouterModel> getOpenrouter() {
        if (isOpenrouter()) {
            return Optional.of(((OpenrouterValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<PerplexityAiModel> getPerplexityAi() {
        if (isPerplexityAi()) {
            return Optional.of(((PerplexityAiValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TogetherAiModel> getTogetherAi() {
        if (isTogetherAi()) {
            return Optional.of(((TogetherAiValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<VapiModel> getVapi() {
        if (isVapi()) {
            return Optional.of(((VapiValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitAnyscale(AnyscaleModel anyscale);

        T visitAnthropic(AnthropicModel anthropic);

        T visitCustomLlm(CustomLlmModel customLlm);

        T visitDeepinfra(DeepInfraModel deepinfra);

        T visitGroq(GroqModel groq);

        T visitOpenai(OpenAiModel openai);

        T visitOpenrouter(OpenRouterModel openrouter);

        T visitPerplexityAi(PerplexityAiModel perplexityAi);

        T visitTogetherAi(TogetherAiModel togetherAi);

        T visitVapi(VapiModel vapi);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "provider", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(AnyscaleValue.class),
        @JsonSubTypes.Type(AnthropicValue.class),
        @JsonSubTypes.Type(CustomLlmValue.class),
        @JsonSubTypes.Type(DeepinfraValue.class),
        @JsonSubTypes.Type(GroqValue.class),
        @JsonSubTypes.Type(OpenaiValue.class),
        @JsonSubTypes.Type(OpenrouterValue.class),
        @JsonSubTypes.Type(PerplexityAiValue.class),
        @JsonSubTypes.Type(TogetherAiValue.class),
        @JsonSubTypes.Type(VapiValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("anyscale")
    private static final class AnyscaleValue implements Value {
        @JsonUnwrapped
        private AnyscaleModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AnyscaleValue() {}

        private AnyscaleValue(AnyscaleModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAnyscale(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AnyscaleValue && equalTo((AnyscaleValue) other);
        }

        private boolean equalTo(AnyscaleValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("anthropic")
    private static final class AnthropicValue implements Value {
        @JsonUnwrapped
        private AnthropicModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AnthropicValue() {}

        private AnthropicValue(AnthropicModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAnthropic(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AnthropicValue && equalTo((AnthropicValue) other);
        }

        private boolean equalTo(AnthropicValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("custom-llm")
    private static final class CustomLlmValue implements Value {
        @JsonUnwrapped
        private CustomLlmModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CustomLlmValue() {}

        private CustomLlmValue(CustomLlmModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCustomLlm(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CustomLlmValue && equalTo((CustomLlmValue) other);
        }

        private boolean equalTo(CustomLlmValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("deepinfra")
    private static final class DeepinfraValue implements Value {
        @JsonUnwrapped
        private DeepInfraModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DeepinfraValue() {}

        private DeepinfraValue(DeepInfraModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDeepinfra(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DeepinfraValue && equalTo((DeepinfraValue) other);
        }

        private boolean equalTo(DeepinfraValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("groq")
    private static final class GroqValue implements Value {
        @JsonUnwrapped
        private GroqModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GroqValue() {}

        private GroqValue(GroqModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGroq(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GroqValue && equalTo((GroqValue) other);
        }

        private boolean equalTo(GroqValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("openai")
    private static final class OpenaiValue implements Value {
        @JsonUnwrapped
        private OpenAiModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private OpenaiValue() {}

        private OpenaiValue(OpenAiModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitOpenai(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof OpenaiValue && equalTo((OpenaiValue) other);
        }

        private boolean equalTo(OpenaiValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("openrouter")
    private static final class OpenrouterValue implements Value {
        @JsonUnwrapped
        private OpenRouterModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private OpenrouterValue() {}

        private OpenrouterValue(OpenRouterModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitOpenrouter(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof OpenrouterValue && equalTo((OpenrouterValue) other);
        }

        private boolean equalTo(OpenrouterValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("perplexity-ai")
    private static final class PerplexityAiValue implements Value {
        @JsonUnwrapped
        private PerplexityAiModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PerplexityAiValue() {}

        private PerplexityAiValue(PerplexityAiModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPerplexityAi(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PerplexityAiValue && equalTo((PerplexityAiValue) other);
        }

        private boolean equalTo(PerplexityAiValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("together-ai")
    private static final class TogetherAiValue implements Value {
        @JsonUnwrapped
        private TogetherAiModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TogetherAiValue() {}

        private TogetherAiValue(TogetherAiModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTogetherAi(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TogetherAiValue && equalTo((TogetherAiValue) other);
        }

        private boolean equalTo(TogetherAiValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("vapi")
    private static final class VapiValue implements Value {
        @JsonUnwrapped
        private VapiModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private VapiValue() {}

        private VapiValue(VapiModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitVapi(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof VapiValue && equalTo((VapiValue) other);
        }

        private boolean equalTo(VapiValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateAssistantDtoModel{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
