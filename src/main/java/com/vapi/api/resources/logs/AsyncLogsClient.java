/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.logs;

import com.vapi.api.core.ClientOptions;
import com.vapi.api.core.RequestOptions;
import com.vapi.api.core.pagination.SyncPagingIterable;
import com.vapi.api.resources.logs.requests.LoggingControllerLogsDeleteQueryRequest;
import com.vapi.api.resources.logs.requests.LogsGetRequest;
import com.vapi.api.types.Log;
import java.util.concurrent.CompletableFuture;

public class AsyncLogsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawLogsClient rawClient;

    public AsyncLogsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawLogsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawLogsClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<SyncPagingIterable<Log>> get() {
        return this.rawClient.get().thenApply(response -> response.body());
    }

    public CompletableFuture<SyncPagingIterable<Log>> get(LogsGetRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    public CompletableFuture<SyncPagingIterable<Log>> get(LogsGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> loggingControllerLogsDeleteQuery() {
        return this.rawClient.loggingControllerLogsDeleteQuery().thenApply(response -> response.body());
    }

    public CompletableFuture<Void> loggingControllerLogsDeleteQuery(LoggingControllerLogsDeleteQueryRequest request) {
        return this.rawClient.loggingControllerLogsDeleteQuery(request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> loggingControllerLogsDeleteQuery(
            LoggingControllerLogsDeleteQueryRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .loggingControllerLogsDeleteQuery(request, requestOptions)
                .thenApply(response -> response.body());
    }
}
