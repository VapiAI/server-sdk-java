/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.tools.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vapi.api.types.UpdateBashToolDto;
import com.vapi.api.types.UpdateComputerToolDto;
import com.vapi.api.types.UpdateDtmfToolDto;
import com.vapi.api.types.UpdateEndCallToolDto;
import com.vapi.api.types.UpdateFunctionToolDto;
import com.vapi.api.types.UpdateGhlToolDto;
import com.vapi.api.types.UpdateGoogleCalendarCheckAvailabilityToolDto;
import com.vapi.api.types.UpdateGoogleCalendarCreateEventToolDto;
import com.vapi.api.types.UpdateGoogleSheetsRowAppendToolDto;
import com.vapi.api.types.UpdateMakeToolDto;
import com.vapi.api.types.UpdateMcpToolDto;
import com.vapi.api.types.UpdateOutputToolDto;
import com.vapi.api.types.UpdateQueryToolDto;
import com.vapi.api.types.UpdateSlackSendMessageToolDto;
import com.vapi.api.types.UpdateSmsSendToolDto;
import com.vapi.api.types.UpdateTextEditorToolDto;
import com.vapi.api.types.UpdateTransferCallToolDto;
import java.util.Objects;
import java.util.Optional;

public final class ToolsUpdateRequest {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ToolsUpdateRequest(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ToolsUpdateRequest dtmf(UpdateDtmfToolDto value) {
        return new ToolsUpdateRequest(new DtmfValue(value));
    }

    public static ToolsUpdateRequest endCall(UpdateEndCallToolDto value) {
        return new ToolsUpdateRequest(new EndCallValue(value));
    }

    public static ToolsUpdateRequest function(UpdateFunctionToolDto value) {
        return new ToolsUpdateRequest(new FunctionValue(value));
    }

    public static ToolsUpdateRequest ghl(UpdateGhlToolDto value) {
        return new ToolsUpdateRequest(new GhlValue(value));
    }

    public static ToolsUpdateRequest make(UpdateMakeToolDto value) {
        return new ToolsUpdateRequest(new MakeValue(value));
    }

    public static ToolsUpdateRequest transferCall(UpdateTransferCallToolDto value) {
        return new ToolsUpdateRequest(new TransferCallValue(value));
    }

    public static ToolsUpdateRequest output(UpdateOutputToolDto value) {
        return new ToolsUpdateRequest(new OutputValue(value));
    }

    public static ToolsUpdateRequest bash(UpdateBashToolDto value) {
        return new ToolsUpdateRequest(new BashValue(value));
    }

    public static ToolsUpdateRequest computer(UpdateComputerToolDto value) {
        return new ToolsUpdateRequest(new ComputerValue(value));
    }

    public static ToolsUpdateRequest textEditor(UpdateTextEditorToolDto value) {
        return new ToolsUpdateRequest(new TextEditorValue(value));
    }

    public static ToolsUpdateRequest query(UpdateQueryToolDto value) {
        return new ToolsUpdateRequest(new QueryValue(value));
    }

    public static ToolsUpdateRequest googleCalendarEventCreate(UpdateGoogleCalendarCreateEventToolDto value) {
        return new ToolsUpdateRequest(new GoogleCalendarEventCreateValue(value));
    }

    public static ToolsUpdateRequest googleSheetsRowAppend(UpdateGoogleSheetsRowAppendToolDto value) {
        return new ToolsUpdateRequest(new GoogleSheetsRowAppendValue(value));
    }

    public static ToolsUpdateRequest googleCalendarAvailabilityCheck(
            UpdateGoogleCalendarCheckAvailabilityToolDto value) {
        return new ToolsUpdateRequest(new GoogleCalendarAvailabilityCheckValue(value));
    }

    public static ToolsUpdateRequest slackMessageSend(UpdateSlackSendMessageToolDto value) {
        return new ToolsUpdateRequest(new SlackMessageSendValue(value));
    }

    public static ToolsUpdateRequest sms(UpdateSmsSendToolDto value) {
        return new ToolsUpdateRequest(new SmsValue(value));
    }

    public static ToolsUpdateRequest mcp(UpdateMcpToolDto value) {
        return new ToolsUpdateRequest(new McpValue(value));
    }

    public boolean isDtmf() {
        return value instanceof DtmfValue;
    }

    public boolean isEndCall() {
        return value instanceof EndCallValue;
    }

    public boolean isFunction() {
        return value instanceof FunctionValue;
    }

    public boolean isGhl() {
        return value instanceof GhlValue;
    }

    public boolean isMake() {
        return value instanceof MakeValue;
    }

    public boolean isTransferCall() {
        return value instanceof TransferCallValue;
    }

    public boolean isOutput() {
        return value instanceof OutputValue;
    }

    public boolean isBash() {
        return value instanceof BashValue;
    }

    public boolean isComputer() {
        return value instanceof ComputerValue;
    }

    public boolean isTextEditor() {
        return value instanceof TextEditorValue;
    }

    public boolean isQuery() {
        return value instanceof QueryValue;
    }

    public boolean isGoogleCalendarEventCreate() {
        return value instanceof GoogleCalendarEventCreateValue;
    }

    public boolean isGoogleSheetsRowAppend() {
        return value instanceof GoogleSheetsRowAppendValue;
    }

    public boolean isGoogleCalendarAvailabilityCheck() {
        return value instanceof GoogleCalendarAvailabilityCheckValue;
    }

    public boolean isSlackMessageSend() {
        return value instanceof SlackMessageSendValue;
    }

    public boolean isSms() {
        return value instanceof SmsValue;
    }

    public boolean isMcp() {
        return value instanceof McpValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<UpdateDtmfToolDto> getDtmf() {
        if (isDtmf()) {
            return Optional.of(((DtmfValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateEndCallToolDto> getEndCall() {
        if (isEndCall()) {
            return Optional.of(((EndCallValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateFunctionToolDto> getFunction() {
        if (isFunction()) {
            return Optional.of(((FunctionValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateGhlToolDto> getGhl() {
        if (isGhl()) {
            return Optional.of(((GhlValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateMakeToolDto> getMake() {
        if (isMake()) {
            return Optional.of(((MakeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateTransferCallToolDto> getTransferCall() {
        if (isTransferCall()) {
            return Optional.of(((TransferCallValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateOutputToolDto> getOutput() {
        if (isOutput()) {
            return Optional.of(((OutputValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateBashToolDto> getBash() {
        if (isBash()) {
            return Optional.of(((BashValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateComputerToolDto> getComputer() {
        if (isComputer()) {
            return Optional.of(((ComputerValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateTextEditorToolDto> getTextEditor() {
        if (isTextEditor()) {
            return Optional.of(((TextEditorValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateQueryToolDto> getQuery() {
        if (isQuery()) {
            return Optional.of(((QueryValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateGoogleCalendarCreateEventToolDto> getGoogleCalendarEventCreate() {
        if (isGoogleCalendarEventCreate()) {
            return Optional.of(((GoogleCalendarEventCreateValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateGoogleSheetsRowAppendToolDto> getGoogleSheetsRowAppend() {
        if (isGoogleSheetsRowAppend()) {
            return Optional.of(((GoogleSheetsRowAppendValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateGoogleCalendarCheckAvailabilityToolDto> getGoogleCalendarAvailabilityCheck() {
        if (isGoogleCalendarAvailabilityCheck()) {
            return Optional.of(((GoogleCalendarAvailabilityCheckValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateSlackSendMessageToolDto> getSlackMessageSend() {
        if (isSlackMessageSend()) {
            return Optional.of(((SlackMessageSendValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateSmsSendToolDto> getSms() {
        if (isSms()) {
            return Optional.of(((SmsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UpdateMcpToolDto> getMcp() {
        if (isMcp()) {
            return Optional.of(((McpValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitDtmf(UpdateDtmfToolDto dtmf);

        T visitEndCall(UpdateEndCallToolDto endCall);

        T visitFunction(UpdateFunctionToolDto function);

        T visitGhl(UpdateGhlToolDto ghl);

        T visitMake(UpdateMakeToolDto make);

        T visitTransferCall(UpdateTransferCallToolDto transferCall);

        T visitOutput(UpdateOutputToolDto output);

        T visitBash(UpdateBashToolDto bash);

        T visitComputer(UpdateComputerToolDto computer);

        T visitTextEditor(UpdateTextEditorToolDto textEditor);

        T visitQuery(UpdateQueryToolDto query);

        T visitGoogleCalendarEventCreate(UpdateGoogleCalendarCreateEventToolDto googleCalendarEventCreate);

        T visitGoogleSheetsRowAppend(UpdateGoogleSheetsRowAppendToolDto googleSheetsRowAppend);

        T visitGoogleCalendarAvailabilityCheck(
                UpdateGoogleCalendarCheckAvailabilityToolDto googleCalendarAvailabilityCheck);

        T visitSlackMessageSend(UpdateSlackSendMessageToolDto slackMessageSend);

        T visitSms(UpdateSmsSendToolDto sms);

        T visitMcp(UpdateMcpToolDto mcp);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(DtmfValue.class),
        @JsonSubTypes.Type(EndCallValue.class),
        @JsonSubTypes.Type(FunctionValue.class),
        @JsonSubTypes.Type(GhlValue.class),
        @JsonSubTypes.Type(MakeValue.class),
        @JsonSubTypes.Type(TransferCallValue.class),
        @JsonSubTypes.Type(OutputValue.class),
        @JsonSubTypes.Type(BashValue.class),
        @JsonSubTypes.Type(ComputerValue.class),
        @JsonSubTypes.Type(TextEditorValue.class),
        @JsonSubTypes.Type(QueryValue.class),
        @JsonSubTypes.Type(GoogleCalendarEventCreateValue.class),
        @JsonSubTypes.Type(GoogleSheetsRowAppendValue.class),
        @JsonSubTypes.Type(GoogleCalendarAvailabilityCheckValue.class),
        @JsonSubTypes.Type(SlackMessageSendValue.class),
        @JsonSubTypes.Type(SmsValue.class),
        @JsonSubTypes.Type(McpValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("dtmf")
    @JsonIgnoreProperties("type")
    private static final class DtmfValue implements Value {
        @JsonUnwrapped
        private UpdateDtmfToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DtmfValue() {}

        private DtmfValue(UpdateDtmfToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDtmf(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DtmfValue && equalTo((DtmfValue) other);
        }

        private boolean equalTo(DtmfValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("endCall")
    @JsonIgnoreProperties("type")
    private static final class EndCallValue implements Value {
        @JsonUnwrapped
        private UpdateEndCallToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private EndCallValue() {}

        private EndCallValue(UpdateEndCallToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitEndCall(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof EndCallValue && equalTo((EndCallValue) other);
        }

        private boolean equalTo(EndCallValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("function")
    @JsonIgnoreProperties("type")
    private static final class FunctionValue implements Value {
        @JsonUnwrapped
        private UpdateFunctionToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FunctionValue() {}

        private FunctionValue(UpdateFunctionToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitFunction(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FunctionValue && equalTo((FunctionValue) other);
        }

        private boolean equalTo(FunctionValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("ghl")
    @JsonIgnoreProperties("type")
    private static final class GhlValue implements Value {
        @JsonUnwrapped
        private UpdateGhlToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GhlValue() {}

        private GhlValue(UpdateGhlToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGhl(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GhlValue && equalTo((GhlValue) other);
        }

        private boolean equalTo(GhlValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("make")
    @JsonIgnoreProperties("type")
    private static final class MakeValue implements Value {
        @JsonUnwrapped
        private UpdateMakeToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MakeValue() {}

        private MakeValue(UpdateMakeToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMake(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MakeValue && equalTo((MakeValue) other);
        }

        private boolean equalTo(MakeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("transferCall")
    @JsonIgnoreProperties("type")
    private static final class TransferCallValue implements Value {
        @JsonUnwrapped
        private UpdateTransferCallToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TransferCallValue() {}

        private TransferCallValue(UpdateTransferCallToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTransferCall(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TransferCallValue && equalTo((TransferCallValue) other);
        }

        private boolean equalTo(TransferCallValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("output")
    @JsonIgnoreProperties("type")
    private static final class OutputValue implements Value {
        @JsonUnwrapped
        private UpdateOutputToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private OutputValue() {}

        private OutputValue(UpdateOutputToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitOutput(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof OutputValue && equalTo((OutputValue) other);
        }

        private boolean equalTo(OutputValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("bash")
    @JsonIgnoreProperties("type")
    private static final class BashValue implements Value {
        @JsonUnwrapped
        private UpdateBashToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BashValue() {}

        private BashValue(UpdateBashToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBash(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BashValue && equalTo((BashValue) other);
        }

        private boolean equalTo(BashValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("computer")
    @JsonIgnoreProperties("type")
    private static final class ComputerValue implements Value {
        @JsonUnwrapped
        private UpdateComputerToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ComputerValue() {}

        private ComputerValue(UpdateComputerToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitComputer(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ComputerValue && equalTo((ComputerValue) other);
        }

        private boolean equalTo(ComputerValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("textEditor")
    @JsonIgnoreProperties("type")
    private static final class TextEditorValue implements Value {
        @JsonUnwrapped
        private UpdateTextEditorToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TextEditorValue() {}

        private TextEditorValue(UpdateTextEditorToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTextEditor(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TextEditorValue && equalTo((TextEditorValue) other);
        }

        private boolean equalTo(TextEditorValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("query")
    @JsonIgnoreProperties("type")
    private static final class QueryValue implements Value {
        @JsonUnwrapped
        private UpdateQueryToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private QueryValue() {}

        private QueryValue(UpdateQueryToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitQuery(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof QueryValue && equalTo((QueryValue) other);
        }

        private boolean equalTo(QueryValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("google.calendar.event.create")
    @JsonIgnoreProperties("type")
    private static final class GoogleCalendarEventCreateValue implements Value {
        @JsonUnwrapped
        private UpdateGoogleCalendarCreateEventToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GoogleCalendarEventCreateValue() {}

        private GoogleCalendarEventCreateValue(UpdateGoogleCalendarCreateEventToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGoogleCalendarEventCreate(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GoogleCalendarEventCreateValue && equalTo((GoogleCalendarEventCreateValue) other);
        }

        private boolean equalTo(GoogleCalendarEventCreateValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("google.sheets.row.append")
    @JsonIgnoreProperties("type")
    private static final class GoogleSheetsRowAppendValue implements Value {
        @JsonUnwrapped
        private UpdateGoogleSheetsRowAppendToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GoogleSheetsRowAppendValue() {}

        private GoogleSheetsRowAppendValue(UpdateGoogleSheetsRowAppendToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGoogleSheetsRowAppend(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GoogleSheetsRowAppendValue && equalTo((GoogleSheetsRowAppendValue) other);
        }

        private boolean equalTo(GoogleSheetsRowAppendValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("google.calendar.availability.check")
    @JsonIgnoreProperties("type")
    private static final class GoogleCalendarAvailabilityCheckValue implements Value {
        @JsonUnwrapped
        private UpdateGoogleCalendarCheckAvailabilityToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GoogleCalendarAvailabilityCheckValue() {}

        private GoogleCalendarAvailabilityCheckValue(UpdateGoogleCalendarCheckAvailabilityToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGoogleCalendarAvailabilityCheck(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GoogleCalendarAvailabilityCheckValue
                    && equalTo((GoogleCalendarAvailabilityCheckValue) other);
        }

        private boolean equalTo(GoogleCalendarAvailabilityCheckValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("slack.message.send")
    @JsonIgnoreProperties("type")
    private static final class SlackMessageSendValue implements Value {
        @JsonUnwrapped
        private UpdateSlackSendMessageToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SlackMessageSendValue() {}

        private SlackMessageSendValue(UpdateSlackSendMessageToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSlackMessageSend(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SlackMessageSendValue && equalTo((SlackMessageSendValue) other);
        }

        private boolean equalTo(SlackMessageSendValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("sms")
    @JsonIgnoreProperties("type")
    private static final class SmsValue implements Value {
        @JsonUnwrapped
        private UpdateSmsSendToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SmsValue() {}

        private SmsValue(UpdateSmsSendToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSms(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SmsValue && equalTo((SmsValue) other);
        }

        private boolean equalTo(SmsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("mcp")
    @JsonIgnoreProperties("type")
    private static final class McpValue implements Value {
        @JsonUnwrapped
        private UpdateMcpToolDto value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private McpValue() {}

        private McpValue(UpdateMcpToolDto value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMcp(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof McpValue && equalTo((McpValue) other);
        }

        private boolean equalTo(McpValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateRequest{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
