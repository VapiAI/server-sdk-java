/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.workflow.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vapi.api.types.ApiRequest;
import com.vapi.api.types.Gather;
import com.vapi.api.types.Hangup;
import com.vapi.api.types.Say;
import com.vapi.api.types.Transfer;
import java.util.Objects;
import java.util.Optional;

public final class UpdateWorkflowDtoNodesItem {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private UpdateWorkflowDtoNodesItem(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static UpdateWorkflowDtoNodesItem say(Say value) {
        return new UpdateWorkflowDtoNodesItem(new SayValue(value));
    }

    public static UpdateWorkflowDtoNodesItem gather(Gather value) {
        return new UpdateWorkflowDtoNodesItem(new GatherValue(value));
    }

    public static UpdateWorkflowDtoNodesItem apiRequest(ApiRequest value) {
        return new UpdateWorkflowDtoNodesItem(new ApiRequestValue(value));
    }

    public static UpdateWorkflowDtoNodesItem hangup(Hangup value) {
        return new UpdateWorkflowDtoNodesItem(new HangupValue(value));
    }

    public static UpdateWorkflowDtoNodesItem transfer(Transfer value) {
        return new UpdateWorkflowDtoNodesItem(new TransferValue(value));
    }

    public boolean isSay() {
        return value instanceof SayValue;
    }

    public boolean isGather() {
        return value instanceof GatherValue;
    }

    public boolean isApiRequest() {
        return value instanceof ApiRequestValue;
    }

    public boolean isHangup() {
        return value instanceof HangupValue;
    }

    public boolean isTransfer() {
        return value instanceof TransferValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<Say> getSay() {
        if (isSay()) {
            return Optional.of(((SayValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Gather> getGather() {
        if (isGather()) {
            return Optional.of(((GatherValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ApiRequest> getApiRequest() {
        if (isApiRequest()) {
            return Optional.of(((ApiRequestValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Hangup> getHangup() {
        if (isHangup()) {
            return Optional.of(((HangupValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Transfer> getTransfer() {
        if (isTransfer()) {
            return Optional.of(((TransferValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitSay(Say say);

        T visitGather(Gather gather);

        T visitApiRequest(ApiRequest apiRequest);

        T visitHangup(Hangup hangup);

        T visitTransfer(Transfer transfer);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(SayValue.class),
        @JsonSubTypes.Type(GatherValue.class),
        @JsonSubTypes.Type(ApiRequestValue.class),
        @JsonSubTypes.Type(HangupValue.class),
        @JsonSubTypes.Type(TransferValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("say")
    @JsonIgnoreProperties("type")
    private static final class SayValue implements Value {
        @JsonUnwrapped
        private Say value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SayValue() {}

        private SayValue(Say value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSay(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SayValue && equalTo((SayValue) other);
        }

        private boolean equalTo(SayValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateWorkflowDtoNodesItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("gather")
    @JsonIgnoreProperties("type")
    private static final class GatherValue implements Value {
        @JsonUnwrapped
        private Gather value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GatherValue() {}

        private GatherValue(Gather value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGather(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GatherValue && equalTo((GatherValue) other);
        }

        private boolean equalTo(GatherValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateWorkflowDtoNodesItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("apiRequest")
    @JsonIgnoreProperties("type")
    private static final class ApiRequestValue implements Value {
        @JsonUnwrapped
        private ApiRequest value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ApiRequestValue() {}

        private ApiRequestValue(ApiRequest value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitApiRequest(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ApiRequestValue && equalTo((ApiRequestValue) other);
        }

        private boolean equalTo(ApiRequestValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateWorkflowDtoNodesItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("hangup")
    @JsonIgnoreProperties("type")
    private static final class HangupValue implements Value {
        @JsonUnwrapped
        private Hangup value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private HangupValue() {}

        private HangupValue(Hangup value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitHangup(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof HangupValue && equalTo((HangupValue) other);
        }

        private boolean equalTo(HangupValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateWorkflowDtoNodesItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("transfer")
    @JsonIgnoreProperties("type")
    private static final class TransferValue implements Value {
        @JsonUnwrapped
        private Transfer value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TransferValue() {}

        private TransferValue(Transfer value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTransfer(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TransferValue && equalTo((TransferValue) other);
        }

        private boolean equalTo(TransferValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateWorkflowDtoNodesItem{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UpdateWorkflowDtoNodesItem{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
