/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.workflow.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.resources.workflow.types.UpdateWorkflowDtoModel;
import com.vapi.api.resources.workflow.types.UpdateWorkflowDtoNodesItem;
import com.vapi.api.types.Edge;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateWorkflowDto.Builder.class)
public final class UpdateWorkflowDto {
    private final Optional<List<UpdateWorkflowDtoNodesItem>> nodes;

    private final Optional<UpdateWorkflowDtoModel> model;

    private final Optional<String> name;

    private final Optional<List<Edge>> edges;

    private final Map<String, Object> additionalProperties;

    private UpdateWorkflowDto(
            Optional<List<UpdateWorkflowDtoNodesItem>> nodes,
            Optional<UpdateWorkflowDtoModel> model,
            Optional<String> name,
            Optional<List<Edge>> edges,
            Map<String, Object> additionalProperties) {
        this.nodes = nodes;
        this.model = model;
        this.name = name;
        this.edges = edges;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("nodes")
    public Optional<List<UpdateWorkflowDtoNodesItem>> getNodes() {
        return nodes;
    }

    /**
     * @return These are the options for the workflow's LLM.
     */
    @JsonProperty("model")
    public Optional<UpdateWorkflowDtoModel> getModel() {
        return model;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("edges")
    public Optional<List<Edge>> getEdges() {
        return edges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateWorkflowDto && equalTo((UpdateWorkflowDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateWorkflowDto other) {
        return nodes.equals(other.nodes)
                && model.equals(other.model)
                && name.equals(other.name)
                && edges.equals(other.edges);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nodes, this.model, this.name, this.edges);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<UpdateWorkflowDtoNodesItem>> nodes = Optional.empty();

        private Optional<UpdateWorkflowDtoModel> model = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<List<Edge>> edges = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateWorkflowDto other) {
            nodes(other.getNodes());
            model(other.getModel());
            name(other.getName());
            edges(other.getEdges());
            return this;
        }

        @JsonSetter(value = "nodes", nulls = Nulls.SKIP)
        public Builder nodes(Optional<List<UpdateWorkflowDtoNodesItem>> nodes) {
            this.nodes = nodes;
            return this;
        }

        public Builder nodes(List<UpdateWorkflowDtoNodesItem> nodes) {
            this.nodes = Optional.ofNullable(nodes);
            return this;
        }

        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<UpdateWorkflowDtoModel> model) {
            this.model = model;
            return this;
        }

        public Builder model(UpdateWorkflowDtoModel model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "edges", nulls = Nulls.SKIP)
        public Builder edges(Optional<List<Edge>> edges) {
            this.edges = edges;
            return this;
        }

        public Builder edges(List<Edge> edges) {
            this.edges = Optional.ofNullable(edges);
            return this;
        }

        public UpdateWorkflowDto build() {
            return new UpdateWorkflowDto(nodes, model, name, edges, additionalProperties);
        }
    }
}
