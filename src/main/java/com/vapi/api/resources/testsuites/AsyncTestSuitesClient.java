/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.testsuites;

import com.vapi.api.core.ClientOptions;
import com.vapi.api.core.RequestOptions;
import com.vapi.api.resources.testsuites.requests.CreateTestSuiteDto;
import com.vapi.api.resources.testsuites.requests.TestSuiteControllerFindAllPaginatedRequest;
import com.vapi.api.resources.testsuites.requests.UpdateTestSuiteDto;
import com.vapi.api.types.TestSuite;
import com.vapi.api.types.TestSuitesPaginatedResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncTestSuitesClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawTestSuitesClient rawClient;

    public AsyncTestSuitesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawTestSuitesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawTestSuitesClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<TestSuitesPaginatedResponse> testSuiteControllerFindAllPaginated() {
        return this.rawClient.testSuiteControllerFindAllPaginated().thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuitesPaginatedResponse> testSuiteControllerFindAllPaginated(
            TestSuiteControllerFindAllPaginatedRequest request) {
        return this.rawClient.testSuiteControllerFindAllPaginated(request).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuitesPaginatedResponse> testSuiteControllerFindAllPaginated(
            TestSuiteControllerFindAllPaginatedRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .testSuiteControllerFindAllPaginated(request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerCreate() {
        return this.rawClient.testSuiteControllerCreate().thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerCreate(CreateTestSuiteDto request) {
        return this.rawClient.testSuiteControllerCreate(request).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerCreate(
            CreateTestSuiteDto request, RequestOptions requestOptions) {
        return this.rawClient.testSuiteControllerCreate(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerFindOne(String id) {
        return this.rawClient.testSuiteControllerFindOne(id).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerFindOne(String id, RequestOptions requestOptions) {
        return this.rawClient.testSuiteControllerFindOne(id, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerRemove(String id) {
        return this.rawClient.testSuiteControllerRemove(id).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerRemove(String id, RequestOptions requestOptions) {
        return this.rawClient.testSuiteControllerRemove(id, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerUpdate(String id) {
        return this.rawClient.testSuiteControllerUpdate(id).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerUpdate(String id, UpdateTestSuiteDto request) {
        return this.rawClient.testSuiteControllerUpdate(id, request).thenApply(response -> response.body());
    }

    public CompletableFuture<TestSuite> testSuiteControllerUpdate(
            String id, UpdateTestSuiteDto request, RequestOptions requestOptions) {
        return this.rawClient
                .testSuiteControllerUpdate(id, request, requestOptions)
                .thenApply(response -> response.body());
    }
}
